<?php
/**
 * TranslationMemoryApi
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Memsource\ApiException;
use Memsource\Configuration;
use Memsource\HeaderSelector;
use Memsource\ObjectSerializer;

/**
 * TranslationMemoryApi Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TranslationMemoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createTransMemory
     *
     * Create translation memory
     *
     * @param  \Memsource\Model\TransMemoryCreateDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TransMemoryDto
     */
    public function createTransMemory($body = null)
    {
        list($response) = $this->createTransMemoryWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTransMemoryWithHttpInfo
     *
     * Create translation memory
     *
     * @param  \Memsource\Model\TransMemoryCreateDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TransMemoryDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTransMemoryWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\TransMemoryDto';
        $request = $this->createTransMemoryRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TransMemoryDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTransMemoryAsync
     *
     * Create translation memory
     *
     * @param  \Memsource\Model\TransMemoryCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransMemoryAsync($body = null)
    {
        return $this->createTransMemoryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTransMemoryAsyncWithHttpInfo
     *
     * Create translation memory
     *
     * @param  \Memsource\Model\TransMemoryCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransMemoryAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\TransMemoryDto';
        $request = $this->createTransMemoryRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTransMemory'
     *
     * @param  \Memsource\Model\TransMemoryCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTransMemoryRequest($body = null)
    {

        $resourcePath = '/api2/v1/transMemories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSourceAndTranslations
     *
     * Delete both source and translation
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  string $segmentId segmentId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSourceAndTranslations($transMemoryId, $segmentId)
    {
        $this->deleteSourceAndTranslationsWithHttpInfo($transMemoryId, $segmentId);
    }

    /**
     * Operation deleteSourceAndTranslationsWithHttpInfo
     *
     * Delete both source and translation
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSourceAndTranslationsWithHttpInfo($transMemoryId, $segmentId)
    {
        $returnType = '';
        $request = $this->deleteSourceAndTranslationsRequest($transMemoryId, $segmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSourceAndTranslationsAsync
     *
     * Delete both source and translation
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSourceAndTranslationsAsync($transMemoryId, $segmentId)
    {
        return $this->deleteSourceAndTranslationsAsyncWithHttpInfo($transMemoryId, $segmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSourceAndTranslationsAsyncWithHttpInfo
     *
     * Delete both source and translation
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSourceAndTranslationsAsyncWithHttpInfo($transMemoryId, $segmentId)
    {
        $returnType = '';
        $request = $this->deleteSourceAndTranslationsRequest($transMemoryId, $segmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSourceAndTranslations'
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSourceAndTranslationsRequest($transMemoryId, $segmentId)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling deleteSourceAndTranslations'
            );
        }
        // verify the required parameter 'segmentId' is set
        if ($segmentId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segmentId when calling deleteSourceAndTranslations'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/segments/{segmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }
        // path params
        if ($segmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentId' . '}',
                ObjectSerializer::toPathValue($segmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTransMemory
     *
     * Delete translation memory
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  bool $purge purge (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTransMemory($transMemoryId, $purge = 'false')
    {
        $this->deleteTransMemoryWithHttpInfo($transMemoryId, $purge);
    }

    /**
     * Operation deleteTransMemoryWithHttpInfo
     *
     * Delete translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTransMemoryWithHttpInfo($transMemoryId, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deleteTransMemoryRequest($transMemoryId, $purge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTransMemoryAsync
     *
     * Delete translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransMemoryAsync($transMemoryId, $purge = 'false')
    {
        return $this->deleteTransMemoryAsyncWithHttpInfo($transMemoryId, $purge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTransMemoryAsyncWithHttpInfo
     *
     * Delete translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransMemoryAsyncWithHttpInfo($transMemoryId, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deleteTransMemoryRequest($transMemoryId, $purge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTransMemory'
     *
     * @param  int $transMemoryId (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTransMemoryRequest($transMemoryId, $purge = 'false')
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling deleteTransMemory'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purge !== null) {
            $queryParams['purge'] = ObjectSerializer::toQueryValue($purge);
        }

        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTranslation
     *
     * Delete segment of given language
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  string $segmentId segmentId (required)
     * @param  string $lang lang (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTranslation($transMemoryId, $segmentId, $lang)
    {
        $this->deleteTranslationWithHttpInfo($transMemoryId, $segmentId, $lang);
    }

    /**
     * Operation deleteTranslationWithHttpInfo
     *
     * Delete segment of given language
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  string $lang (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTranslationWithHttpInfo($transMemoryId, $segmentId, $lang)
    {
        $returnType = '';
        $request = $this->deleteTranslationRequest($transMemoryId, $segmentId, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTranslationAsync
     *
     * Delete segment of given language
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  string $lang (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTranslationAsync($transMemoryId, $segmentId, $lang)
    {
        return $this->deleteTranslationAsyncWithHttpInfo($transMemoryId, $segmentId, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTranslationAsyncWithHttpInfo
     *
     * Delete segment of given language
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  string $lang (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTranslationAsyncWithHttpInfo($transMemoryId, $segmentId, $lang)
    {
        $returnType = '';
        $request = $this->deleteTranslationRequest($transMemoryId, $segmentId, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTranslation'
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  string $lang (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTranslationRequest($transMemoryId, $segmentId, $lang)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling deleteTranslation'
            );
        }
        // verify the required parameter 'segmentId' is set
        if ($segmentId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segmentId when calling deleteTranslation'
            );
        }
        // verify the required parameter 'lang' is set
        if ($lang === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lang when calling deleteTranslation'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/segments/{segmentId}/lang/{lang}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }
        // path params
        if ($segmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentId' . '}',
                ObjectSerializer::toPathValue($segmentId),
                $resourcePath
            );
        }
        // path params
        if ($lang !== null) {
            $resourcePath = str_replace(
                '{' . 'lang' . '}',
                ObjectSerializer::toPathValue($lang),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadSearchResult
     *
     * Download export
     *
     * @param  string $asyncRequestId Request ID (required)
     * @param  string $format format (optional, default to TMX)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadSearchResult($asyncRequestId, $format = 'TMX')
    {
        $this->downloadSearchResultWithHttpInfo($asyncRequestId, $format);
    }

    /**
     * Operation downloadSearchResultWithHttpInfo
     *
     * Download export
     *
     * @param  string $asyncRequestId Request ID (required)
     * @param  string $format (optional, default to TMX)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadSearchResultWithHttpInfo($asyncRequestId, $format = 'TMX')
    {
        $returnType = '';
        $request = $this->downloadSearchResultRequest($asyncRequestId, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation downloadSearchResultAsync
     *
     * Download export
     *
     * @param  string $asyncRequestId Request ID (required)
     * @param  string $format (optional, default to TMX)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadSearchResultAsync($asyncRequestId, $format = 'TMX')
    {
        return $this->downloadSearchResultAsyncWithHttpInfo($asyncRequestId, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadSearchResultAsyncWithHttpInfo
     *
     * Download export
     *
     * @param  string $asyncRequestId Request ID (required)
     * @param  string $format (optional, default to TMX)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadSearchResultAsyncWithHttpInfo($asyncRequestId, $format = 'TMX')
    {
        $returnType = '';
        $request = $this->downloadSearchResultRequest($asyncRequestId, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadSearchResult'
     *
     * @param  string $asyncRequestId Request ID (required)
     * @param  string $format (optional, default to TMX)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSearchResultRequest($asyncRequestId, $format = 'TMX')
    {
        // verify the required parameter 'asyncRequestId' is set
        if ($asyncRequestId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asyncRequestId when calling downloadSearchResult'
            );
        }

        $resourcePath = '/api2/v1/transMemories/downloadExport/{asyncRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($asyncRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'asyncRequestId' . '}',
                ObjectSerializer::toPathValue($asyncRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editTransMemory
     *
     * Edit translation memory
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  \Memsource\Model\TransMemoryEditDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TransMemoryDto
     */
    public function editTransMemory($transMemoryId, $body = null)
    {
        list($response) = $this->editTransMemoryWithHttpInfo($transMemoryId, $body);
        return $response;
    }

    /**
     * Operation editTransMemoryWithHttpInfo
     *
     * Edit translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\TransMemoryEditDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TransMemoryDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function editTransMemoryWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\TransMemoryDto';
        $request = $this->editTransMemoryRequest($transMemoryId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TransMemoryDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editTransMemoryAsync
     *
     * Edit translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\TransMemoryEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editTransMemoryAsync($transMemoryId, $body = null)
    {
        return $this->editTransMemoryAsyncWithHttpInfo($transMemoryId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editTransMemoryAsyncWithHttpInfo
     *
     * Edit translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\TransMemoryEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editTransMemoryAsyncWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\TransMemoryDto';
        $request = $this->editTransMemoryRequest($transMemoryId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editTransMemory'
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\TransMemoryEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editTransMemoryRequest($transMemoryId, $body = null)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling editTransMemory'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation export
     *
     * Export translation memory
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  string $format format (optional, default to TMX)
     * @param  string $targetLang targetLang (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function export($transMemoryId, $format = 'TMX', $targetLang = null)
    {
        $this->exportWithHttpInfo($transMemoryId, $format, $targetLang);
    }

    /**
     * Operation exportWithHttpInfo
     *
     * Export translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  string $format (optional, default to TMX)
     * @param  string $targetLang (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportWithHttpInfo($transMemoryId, $format = 'TMX', $targetLang = null)
    {
        $returnType = '';
        $request = $this->exportRequest($transMemoryId, $format, $targetLang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation exportAsync
     *
     * Export translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  string $format (optional, default to TMX)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportAsync($transMemoryId, $format = 'TMX', $targetLang = null)
    {
        return $this->exportAsyncWithHttpInfo($transMemoryId, $format, $targetLang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportAsyncWithHttpInfo
     *
     * Export translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  string $format (optional, default to TMX)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportAsyncWithHttpInfo($transMemoryId, $format = 'TMX', $targetLang = null)
    {
        $returnType = '';
        $request = $this->exportRequest($transMemoryId, $format, $targetLang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'export'
     *
     * @param  int $transMemoryId (required)
     * @param  string $format (optional, default to TMX)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportRequest($transMemoryId, $format = 'TMX', $targetLang = null)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling export'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }

        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportByQueryAsync
     *
     * Search translation memory
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  \Memsource\Model\ExportByQueryDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\AsyncExportTMResponseDto
     */
    public function exportByQueryAsync($transMemoryId, $body = null)
    {
        list($response) = $this->exportByQueryAsyncWithHttpInfo($transMemoryId, $body);
        return $response;
    }

    /**
     * Operation exportByQueryAsyncWithHttpInfo
     *
     * Search translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\ExportByQueryDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\AsyncExportTMResponseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportByQueryAsyncWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\AsyncExportTMResponseDto';
        $request = $this->exportByQueryAsyncRequest($transMemoryId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\AsyncExportTMResponseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportByQueryAsyncAsync
     *
     * Search translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\ExportByQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportByQueryAsyncAsync($transMemoryId, $body = null)
    {
        return $this->exportByQueryAsyncAsyncWithHttpInfo($transMemoryId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportByQueryAsyncAsyncWithHttpInfo
     *
     * Search translation memory
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\ExportByQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportByQueryAsyncAsyncWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\AsyncExportTMResponseDto';
        $request = $this->exportByQueryAsyncRequest($transMemoryId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportByQueryAsync'
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\ExportByQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportByQueryAsyncRequest($transMemoryId, $body = null)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling exportByQueryAsync'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/exportByQueryAsync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransMemory
     *
     * Get translation memory
     *
     * @param  int $transMemoryId transMemoryId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TransMemoryDto
     */
    public function getTransMemory($transMemoryId)
    {
        list($response) = $this->getTransMemoryWithHttpInfo($transMemoryId);
        return $response;
    }

    /**
     * Operation getTransMemoryWithHttpInfo
     *
     * Get translation memory
     *
     * @param  int $transMemoryId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TransMemoryDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransMemoryWithHttpInfo($transMemoryId)
    {
        $returnType = '\Memsource\Model\TransMemoryDto';
        $request = $this->getTransMemoryRequest($transMemoryId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TransMemoryDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransMemoryAsync
     *
     * Get translation memory
     *
     * @param  int $transMemoryId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransMemoryAsync($transMemoryId)
    {
        return $this->getTransMemoryAsyncWithHttpInfo($transMemoryId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransMemoryAsyncWithHttpInfo
     *
     * Get translation memory
     *
     * @param  int $transMemoryId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransMemoryAsyncWithHttpInfo($transMemoryId)
    {
        $returnType = '\Memsource\Model\TransMemoryDto';
        $request = $this->getTransMemoryRequest($transMemoryId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransMemory'
     *
     * @param  int $transMemoryId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransMemoryRequest($transMemoryId)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling getTransMemory'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTranslationResources
     *
     * Get translation resources
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TranslationResourcesDto
     */
    public function getTranslationResources($projectUid, $jobUid)
    {
        list($response) = $this->getTranslationResourcesWithHttpInfo($projectUid, $jobUid);
        return $response;
    }

    /**
     * Operation getTranslationResourcesWithHttpInfo
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TranslationResourcesDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTranslationResourcesWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\TranslationResourcesDto';
        $request = $this->getTranslationResourcesRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TranslationResourcesDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTranslationResourcesAsync
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTranslationResourcesAsync($projectUid, $jobUid)
    {
        return $this->getTranslationResourcesAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTranslationResourcesAsyncWithHttpInfo
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTranslationResourcesAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\TranslationResourcesDto';
        $request = $this->getTranslationResourcesRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTranslationResources'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTranslationResourcesRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getTranslationResources'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling getTranslationResources'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/translationResources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importTransMemory
     *
     * Import segments
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  \Memsource\Model\InputStream $body body (optional)
     * @param  string $contentDisposition contentDisposition (optional)
     * @param  bool $strictLangMatching strictLangMatching (optional, default to false)
     * @param  bool $stripNativeCodes stripNativeCodes (optional, default to true)
     * @param  bool $excludeNotConfirmedSegments excludeNotConfirmedSegments (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ImportResponse
     */
    public function importTransMemory($transMemoryId, $body = null, $contentDisposition = null, $strictLangMatching = 'false', $stripNativeCodes = 'true', $excludeNotConfirmedSegments = 'false')
    {
        list($response) = $this->importTransMemoryWithHttpInfo($transMemoryId, $body, $contentDisposition, $strictLangMatching, $stripNativeCodes, $excludeNotConfirmedSegments);
        return $response;
    }

    /**
     * Operation importTransMemoryWithHttpInfo
     *
     * Import segments
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $stripNativeCodes (optional, default to true)
     * @param  bool $excludeNotConfirmedSegments (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importTransMemoryWithHttpInfo($transMemoryId, $body = null, $contentDisposition = null, $strictLangMatching = 'false', $stripNativeCodes = 'true', $excludeNotConfirmedSegments = 'false')
    {
        $returnType = '\Memsource\Model\ImportResponse';
        $request = $this->importTransMemoryRequest($transMemoryId, $body, $contentDisposition, $strictLangMatching, $stripNativeCodes, $excludeNotConfirmedSegments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ImportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importTransMemoryAsync
     *
     * Import segments
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $stripNativeCodes (optional, default to true)
     * @param  bool $excludeNotConfirmedSegments (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importTransMemoryAsync($transMemoryId, $body = null, $contentDisposition = null, $strictLangMatching = 'false', $stripNativeCodes = 'true', $excludeNotConfirmedSegments = 'false')
    {
        return $this->importTransMemoryAsyncWithHttpInfo($transMemoryId, $body, $contentDisposition, $strictLangMatching, $stripNativeCodes, $excludeNotConfirmedSegments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importTransMemoryAsyncWithHttpInfo
     *
     * Import segments
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $stripNativeCodes (optional, default to true)
     * @param  bool $excludeNotConfirmedSegments (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importTransMemoryAsyncWithHttpInfo($transMemoryId, $body = null, $contentDisposition = null, $strictLangMatching = 'false', $stripNativeCodes = 'true', $excludeNotConfirmedSegments = 'false')
    {
        $returnType = '\Memsource\Model\ImportResponse';
        $request = $this->importTransMemoryRequest($transMemoryId, $body, $contentDisposition, $strictLangMatching, $stripNativeCodes, $excludeNotConfirmedSegments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importTransMemory'
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $stripNativeCodes (optional, default to true)
     * @param  bool $excludeNotConfirmedSegments (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importTransMemoryRequest($transMemoryId, $body = null, $contentDisposition = null, $strictLangMatching = 'false', $stripNativeCodes = 'true', $excludeNotConfirmedSegments = 'false')
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling importTransMemory'
            );
        }
        if ($contentDisposition !== null && !preg_match("/filename\\*=UTF-8''(.+)/", $contentDisposition)) {
            throw new \InvalidArgumentException("invalid value for \"contentDisposition\" when calling TranslationMemoryApi.importTransMemory, must conform to the pattern /filename\\*=UTF-8''(.+)/.");
        }


        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($strictLangMatching !== null) {
            $queryParams['strictLangMatching'] = ObjectSerializer::toQueryValue($strictLangMatching);
        }
        // query params
        if ($stripNativeCodes !== null) {
            $queryParams['stripNativeCodes'] = ObjectSerializer::toQueryValue($stripNativeCodes);
        }
        // query params
        if ($excludeNotConfirmedSegments !== null) {
            $queryParams['excludeNotConfirmedSegments'] = ObjectSerializer::toQueryValue($excludeNotConfirmedSegments);
        }
        // header params
        if ($contentDisposition !== null) {
            $headerParams['Content-Disposition'] = ObjectSerializer::toHeaderValue($contentDisposition);
        }

        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransMemories
     *
     * List translation memories
     *
     * @param  string $name name (optional)
     * @param  string $sourceLang sourceLang (optional)
     * @param  string $targetLang targetLang (optional)
     * @param  string $clientId clientId (optional)
     * @param  string $domainId domainId (optional)
     * @param  string $subDomainId subDomainId (optional)
     * @param  string $businessUnitId businessUnitId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoTransMemoryDto
     */
    public function listTransMemories($name = null, $sourceLang = null, $targetLang = null, $clientId = null, $domainId = null, $subDomainId = null, $businessUnitId = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listTransMemoriesWithHttpInfo($name, $sourceLang, $targetLang, $clientId, $domainId, $subDomainId, $businessUnitId, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listTransMemoriesWithHttpInfo
     *
     * List translation memories
     *
     * @param  string $name (optional)
     * @param  string $sourceLang (optional)
     * @param  string $targetLang (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  string $businessUnitId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoTransMemoryDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransMemoriesWithHttpInfo($name = null, $sourceLang = null, $targetLang = null, $clientId = null, $domainId = null, $subDomainId = null, $businessUnitId = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoTransMemoryDto';
        $request = $this->listTransMemoriesRequest($name, $sourceLang, $targetLang, $clientId, $domainId, $subDomainId, $businessUnitId, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoTransMemoryDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransMemoriesAsync
     *
     * List translation memories
     *
     * @param  string $name (optional)
     * @param  string $sourceLang (optional)
     * @param  string $targetLang (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  string $businessUnitId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransMemoriesAsync($name = null, $sourceLang = null, $targetLang = null, $clientId = null, $domainId = null, $subDomainId = null, $businessUnitId = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listTransMemoriesAsyncWithHttpInfo($name, $sourceLang, $targetLang, $clientId, $domainId, $subDomainId, $businessUnitId, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransMemoriesAsyncWithHttpInfo
     *
     * List translation memories
     *
     * @param  string $name (optional)
     * @param  string $sourceLang (optional)
     * @param  string $targetLang (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  string $businessUnitId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransMemoriesAsyncWithHttpInfo($name = null, $sourceLang = null, $targetLang = null, $clientId = null, $domainId = null, $subDomainId = null, $businessUnitId = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoTransMemoryDto';
        $request = $this->listTransMemoriesRequest($name, $sourceLang, $targetLang, $clientId, $domainId, $subDomainId, $businessUnitId, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransMemories'
     *
     * @param  string $name (optional)
     * @param  string $sourceLang (optional)
     * @param  string $targetLang (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  string $businessUnitId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransMemoriesRequest($name = null, $sourceLang = null, $targetLang = null, $clientId = null, $domainId = null, $subDomainId = null, $businessUnitId = null, $pageNumber = '0', $pageSize = '50')
    {

        $resourcePath = '/api2/v1/transMemories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($sourceLang !== null) {
            $queryParams['sourceLang'] = ObjectSerializer::toQueryValue($sourceLang);
        }
        // query params
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }
        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId);
        }
        // query params
        if ($domainId !== null) {
            $queryParams['domainId'] = ObjectSerializer::toQueryValue($domainId);
        }
        // query params
        if ($subDomainId !== null) {
            $queryParams['subDomainId'] = ObjectSerializer::toQueryValue($subDomainId);
        }
        // query params
        if ($businessUnitId !== null) {
            $queryParams['businessUnitId'] = ObjectSerializer::toQueryValue($businessUnitId);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation search
     *
     * Search translation memory (sync)
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  \Memsource\Model\SearchRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function search($transMemoryId, $body = null)
    {
        list($response) = $this->searchWithHttpInfo($transMemoryId, $body);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * Search translation memory (sync)
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\SearchRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchRequest($transMemoryId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * Search translation memory (sync)
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\SearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($transMemoryId, $body = null)
    {
        return $this->searchAsyncWithHttpInfo($transMemoryId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * Search translation memory (sync)
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\SearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchRequest($transMemoryId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\SearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchRequest($transMemoryId, $body = null)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling search'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSegmentByJob
     *
     * Search job's translation memories
     *
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function searchSegmentByJob($jobUid, $body = null)
    {
        list($response) = $this->searchSegmentByJobWithHttpInfo($jobUid, $body);
        return $response;
    }

    /**
     * Operation searchSegmentByJobWithHttpInfo
     *
     * Search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSegmentByJobWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchSegmentByJobRequest($jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSegmentByJobAsync
     *
     * Search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSegmentByJobAsync($jobUid, $body = null)
    {
        return $this->searchSegmentByJobAsyncWithHttpInfo($jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSegmentByJobAsyncWithHttpInfo
     *
     * Search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSegmentByJobAsyncWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchSegmentByJobRequest($jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSegmentByJob'
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSegmentByJobRequest($jobUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling searchSegmentByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/transMemories/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTranslation
     *
     * Edit segment
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  string $segmentId segmentId (required)
     * @param  \Memsource\Model\TranslationDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTranslation($transMemoryId, $segmentId, $body = null)
    {
        $this->updateTranslationWithHttpInfo($transMemoryId, $segmentId, $body);
    }

    /**
     * Operation updateTranslationWithHttpInfo
     *
     * Edit segment
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  \Memsource\Model\TranslationDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTranslationWithHttpInfo($transMemoryId, $segmentId, $body = null)
    {
        $returnType = '';
        $request = $this->updateTranslationRequest($transMemoryId, $segmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateTranslationAsync
     *
     * Edit segment
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  \Memsource\Model\TranslationDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTranslationAsync($transMemoryId, $segmentId, $body = null)
    {
        return $this->updateTranslationAsyncWithHttpInfo($transMemoryId, $segmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTranslationAsyncWithHttpInfo
     *
     * Edit segment
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  \Memsource\Model\TranslationDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTranslationAsyncWithHttpInfo($transMemoryId, $segmentId, $body = null)
    {
        $returnType = '';
        $request = $this->updateTranslationRequest($transMemoryId, $segmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTranslation'
     *
     * @param  int $transMemoryId (required)
     * @param  string $segmentId (required)
     * @param  \Memsource\Model\TranslationDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTranslationRequest($transMemoryId, $segmentId, $body = null)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling updateTranslation'
            );
        }
        // verify the required parameter 'segmentId' is set
        if ($segmentId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segmentId when calling updateTranslation'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/segments/{segmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }
        // path params
        if ($segmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentId' . '}',
                ObjectSerializer::toPathValue($segmentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wildCardSearchByJob
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function wildCardSearchByJob($jobUid, $body = null)
    {
        list($response) = $this->wildCardSearchByJobWithHttpInfo($jobUid, $body);
        return $response;
    }

    /**
     * Operation wildCardSearchByJobWithHttpInfo
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function wildCardSearchByJobWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->wildCardSearchByJobRequest($jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wildCardSearchByJobAsync
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wildCardSearchByJobAsync($jobUid, $body = null)
    {
        return $this->wildCardSearchByJobAsyncWithHttpInfo($jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wildCardSearchByJobAsyncWithHttpInfo
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wildCardSearchByJobAsyncWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->wildCardSearchByJobRequest($jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wildCardSearchByJob'
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wildCardSearchByJobRequest($jobUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling wildCardSearchByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/transMemories/wildCardSearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wildcardSearch
     *
     * Wildcard search
     *
     * @param  int $transMemoryId transMemoryId (required)
     * @param  \Memsource\Model\WildCardSearchRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function wildcardSearch($transMemoryId, $body = null)
    {
        list($response) = $this->wildcardSearchWithHttpInfo($transMemoryId, $body);
        return $response;
    }

    /**
     * Operation wildcardSearchWithHttpInfo
     *
     * Wildcard search
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\WildCardSearchRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function wildcardSearchWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->wildcardSearchRequest($transMemoryId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wildcardSearchAsync
     *
     * Wildcard search
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\WildCardSearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wildcardSearchAsync($transMemoryId, $body = null)
    {
        return $this->wildcardSearchAsyncWithHttpInfo($transMemoryId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wildcardSearchAsyncWithHttpInfo
     *
     * Wildcard search
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\WildCardSearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wildcardSearchAsyncWithHttpInfo($transMemoryId, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->wildcardSearchRequest($transMemoryId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wildcardSearch'
     *
     * @param  int $transMemoryId (required)
     * @param  \Memsource\Model\WildCardSearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wildcardSearchRequest($transMemoryId, $body = null)
    {
        // verify the required parameter 'transMemoryId' is set
        if ($transMemoryId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transMemoryId when calling wildcardSearch'
            );
        }

        $resourcePath = '/api2/v1/transMemories/{transMemoryId}/wildCardSearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transMemoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'transMemoryId' . '}',
                ObjectSerializer::toPathValue($transMemoryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
