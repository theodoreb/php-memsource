<?php
/**
 * ProjectApi
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Memsource\ApiException;
use Memsource\Configuration;
use Memsource\HeaderSelector;
use Memsource\ObjectSerializer;

/**
 * ProjectApi Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addTargetLanguageToProject
     *
     * Add target languages
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\AddTargetLangDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addTargetLanguageToProject($projectUid, $body = null)
    {
        $this->addTargetLanguageToProjectWithHttpInfo($projectUid, $body);
    }

    /**
     * Operation addTargetLanguageToProjectWithHttpInfo
     *
     * Add target languages
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddTargetLangDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTargetLanguageToProjectWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->addTargetLanguageToProjectRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addTargetLanguageToProjectAsync
     *
     * Add target languages
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddTargetLangDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTargetLanguageToProjectAsync($projectUid, $body = null)
    {
        return $this->addTargetLanguageToProjectAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTargetLanguageToProjectAsyncWithHttpInfo
     *
     * Add target languages
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddTargetLangDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTargetLanguageToProjectAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->addTargetLanguageToProjectRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTargetLanguageToProject'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddTargetLangDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addTargetLanguageToProjectRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling addTargetLanguageToProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/targetLangs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addWorkflowSteps
     *
     * Add workflow steps
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\AddWorkflowStepsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addWorkflowSteps($projectUid, $body = null)
    {
        $this->addWorkflowStepsWithHttpInfo($projectUid, $body);
    }

    /**
     * Operation addWorkflowStepsWithHttpInfo
     *
     * Add workflow steps
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddWorkflowStepsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWorkflowStepsWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->addWorkflowStepsRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addWorkflowStepsAsync
     *
     * Add workflow steps
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddWorkflowStepsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWorkflowStepsAsync($projectUid, $body = null)
    {
        return $this->addWorkflowStepsAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addWorkflowStepsAsyncWithHttpInfo
     *
     * Add workflow steps
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddWorkflowStepsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWorkflowStepsAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->addWorkflowStepsRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addWorkflowSteps'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AddWorkflowStepsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addWorkflowStepsRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling addWorkflowSteps'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/workflowSteps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignVendorToProject
     *
     * Assign vendor
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\AssignVendorDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function assignVendorToProject($projectUid, $body = null)
    {
        $this->assignVendorToProjectWithHttpInfo($projectUid, $body);
    }

    /**
     * Operation assignVendorToProjectWithHttpInfo
     *
     * Assign vendor
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AssignVendorDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignVendorToProjectWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->assignVendorToProjectRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation assignVendorToProjectAsync
     *
     * Assign vendor
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AssignVendorDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignVendorToProjectAsync($projectUid, $body = null)
    {
        return $this->assignVendorToProjectAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignVendorToProjectAsyncWithHttpInfo
     *
     * Assign vendor
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AssignVendorDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignVendorToProjectAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->assignVendorToProjectRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignVendorToProject'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\AssignVendorDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignVendorToProjectRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling assignVendorToProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/assignVendor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneProject
     *
     * Clone project
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\CloneProjectDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\AbstractProjectDto
     */
    public function cloneProject($projectUid, $body = null)
    {
        list($response) = $this->cloneProjectWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation cloneProjectWithHttpInfo
     *
     * Clone project
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CloneProjectDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\AbstractProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneProjectWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->cloneProjectRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\AbstractProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneProjectAsync
     *
     * Clone project
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CloneProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneProjectAsync($projectUid, $body = null)
    {
        return $this->cloneProjectAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneProjectAsyncWithHttpInfo
     *
     * Clone project
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CloneProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneProjectAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->cloneProjectRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneProject'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CloneProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cloneProjectRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling cloneProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProject
     *
     * Create project
     *
     * @param  \Memsource\Model\CreateProjectDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\AbstractProjectDto
     */
    public function createProject($body = null)
    {
        list($response) = $this->createProjectWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * Create project
     *
     * @param  \Memsource\Model\CreateProjectDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\AbstractProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->createProjectRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\AbstractProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProjectAsync
     *
     * Create project
     *
     * @param  \Memsource\Model\CreateProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAsync($body = null)
    {
        return $this->createProjectAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProjectAsyncWithHttpInfo
     *
     * Create project
     *
     * @param  \Memsource\Model\CreateProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->createProjectRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProject'
     *
     * @param  \Memsource\Model\CreateProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProjectRequest($body = null)
    {

        $resourcePath = '/api2/v1/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProjectFromTemplate
     *
     * Create project from template
     *
     * @param  int $templateId templateId (required)
     * @param  \Memsource\Model\CreateProjectFromTemplateDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\AbstractProjectDto
     */
    public function createProjectFromTemplate($templateId, $body = null)
    {
        list($response) = $this->createProjectFromTemplateWithHttpInfo($templateId, $body);
        return $response;
    }

    /**
     * Operation createProjectFromTemplateWithHttpInfo
     *
     * Create project from template
     *
     * @param  int $templateId (required)
     * @param  \Memsource\Model\CreateProjectFromTemplateDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\AbstractProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectFromTemplateWithHttpInfo($templateId, $body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->createProjectFromTemplateRequest($templateId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\AbstractProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProjectFromTemplateAsync
     *
     * Create project from template
     *
     * @param  int $templateId (required)
     * @param  \Memsource\Model\CreateProjectFromTemplateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectFromTemplateAsync($templateId, $body = null)
    {
        return $this->createProjectFromTemplateAsyncWithHttpInfo($templateId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProjectFromTemplateAsyncWithHttpInfo
     *
     * Create project from template
     *
     * @param  int $templateId (required)
     * @param  \Memsource\Model\CreateProjectFromTemplateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectFromTemplateAsyncWithHttpInfo($templateId, $body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->createProjectFromTemplateRequest($templateId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProjectFromTemplate'
     *
     * @param  int $templateId (required)
     * @param  \Memsource\Model\CreateProjectFromTemplateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProjectFromTemplateRequest($templateId, $body = null)
    {
        // verify the required parameter 'templateId' is set
        if ($templateId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateId when calling createProjectFromTemplate'
            );
        }

        $resourcePath = '/api2/v1/projects/applyTemplate/{templateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($templateId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProject
     *
     * Delete project
     *
     * @param  string $projectUid projectUid (required)
     * @param  bool $purge purge (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProject($projectUid, $purge = 'false')
    {
        $this->deleteProjectWithHttpInfo($projectUid, $purge);
    }

    /**
     * Operation deleteProjectWithHttpInfo
     *
     * Delete project
     *
     * @param  string $projectUid (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectWithHttpInfo($projectUid, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deleteProjectRequest($projectUid, $purge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectAsync
     *
     * Delete project
     *
     * @param  string $projectUid (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsync($projectUid, $purge = 'false')
    {
        return $this->deleteProjectAsyncWithHttpInfo($projectUid, $purge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectAsyncWithHttpInfo
     *
     * Delete project
     *
     * @param  string $projectUid (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsyncWithHttpInfo($projectUid, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deleteProjectRequest($projectUid, $purge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProject'
     *
     * @param  string $projectUid (required)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProjectRequest($projectUid, $purge = 'false')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling deleteProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purge !== null) {
            $queryParams['purge'] = ObjectSerializer::toQueryValue($purge);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editProject
     *
     * Edit project
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\EditProjectDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\AbstractProjectDto
     */
    public function editProject($projectUid, $body = null)
    {
        list($response) = $this->editProjectWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation editProjectWithHttpInfo
     *
     * Edit project
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\AbstractProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function editProjectWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->editProjectRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\AbstractProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editProjectAsync
     *
     * Edit project
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProjectAsync($projectUid, $body = null)
    {
        return $this->editProjectAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editProjectAsyncWithHttpInfo
     *
     * Edit project
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProjectAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->editProjectRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editProject'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editProjectRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling editProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editProjectAccessSettings
     *
     * Edit access and security settings
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\EditProjectSecuritySettingsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectSecuritySettingsDto
     */
    public function editProjectAccessSettings($projectUid, $body = null)
    {
        list($response) = $this->editProjectAccessSettingsWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation editProjectAccessSettingsWithHttpInfo
     *
     * Edit access and security settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectSecuritySettingsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectSecuritySettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function editProjectAccessSettingsWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\ProjectSecuritySettingsDto';
        $request = $this->editProjectAccessSettingsRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectSecuritySettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editProjectAccessSettingsAsync
     *
     * Edit access and security settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectSecuritySettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProjectAccessSettingsAsync($projectUid, $body = null)
    {
        return $this->editProjectAccessSettingsAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editProjectAccessSettingsAsyncWithHttpInfo
     *
     * Edit access and security settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectSecuritySettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProjectAccessSettingsAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\ProjectSecuritySettingsDto';
        $request = $this->editProjectAccessSettingsRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editProjectAccessSettings'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectSecuritySettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editProjectAccessSettingsRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling editProjectAccessSettings'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/accessSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editProjectQualityAssuranceSettings
     *
     * Edit quality assurance settings
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\EditQASettingsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\QASettingsDto
     */
    public function editProjectQualityAssuranceSettings($projectUid, $body = null)
    {
        list($response) = $this->editProjectQualityAssuranceSettingsWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation editProjectQualityAssuranceSettingsWithHttpInfo
     *
     * Edit quality assurance settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditQASettingsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\QASettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function editProjectQualityAssuranceSettingsWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\QASettingsDto';
        $request = $this->editProjectQualityAssuranceSettingsRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\QASettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editProjectQualityAssuranceSettingsAsync
     *
     * Edit quality assurance settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditQASettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProjectQualityAssuranceSettingsAsync($projectUid, $body = null)
    {
        return $this->editProjectQualityAssuranceSettingsAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editProjectQualityAssuranceSettingsAsyncWithHttpInfo
     *
     * Edit quality assurance settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditQASettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProjectQualityAssuranceSettingsAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\QASettingsDto';
        $request = $this->editProjectQualityAssuranceSettingsRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editProjectQualityAssuranceSettings'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditQASettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editProjectQualityAssuranceSettingsRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling editProjectQualityAssuranceSettings'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/qaSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enabledQualityChecks
     *
     * Get QA checks
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\EnabledQualityChecksDto
     */
    public function enabledQualityChecks($projectUid)
    {
        list($response) = $this->enabledQualityChecksWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation enabledQualityChecksWithHttpInfo
     *
     * Get QA checks
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\EnabledQualityChecksDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function enabledQualityChecksWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\EnabledQualityChecksDto';
        $request = $this->enabledQualityChecksRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\EnabledQualityChecksDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enabledQualityChecksAsync
     *
     * Get QA checks
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enabledQualityChecksAsync($projectUid)
    {
        return $this->enabledQualityChecksAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enabledQualityChecksAsyncWithHttpInfo
     *
     * Get QA checks
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enabledQualityChecksAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\EnabledQualityChecksDto';
        $request = $this->enabledQualityChecksRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enabledQualityChecks'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enabledQualityChecksRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling enabledQualityChecks'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/qaSettingsChecks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialSettings
     *
     * Get financial settings
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\FinancialSettingsDto
     */
    public function getFinancialSettings($projectUid)
    {
        list($response) = $this->getFinancialSettingsWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getFinancialSettingsWithHttpInfo
     *
     * Get financial settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\FinancialSettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialSettingsWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\FinancialSettingsDto';
        $request = $this->getFinancialSettingsRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\FinancialSettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialSettingsAsync
     *
     * Get financial settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialSettingsAsync($projectUid)
    {
        return $this->getFinancialSettingsAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialSettingsAsyncWithHttpInfo
     *
     * Get financial settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialSettingsAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\FinancialSettingsDto';
        $request = $this->getFinancialSettingsRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialSettings'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFinancialSettingsRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getFinancialSettings'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/financialSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMtSettingsForProject
     *
     * Get machine translate settings
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\MTSettingsPerLanguageListDto
     */
    public function getMtSettingsForProject($projectUid)
    {
        list($response) = $this->getMtSettingsForProjectWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getMtSettingsForProjectWithHttpInfo
     *
     * Get machine translate settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\MTSettingsPerLanguageListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMtSettingsForProjectWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\MTSettingsPerLanguageListDto';
        $request = $this->getMtSettingsForProjectRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\MTSettingsPerLanguageListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMtSettingsForProjectAsync
     *
     * Get machine translate settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMtSettingsForProjectAsync($projectUid)
    {
        return $this->getMtSettingsForProjectAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMtSettingsForProjectAsyncWithHttpInfo
     *
     * Get machine translate settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMtSettingsForProjectAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\MTSettingsPerLanguageListDto';
        $request = $this->getMtSettingsForProjectRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMtSettingsForProject'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMtSettingsForProjectRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getMtSettingsForProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/mtSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProject
     *
     * Get project
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\AbstractProjectDto
     */
    public function getProject($projectUid)
    {
        list($response) = $this->getProjectWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getProjectWithHttpInfo
     *
     * Get project
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\AbstractProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->getProjectRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\AbstractProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAsync
     *
     * Get project
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAsync($projectUid)
    {
        return $this->getProjectAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectAsyncWithHttpInfo
     *
     * Get project
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\AbstractProjectDto';
        $request = $this->getProjectRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProject'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectAccessSettings
     *
     * Get access and security settings
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectSecuritySettingsDto
     */
    public function getProjectAccessSettings($projectUid)
    {
        list($response) = $this->getProjectAccessSettingsWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getProjectAccessSettingsWithHttpInfo
     *
     * Get access and security settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectSecuritySettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectAccessSettingsWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectSecuritySettingsDto';
        $request = $this->getProjectAccessSettingsRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectSecuritySettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAccessSettingsAsync
     *
     * Get access and security settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAccessSettingsAsync($projectUid)
    {
        return $this->getProjectAccessSettingsAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectAccessSettingsAsyncWithHttpInfo
     *
     * Get access and security settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAccessSettingsAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectSecuritySettingsDto';
        $request = $this->getProjectAccessSettingsRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectAccessSettings'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectAccessSettingsRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProjectAccessSettings'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/accessSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectQASettings
     *
     * Get quality assurance settings
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\QASettingsDto
     */
    public function getProjectQASettings($projectUid)
    {
        list($response) = $this->getProjectQASettingsWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getProjectQASettingsWithHttpInfo
     *
     * Get quality assurance settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\QASettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectQASettingsWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\QASettingsDto';
        $request = $this->getProjectQASettingsRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\QASettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectQASettingsAsync
     *
     * Get quality assurance settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectQASettingsAsync($projectUid)
    {
        return $this->getProjectQASettingsAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectQASettingsAsyncWithHttpInfo
     *
     * Get quality assurance settings
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectQASettingsAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\QASettingsDto';
        $request = $this->getProjectQASettingsRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectQASettings'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectQASettingsRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProjectQASettings'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/qaSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectSettings
     *
     * Get LQA settings
     *
     * @param  string $projectUid projectUid (required)
     * @param  int $workflowLevel workflowLevel (optional, default to 1)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\LqaSettingsDto
     */
    public function getProjectSettings($projectUid, $workflowLevel = '1')
    {
        list($response) = $this->getProjectSettingsWithHttpInfo($projectUid, $workflowLevel);
        return $response;
    }

    /**
     * Operation getProjectSettingsWithHttpInfo
     *
     * Get LQA settings
     *
     * @param  string $projectUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\LqaSettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectSettingsWithHttpInfo($projectUid, $workflowLevel = '1')
    {
        $returnType = '\Memsource\Model\LqaSettingsDto';
        $request = $this->getProjectSettingsRequest($projectUid, $workflowLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\LqaSettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectSettingsAsync
     *
     * Get LQA settings
     *
     * @param  string $projectUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSettingsAsync($projectUid, $workflowLevel = '1')
    {
        return $this->getProjectSettingsAsyncWithHttpInfo($projectUid, $workflowLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectSettingsAsyncWithHttpInfo
     *
     * Get LQA settings
     *
     * @param  string $projectUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSettingsAsyncWithHttpInfo($projectUid, $workflowLevel = '1')
    {
        $returnType = '\Memsource\Model\LqaSettingsDto';
        $request = $this->getProjectSettingsRequest($projectUid, $workflowLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectSettings'
     *
     * @param  string $projectUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectSettingsRequest($projectUid, $workflowLevel = '1')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProjectSettings'
            );
        }
        if ($workflowLevel !== null && $workflowLevel > 15) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling ProjectApi.getProjectSettings, must be smaller than or equal to 15.');
        }
        if ($workflowLevel !== null && $workflowLevel < 1) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling ProjectApi.getProjectSettings, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/lqaSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($workflowLevel !== null) {
            $queryParams['workflowLevel'] = ObjectSerializer::toQueryValue($workflowLevel);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectTermBases
     *
     * Get term bases
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectTermBaseListDto
     */
    public function getProjectTermBases($projectUid)
    {
        list($response) = $this->getProjectTermBasesWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getProjectTermBasesWithHttpInfo
     *
     * Get term bases
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectTermBaseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectTermBasesWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectTermBaseListDto';
        $request = $this->getProjectTermBasesRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectTermBaseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectTermBasesAsync
     *
     * Get term bases
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectTermBasesAsync($projectUid)
    {
        return $this->getProjectTermBasesAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectTermBasesAsyncWithHttpInfo
     *
     * Get term bases
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectTermBasesAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectTermBaseListDto';
        $request = $this->getProjectTermBasesRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectTermBases'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectTermBasesRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProjectTermBases'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/termBases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectTransMemories
     *
     * Get translation memories
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectTransMemoryListDto
     */
    public function getProjectTransMemories($projectUid)
    {
        list($response) = $this->getProjectTransMemoriesWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getProjectTransMemoriesWithHttpInfo
     *
     * Get translation memories
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectTransMemoryListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectTransMemoriesWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectTransMemoryListDto';
        $request = $this->getProjectTransMemoriesRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectTransMemoryListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectTransMemoriesAsync
     *
     * Get translation memories
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectTransMemoriesAsync($projectUid)
    {
        return $this->getProjectTransMemoriesAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectTransMemoriesAsyncWithHttpInfo
     *
     * Get translation memories
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectTransMemoriesAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectTransMemoryListDto';
        $request = $this->getProjectTransMemoriesRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectTransMemories'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectTransMemoriesRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProjectTransMemories'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/transMemories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectWorkflowSteps
     *
     * Get workflow steps
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectWorkflowStepListDto
     */
    public function getProjectWorkflowSteps($projectUid)
    {
        list($response) = $this->getProjectWorkflowStepsWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation getProjectWorkflowStepsWithHttpInfo
     *
     * Get workflow steps
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectWorkflowStepListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectWorkflowStepsWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectWorkflowStepListDto';
        $request = $this->getProjectWorkflowStepsRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectWorkflowStepListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectWorkflowStepsAsync
     *
     * Get workflow steps
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectWorkflowStepsAsync($projectUid)
    {
        return $this->getProjectWorkflowStepsAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectWorkflowStepsAsyncWithHttpInfo
     *
     * Get workflow steps
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectWorkflowStepsAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProjectWorkflowStepListDto';
        $request = $this->getProjectWorkflowStepsRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectWorkflowSteps'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectWorkflowStepsRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getProjectWorkflowSteps'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/workflowSteps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuotesForProject
     *
     * List quotes
     *
     * @param  string $projectUid projectUid (required)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoQuoteDto
     */
    public function getQuotesForProject($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->getQuotesForProjectWithHttpInfo($projectUid, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation getQuotesForProjectWithHttpInfo
     *
     * List quotes
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoQuoteDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuotesForProjectWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoQuoteDto';
        $request = $this->getQuotesForProjectRequest($projectUid, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoQuoteDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuotesForProjectAsync
     *
     * List quotes
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuotesForProjectAsync($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        return $this->getQuotesForProjectAsyncWithHttpInfo($projectUid, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuotesForProjectAsyncWithHttpInfo
     *
     * List quotes
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuotesForProjectAsyncWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoQuoteDto';
        $request = $this->getQuotesForProjectRequest($projectUid, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuotesForProject'
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuotesForProjectRequest($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getQuotesForProject'
            );
        }
        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling ProjectApi.getQuotesForProject, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.getQuotesForProject, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.getQuotesForProject, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAssignedProjects
     *
     * List assigned projects
     *
     * @param  int $userId userId (required)
     * @param  string[] $status status (optional)
     * @param  string[] $targetLang targetLang (optional)
     * @param  int $workflowStepId workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename filename (optional)
     * @param  string $projectName projectName (optional)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoProjectReference
     */
    public function listAssignedProjects($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listAssignedProjectsWithHttpInfo($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listAssignedProjectsWithHttpInfo
     *
     * List assigned projects
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoProjectReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssignedProjectsWithHttpInfo($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoProjectReference';
        $request = $this->listAssignedProjectsRequest($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoProjectReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAssignedProjectsAsync
     *
     * List assigned projects
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssignedProjectsAsync($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listAssignedProjectsAsyncWithHttpInfo($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAssignedProjectsAsyncWithHttpInfo
     *
     * List assigned projects
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssignedProjectsAsyncWithHttpInfo($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoProjectReference';
        $request = $this->listAssignedProjectsRequest($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAssignedProjects'
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAssignedProjectsRequest($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling listAssignedProjects'
            );
        }
        if ($dueInHours !== null && $dueInHours < -1) {
            throw new \InvalidArgumentException('invalid value for "$dueInHours" when calling ProjectApi.listAssignedProjects, must be bigger than or equal to -1.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling ProjectApi.listAssignedProjects, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.listAssignedProjects, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.listAssignedProjects, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/users/{userId}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($targetLang)) {
            $targetLang = ObjectSerializer::serializeCollection($targetLang, 'multi', true);
        }
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }
        // query params
        if ($workflowStepId !== null) {
            $queryParams['workflowStepId'] = ObjectSerializer::toQueryValue($workflowStepId);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($projectName !== null) {
            $queryParams['projectName'] = ObjectSerializer::toQueryValue($projectName);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listByProject
     *
     * List analyses by project
     *
     * @param  string $projectUid projectUid (required)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoAnalyseDto
     */
    public function listByProject($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listByProjectWithHttpInfo($projectUid, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listByProjectWithHttpInfo
     *
     * List analyses by project
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoAnalyseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listByProjectWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoAnalyseDto';
        $request = $this->listByProjectRequest($projectUid, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoAnalyseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listByProjectAsync
     *
     * List analyses by project
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listByProjectAsync($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listByProjectAsyncWithHttpInfo($projectUid, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listByProjectAsyncWithHttpInfo
     *
     * List analyses by project
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listByProjectAsyncWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoAnalyseDto';
        $request = $this->listByProjectRequest($projectUid, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listByProject'
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listByProjectRequest($projectUid, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling listByProject'
            );
        }
        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling ProjectApi.listByProject, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.listByProject, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.listByProject, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/analyses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProjects
     *
     * List projects
     *
     * @param  string $name name (optional)
     * @param  int $clientId clientId (optional)
     * @param  string $clientName clientName (optional)
     * @param  string $businessUnitName businessUnitName (optional)
     * @param  string[] $statuses statuses (optional)
     * @param  string[] $targetLangs targetLangs (optional)
     * @param  string $domainName domainName (optional)
     * @param  string $subDomainName subDomainName (optional)
     * @param  int $costCenterId costCenterId (optional)
     * @param  string $costCenterName costCenterName (optional)
     * @param  int $dueInHours -1 for projects that are overdue (optional)
     * @param  int $createdInLastHours createdInLastHours (optional)
     * @param  string[] $sourceLangs sourceLangs (optional)
     * @param  int $ownerId ownerId (optional)
     * @param  string[] $jobStatuses Allowed for linguists only (optional)
     * @param  string $jobStatusGroup Allowed for linguists only (optional)
     * @param  int $buyerId buyerId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoAbstractProjectDto
     */
    public function listProjects($name = null, $clientId = null, $clientName = null, $businessUnitName = null, $statuses = null, $targetLangs = null, $domainName = null, $subDomainName = null, $costCenterId = null, $costCenterName = null, $dueInHours = null, $createdInLastHours = null, $sourceLangs = null, $ownerId = null, $jobStatuses = null, $jobStatusGroup = null, $buyerId = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listProjectsWithHttpInfo($name, $clientId, $clientName, $businessUnitName, $statuses, $targetLangs, $domainName, $subDomainName, $costCenterId, $costCenterName, $dueInHours, $createdInLastHours, $sourceLangs, $ownerId, $jobStatuses, $jobStatusGroup, $buyerId, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listProjectsWithHttpInfo
     *
     * List projects
     *
     * @param  string $name (optional)
     * @param  int $clientId (optional)
     * @param  string $clientName (optional)
     * @param  string $businessUnitName (optional)
     * @param  string[] $statuses (optional)
     * @param  string[] $targetLangs (optional)
     * @param  string $domainName (optional)
     * @param  string $subDomainName (optional)
     * @param  int $costCenterId (optional)
     * @param  string $costCenterName (optional)
     * @param  int $dueInHours -1 for projects that are overdue (optional)
     * @param  int $createdInLastHours (optional)
     * @param  string[] $sourceLangs (optional)
     * @param  int $ownerId (optional)
     * @param  string[] $jobStatuses Allowed for linguists only (optional)
     * @param  string $jobStatusGroup Allowed for linguists only (optional)
     * @param  int $buyerId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoAbstractProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listProjectsWithHttpInfo($name = null, $clientId = null, $clientName = null, $businessUnitName = null, $statuses = null, $targetLangs = null, $domainName = null, $subDomainName = null, $costCenterId = null, $costCenterName = null, $dueInHours = null, $createdInLastHours = null, $sourceLangs = null, $ownerId = null, $jobStatuses = null, $jobStatusGroup = null, $buyerId = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoAbstractProjectDto';
        $request = $this->listProjectsRequest($name, $clientId, $clientName, $businessUnitName, $statuses, $targetLangs, $domainName, $subDomainName, $costCenterId, $costCenterName, $dueInHours, $createdInLastHours, $sourceLangs, $ownerId, $jobStatuses, $jobStatusGroup, $buyerId, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoAbstractProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listProjectsAsync
     *
     * List projects
     *
     * @param  string $name (optional)
     * @param  int $clientId (optional)
     * @param  string $clientName (optional)
     * @param  string $businessUnitName (optional)
     * @param  string[] $statuses (optional)
     * @param  string[] $targetLangs (optional)
     * @param  string $domainName (optional)
     * @param  string $subDomainName (optional)
     * @param  int $costCenterId (optional)
     * @param  string $costCenterName (optional)
     * @param  int $dueInHours -1 for projects that are overdue (optional)
     * @param  int $createdInLastHours (optional)
     * @param  string[] $sourceLangs (optional)
     * @param  int $ownerId (optional)
     * @param  string[] $jobStatuses Allowed for linguists only (optional)
     * @param  string $jobStatusGroup Allowed for linguists only (optional)
     * @param  int $buyerId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProjectsAsync($name = null, $clientId = null, $clientName = null, $businessUnitName = null, $statuses = null, $targetLangs = null, $domainName = null, $subDomainName = null, $costCenterId = null, $costCenterName = null, $dueInHours = null, $createdInLastHours = null, $sourceLangs = null, $ownerId = null, $jobStatuses = null, $jobStatusGroup = null, $buyerId = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listProjectsAsyncWithHttpInfo($name, $clientId, $clientName, $businessUnitName, $statuses, $targetLangs, $domainName, $subDomainName, $costCenterId, $costCenterName, $dueInHours, $createdInLastHours, $sourceLangs, $ownerId, $jobStatuses, $jobStatusGroup, $buyerId, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listProjectsAsyncWithHttpInfo
     *
     * List projects
     *
     * @param  string $name (optional)
     * @param  int $clientId (optional)
     * @param  string $clientName (optional)
     * @param  string $businessUnitName (optional)
     * @param  string[] $statuses (optional)
     * @param  string[] $targetLangs (optional)
     * @param  string $domainName (optional)
     * @param  string $subDomainName (optional)
     * @param  int $costCenterId (optional)
     * @param  string $costCenterName (optional)
     * @param  int $dueInHours -1 for projects that are overdue (optional)
     * @param  int $createdInLastHours (optional)
     * @param  string[] $sourceLangs (optional)
     * @param  int $ownerId (optional)
     * @param  string[] $jobStatuses Allowed for linguists only (optional)
     * @param  string $jobStatusGroup Allowed for linguists only (optional)
     * @param  int $buyerId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProjectsAsyncWithHttpInfo($name = null, $clientId = null, $clientName = null, $businessUnitName = null, $statuses = null, $targetLangs = null, $domainName = null, $subDomainName = null, $costCenterId = null, $costCenterName = null, $dueInHours = null, $createdInLastHours = null, $sourceLangs = null, $ownerId = null, $jobStatuses = null, $jobStatusGroup = null, $buyerId = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoAbstractProjectDto';
        $request = $this->listProjectsRequest($name, $clientId, $clientName, $businessUnitName, $statuses, $targetLangs, $domainName, $subDomainName, $costCenterId, $costCenterName, $dueInHours, $createdInLastHours, $sourceLangs, $ownerId, $jobStatuses, $jobStatusGroup, $buyerId, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listProjects'
     *
     * @param  string $name (optional)
     * @param  int $clientId (optional)
     * @param  string $clientName (optional)
     * @param  string $businessUnitName (optional)
     * @param  string[] $statuses (optional)
     * @param  string[] $targetLangs (optional)
     * @param  string $domainName (optional)
     * @param  string $subDomainName (optional)
     * @param  int $costCenterId (optional)
     * @param  string $costCenterName (optional)
     * @param  int $dueInHours -1 for projects that are overdue (optional)
     * @param  int $createdInLastHours (optional)
     * @param  string[] $sourceLangs (optional)
     * @param  int $ownerId (optional)
     * @param  string[] $jobStatuses Allowed for linguists only (optional)
     * @param  string $jobStatusGroup Allowed for linguists only (optional)
     * @param  int $buyerId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listProjectsRequest($name = null, $clientId = null, $clientName = null, $businessUnitName = null, $statuses = null, $targetLangs = null, $domainName = null, $subDomainName = null, $costCenterId = null, $costCenterName = null, $dueInHours = null, $createdInLastHours = null, $sourceLangs = null, $ownerId = null, $jobStatuses = null, $jobStatusGroup = null, $buyerId = null, $pageNumber = '0', $pageSize = '50')
    {
        if ($dueInHours !== null && $dueInHours < -1) {
            throw new \InvalidArgumentException('invalid value for "$dueInHours" when calling ProjectApi.listProjects, must be bigger than or equal to -1.');
        }

        if ($createdInLastHours !== null && $createdInLastHours < 0) {
            throw new \InvalidArgumentException('invalid value for "$createdInLastHours" when calling ProjectApi.listProjects, must be bigger than or equal to 0.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling ProjectApi.listProjects, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.listProjects, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling ProjectApi.listProjects, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId);
        }
        // query params
        if ($clientName !== null) {
            $queryParams['clientName'] = ObjectSerializer::toQueryValue($clientName);
        }
        // query params
        if ($businessUnitName !== null) {
            $queryParams['businessUnitName'] = ObjectSerializer::toQueryValue($businessUnitName);
        }
        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'multi', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if (is_array($targetLangs)) {
            $targetLangs = ObjectSerializer::serializeCollection($targetLangs, 'multi', true);
        }
        if ($targetLangs !== null) {
            $queryParams['targetLangs'] = ObjectSerializer::toQueryValue($targetLangs);
        }
        // query params
        if ($domainName !== null) {
            $queryParams['domainName'] = ObjectSerializer::toQueryValue($domainName);
        }
        // query params
        if ($subDomainName !== null) {
            $queryParams['subDomainName'] = ObjectSerializer::toQueryValue($subDomainName);
        }
        // query params
        if ($costCenterId !== null) {
            $queryParams['costCenterId'] = ObjectSerializer::toQueryValue($costCenterId);
        }
        // query params
        if ($costCenterName !== null) {
            $queryParams['costCenterName'] = ObjectSerializer::toQueryValue($costCenterName);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($createdInLastHours !== null) {
            $queryParams['createdInLastHours'] = ObjectSerializer::toQueryValue($createdInLastHours);
        }
        // query params
        if (is_array($sourceLangs)) {
            $sourceLangs = ObjectSerializer::serializeCollection($sourceLangs, 'multi', true);
        }
        if ($sourceLangs !== null) {
            $queryParams['sourceLangs'] = ObjectSerializer::toQueryValue($sourceLangs);
        }
        // query params
        if ($ownerId !== null) {
            $queryParams['ownerId'] = ObjectSerializer::toQueryValue($ownerId);
        }
        // query params
        if (is_array($jobStatuses)) {
            $jobStatuses = ObjectSerializer::serializeCollection($jobStatuses, 'multi', true);
        }
        if ($jobStatuses !== null) {
            $queryParams['jobStatuses'] = ObjectSerializer::toQueryValue($jobStatuses);
        }
        // query params
        if ($jobStatusGroup !== null) {
            $queryParams['jobStatusGroup'] = ObjectSerializer::toQueryValue($jobStatusGroup);
        }
        // query params
        if ($buyerId !== null) {
            $queryParams['buyerId'] = ObjectSerializer::toQueryValue($buyerId);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProviders
     *
     * Get suggested providers
     *
     * @param  string $projectUid projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProviderListDto
     */
    public function listProviders($projectUid)
    {
        list($response) = $this->listProvidersWithHttpInfo($projectUid);
        return $response;
    }

    /**
     * Operation listProvidersWithHttpInfo
     *
     * Get suggested providers
     *
     * @param  string $projectUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProviderListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listProvidersWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProviderListDto';
        $request = $this->listProvidersRequest($projectUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProviderListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listProvidersAsync
     *
     * Get suggested providers
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProvidersAsync($projectUid)
    {
        return $this->listProvidersAsyncWithHttpInfo($projectUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listProvidersAsyncWithHttpInfo
     *
     * Get suggested providers
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProvidersAsyncWithHttpInfo($projectUid)
    {
        $returnType = '\Memsource\Model\ProviderListDto';
        $request = $this->listProvidersRequest($projectUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listProviders'
     *
     * @param  string $projectUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listProvidersRequest($projectUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling listProviders'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/providers/suggest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setFinancialSettings
     *
     * Edit financial settings
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SetFinancialSettingsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\FinancialSettingsDto
     */
    public function setFinancialSettings($projectUid, $body = null)
    {
        list($response) = $this->setFinancialSettingsWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation setFinancialSettingsWithHttpInfo
     *
     * Edit financial settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetFinancialSettingsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\FinancialSettingsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setFinancialSettingsWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\FinancialSettingsDto';
        $request = $this->setFinancialSettingsRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\FinancialSettingsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setFinancialSettingsAsync
     *
     * Edit financial settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetFinancialSettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setFinancialSettingsAsync($projectUid, $body = null)
    {
        return $this->setFinancialSettingsAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setFinancialSettingsAsyncWithHttpInfo
     *
     * Edit financial settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetFinancialSettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setFinancialSettingsAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\FinancialSettingsDto';
        $request = $this->setFinancialSettingsRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setFinancialSettings'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetFinancialSettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setFinancialSettingsRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setFinancialSettings'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/financialSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMtSettingsForProject
     *
     * Edit machine translate settings
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettingsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\MTSettingsPerLanguageListDto
     */
    public function setMtSettingsForProject($projectUid, $body = null)
    {
        list($response) = $this->setMtSettingsForProjectWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation setMtSettingsForProjectWithHttpInfo
     *
     * Edit machine translate settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettingsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\MTSettingsPerLanguageListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMtSettingsForProjectWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\MTSettingsPerLanguageListDto';
        $request = $this->setMtSettingsForProjectRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\MTSettingsPerLanguageListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setMtSettingsForProjectAsync
     *
     * Edit machine translate settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMtSettingsForProjectAsync($projectUid, $body = null)
    {
        return $this->setMtSettingsForProjectAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMtSettingsForProjectAsyncWithHttpInfo
     *
     * Edit machine translate settings
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMtSettingsForProjectAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\MTSettingsPerLanguageListDto';
        $request = $this->setMtSettingsForProjectRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMtSettingsForProject'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettingsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setMtSettingsForProjectRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setMtSettingsForProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/mtSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMtSettingsPerLanguageForProject
     *
     * Edit machine translate settings per language
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettPerLangListDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\MTSettingsPerLanguageListDto
     */
    public function setMtSettingsPerLanguageForProject($projectUid, $body = null)
    {
        list($response) = $this->setMtSettingsPerLanguageForProjectWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation setMtSettingsPerLanguageForProjectWithHttpInfo
     *
     * Edit machine translate settings per language
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettPerLangListDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\MTSettingsPerLanguageListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMtSettingsPerLanguageForProjectWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\MTSettingsPerLanguageListDto';
        $request = $this->setMtSettingsPerLanguageForProjectRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\MTSettingsPerLanguageListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setMtSettingsPerLanguageForProjectAsync
     *
     * Edit machine translate settings per language
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettPerLangListDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMtSettingsPerLanguageForProjectAsync($projectUid, $body = null)
    {
        return $this->setMtSettingsPerLanguageForProjectAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMtSettingsPerLanguageForProjectAsyncWithHttpInfo
     *
     * Edit machine translate settings per language
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettPerLangListDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMtSettingsPerLanguageForProjectAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\MTSettingsPerLanguageListDto';
        $request = $this->setMtSettingsPerLanguageForProjectRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMtSettingsPerLanguageForProject'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\EditProjectMTSettPerLangListDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setMtSettingsPerLanguageForProjectRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setMtSettingsPerLanguageForProject'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/mtSettingsPerLanguage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectStatus
     *
     * Edit project status
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SetProjectStatusDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setProjectStatus($projectUid, $body = null)
    {
        $this->setProjectStatusWithHttpInfo($projectUid, $body);
    }

    /**
     * Operation setProjectStatusWithHttpInfo
     *
     * Edit project status
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectStatusDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectStatusWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->setProjectStatusRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectStatusAsync
     *
     * Edit project status
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectStatusDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectStatusAsync($projectUid, $body = null)
    {
        return $this->setProjectStatusAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectStatusAsyncWithHttpInfo
     *
     * Edit project status
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectStatusDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectStatusAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->setProjectStatusRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectStatus'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectStatusDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectStatusRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setProjectStatus'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/setStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectTermBases
     *
     * Edit term bases
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SetTermBaseDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectTermBaseListDto
     */
    public function setProjectTermBases($projectUid, $body = null)
    {
        list($response) = $this->setProjectTermBasesWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation setProjectTermBasesWithHttpInfo
     *
     * Edit term bases
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetTermBaseDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectTermBaseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectTermBasesWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\ProjectTermBaseListDto';
        $request = $this->setProjectTermBasesRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectTermBaseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectTermBasesAsync
     *
     * Edit term bases
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetTermBaseDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectTermBasesAsync($projectUid, $body = null)
    {
        return $this->setProjectTermBasesAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectTermBasesAsyncWithHttpInfo
     *
     * Edit term bases
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetTermBaseDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectTermBasesAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\ProjectTermBaseListDto';
        $request = $this->setProjectTermBasesRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectTermBases'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetTermBaseDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectTermBasesRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setProjectTermBases'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/termBases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectTransMemories
     *
     * Edit translation memories
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SetProjectTransMemoriesDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProjectTransMemoryListDto
     */
    public function setProjectTransMemories($projectUid, $body = null)
    {
        list($response) = $this->setProjectTransMemoriesWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation setProjectTransMemoriesWithHttpInfo
     *
     * Edit translation memories
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectTransMemoriesDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProjectTransMemoryListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectTransMemoriesWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\ProjectTransMemoryListDto';
        $request = $this->setProjectTransMemoriesRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProjectTransMemoryListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectTransMemoriesAsync
     *
     * Edit translation memories
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectTransMemoriesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectTransMemoriesAsync($projectUid, $body = null)
    {
        return $this->setProjectTransMemoriesAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectTransMemoriesAsyncWithHttpInfo
     *
     * Edit translation memories
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectTransMemoriesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectTransMemoriesAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\ProjectTransMemoryListDto';
        $request = $this->setProjectTransMemoriesRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectTransMemories'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SetProjectTransMemoriesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectTransMemoriesRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setProjectTransMemories'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/transMemories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
