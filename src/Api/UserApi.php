<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Memsource\ApiException;
use Memsource\Configuration;
use Memsource\HeaderSelector;
use Memsource\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelDeletion
     *
     * Restore user
     *
     * @param  int $userId userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\UserDto
     */
    public function cancelDeletion($userId)
    {
        list($response) = $this->cancelDeletionWithHttpInfo($userId);
        return $response;
    }

    /**
     * Operation cancelDeletionWithHttpInfo
     *
     * Restore user
     *
     * @param  int $userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\UserDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelDeletionWithHttpInfo($userId)
    {
        $returnType = '\Memsource\Model\UserDto';
        $request = $this->cancelDeletionRequest($userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\UserDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelDeletionAsync
     *
     * Restore user
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDeletionAsync($userId)
    {
        return $this->cancelDeletionAsyncWithHttpInfo($userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelDeletionAsyncWithHttpInfo
     *
     * Restore user
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDeletionAsyncWithHttpInfo($userId)
    {
        $returnType = '\Memsource\Model\UserDto';
        $request = $this->cancelDeletionRequest($userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelDeletion'
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelDeletionRequest($userId)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling cancelDeletion'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}/undelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUser
     *
     * Create user
     *
     * @param  \Memsource\Model\UserCreateDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\UserDetailsDto
     */
    public function createUser($body = null)
    {
        list($response) = $this->createUserWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createUserWithHttpInfo
     *
     * Create user
     *
     * @param  \Memsource\Model\UserCreateDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\UserDetailsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\UserDetailsDto';
        $request = $this->createUserRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\UserDetailsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserAsync
     *
     * Create user
     *
     * @param  \Memsource\Model\UserCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsync($body = null)
    {
        return $this->createUserAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserAsyncWithHttpInfo
     *
     * Create user
     *
     * @param  \Memsource\Model\UserCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\UserDetailsDto';
        $request = $this->createUserRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUser'
     *
     * @param  \Memsource\Model\UserCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createUserRequest($body = null)
    {

        $resourcePath = '/api2/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUser
     *
     * Delete user
     *
     * @param  int $userId userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUser($userId)
    {
        $this->deleteUserWithHttpInfo($userId);
    }

    /**
     * Operation deleteUserWithHttpInfo
     *
     * Delete user
     *
     * @param  int $userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserWithHttpInfo($userId)
    {
        $returnType = '';
        $request = $this->deleteUserRequest($userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUserAsync
     *
     * Delete user
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserAsync($userId)
    {
        return $this->deleteUserAsyncWithHttpInfo($userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUserAsyncWithHttpInfo
     *
     * Delete user
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserAsyncWithHttpInfo($userId)
    {
        $returnType = '';
        $request = $this->deleteUserRequest($userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUser'
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUserRequest($userId)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling deleteUser'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListOfUsersFiltered
     *
     * List users
     *
     * @param  string $userName userName (optional)
     * @param  string $email email (optional)
     * @param  string[] $role role (optional)
     * @param  bool $includeDeleted includeDeleted (optional, default to false)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoUserDto
     */
    public function getListOfUsersFiltered($userName = null, $email = null, $role = null, $includeDeleted = 'false', $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->getListOfUsersFilteredWithHttpInfo($userName, $email, $role, $includeDeleted, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation getListOfUsersFilteredWithHttpInfo
     *
     * List users
     *
     * @param  string $userName (optional)
     * @param  string $email (optional)
     * @param  string[] $role (optional)
     * @param  bool $includeDeleted (optional, default to false)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoUserDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListOfUsersFilteredWithHttpInfo($userName = null, $email = null, $role = null, $includeDeleted = 'false', $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoUserDto';
        $request = $this->getListOfUsersFilteredRequest($userName, $email, $role, $includeDeleted, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoUserDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListOfUsersFilteredAsync
     *
     * List users
     *
     * @param  string $userName (optional)
     * @param  string $email (optional)
     * @param  string[] $role (optional)
     * @param  bool $includeDeleted (optional, default to false)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfUsersFilteredAsync($userName = null, $email = null, $role = null, $includeDeleted = 'false', $pageNumber = '0', $pageSize = '50')
    {
        return $this->getListOfUsersFilteredAsyncWithHttpInfo($userName, $email, $role, $includeDeleted, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListOfUsersFilteredAsyncWithHttpInfo
     *
     * List users
     *
     * @param  string $userName (optional)
     * @param  string $email (optional)
     * @param  string[] $role (optional)
     * @param  bool $includeDeleted (optional, default to false)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfUsersFilteredAsyncWithHttpInfo($userName = null, $email = null, $role = null, $includeDeleted = 'false', $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoUserDto';
        $request = $this->getListOfUsersFilteredRequest($userName, $email, $role, $includeDeleted, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListOfUsersFiltered'
     *
     * @param  string $userName (optional)
     * @param  string $email (optional)
     * @param  string[] $role (optional)
     * @param  bool $includeDeleted (optional, default to false)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListOfUsersFilteredRequest($userName = null, $email = null, $role = null, $includeDeleted = 'false', $pageNumber = '0', $pageSize = '50')
    {
        if ($userName !== null && strlen($userName) > 255) {
            throw new \InvalidArgumentException('invalid length for "$userName" when calling UserApi.getListOfUsersFiltered, must be smaller than or equal to 255.');
        }
        if ($userName !== null && strlen($userName) < 0) {
            throw new \InvalidArgumentException('invalid length for "$userName" when calling UserApi.getListOfUsersFiltered, must be bigger than or equal to 0.');
        }

        if ($email !== null && strlen($email) > 255) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling UserApi.getListOfUsersFiltered, must be smaller than or equal to 255.');
        }
        if ($email !== null && strlen($email) < 0) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling UserApi.getListOfUsersFiltered, must be bigger than or equal to 0.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling UserApi.getListOfUsersFiltered, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.getListOfUsersFiltered, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.getListOfUsersFiltered, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($userName !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($userName);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if (is_array($role)) {
            $role = ObjectSerializer::serializeCollection($role, 'multi', true);
        }
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($includeDeleted !== null) {
            $queryParams['includeDeleted'] = ObjectSerializer::toQueryValue($includeDeleted);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUser
     *
     * Get user
     *
     * @param  int $userId userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\UserDetailsDto
     */
    public function getUser($userId)
    {
        list($response) = $this->getUserWithHttpInfo($userId);
        return $response;
    }

    /**
     * Operation getUserWithHttpInfo
     *
     * Get user
     *
     * @param  int $userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\UserDetailsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserWithHttpInfo($userId)
    {
        $returnType = '\Memsource\Model\UserDetailsDto';
        $request = $this->getUserRequest($userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\UserDetailsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserAsync
     *
     * Get user
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAsync($userId)
    {
        return $this->getUserAsyncWithHttpInfo($userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserAsyncWithHttpInfo
     *
     * Get user
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAsyncWithHttpInfo($userId)
    {
        $returnType = '\Memsource\Model\UserDetailsDto';
        $request = $this->getUserRequest($userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUser'
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserRequest($userId)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling getUser'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAssignedProjects
     *
     * List assigned projects
     *
     * @param  int $userId userId (required)
     * @param  string[] $status status (optional)
     * @param  string[] $targetLang targetLang (optional)
     * @param  int $workflowStepId workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename filename (optional)
     * @param  string $projectName projectName (optional)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoProjectReference
     */
    public function listAssignedProjects($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listAssignedProjectsWithHttpInfo($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listAssignedProjectsWithHttpInfo
     *
     * List assigned projects
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoProjectReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssignedProjectsWithHttpInfo($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoProjectReference';
        $request = $this->listAssignedProjectsRequest($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoProjectReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAssignedProjectsAsync
     *
     * List assigned projects
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssignedProjectsAsync($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listAssignedProjectsAsyncWithHttpInfo($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAssignedProjectsAsyncWithHttpInfo
     *
     * List assigned projects
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssignedProjectsAsyncWithHttpInfo($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoProjectReference';
        $request = $this->listAssignedProjectsRequest($userId, $status, $targetLang, $workflowStepId, $dueInHours, $filename, $projectName, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAssignedProjects'
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  string $projectName (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAssignedProjectsRequest($userId, $status = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $projectName = null, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling listAssignedProjects'
            );
        }
        if ($dueInHours !== null && $dueInHours < -1) {
            throw new \InvalidArgumentException('invalid value for "$dueInHours" when calling UserApi.listAssignedProjects, must be bigger than or equal to -1.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling UserApi.listAssignedProjects, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listAssignedProjects, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listAssignedProjects, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/users/{userId}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($targetLang)) {
            $targetLang = ObjectSerializer::serializeCollection($targetLang, 'multi', true);
        }
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }
        // query params
        if ($workflowStepId !== null) {
            $queryParams['workflowStepId'] = ObjectSerializer::toQueryValue($workflowStepId);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($projectName !== null) {
            $queryParams['projectName'] = ObjectSerializer::toQueryValue($projectName);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listJobs
     *
     * List assigned jobs
     *
     * @param  int $userId userId (required)
     * @param  string[] $status status (optional)
     * @param  string $projectUid projectUid (optional)
     * @param  string[] $targetLang targetLang (optional)
     * @param  int $workflowStepId workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename filename (optional)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoAssignedJobDto
     */
    public function listJobs($userId, $status = null, $projectUid = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listJobsWithHttpInfo($userId, $status, $projectUid, $targetLang, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listJobsWithHttpInfo
     *
     * List assigned jobs
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoAssignedJobDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listJobsWithHttpInfo($userId, $status = null, $projectUid = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoAssignedJobDto';
        $request = $this->listJobsRequest($userId, $status, $projectUid, $targetLang, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoAssignedJobDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listJobsAsync
     *
     * List assigned jobs
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listJobsAsync($userId, $status = null, $projectUid = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listJobsAsyncWithHttpInfo($userId, $status, $projectUid, $targetLang, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listJobsAsyncWithHttpInfo
     *
     * List assigned jobs
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listJobsAsyncWithHttpInfo($userId, $status = null, $projectUid = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoAssignedJobDto';
        $request = $this->listJobsRequest($userId, $status, $projectUid, $targetLang, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listJobs'
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listJobsRequest($userId, $status = null, $projectUid = null, $targetLang = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling listJobs'
            );
        }
        if ($dueInHours !== null && $dueInHours < -1) {
            throw new \InvalidArgumentException('invalid value for "$dueInHours" when calling UserApi.listJobs, must be bigger than or equal to -1.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling UserApi.listJobs, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listJobs, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listJobs, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/users/{userId}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($projectUid !== null) {
            $queryParams['projectUid'] = ObjectSerializer::toQueryValue($projectUid);
        }
        // query params
        if (is_array($targetLang)) {
            $targetLang = ObjectSerializer::serializeCollection($targetLang, 'multi', true);
        }
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }
        // query params
        if ($workflowStepId !== null) {
            $queryParams['workflowStepId'] = ObjectSerializer::toQueryValue($workflowStepId);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTargetLangs
     *
     * List assigned target languages
     *
     * @param  int $userId userId (required)
     * @param  string[] $status status (optional)
     * @param  string $projectUid projectUid (optional)
     * @param  int $workflowStepId workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename filename (optional)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoString
     */
    public function listTargetLangs($userId, $status = null, $projectUid = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listTargetLangsWithHttpInfo($userId, $status, $projectUid, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listTargetLangsWithHttpInfo
     *
     * List assigned target languages
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoString, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTargetLangsWithHttpInfo($userId, $status = null, $projectUid = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoString';
        $request = $this->listTargetLangsRequest($userId, $status, $projectUid, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTargetLangsAsync
     *
     * List assigned target languages
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTargetLangsAsync($userId, $status = null, $projectUid = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listTargetLangsAsyncWithHttpInfo($userId, $status, $projectUid, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTargetLangsAsyncWithHttpInfo
     *
     * List assigned target languages
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTargetLangsAsyncWithHttpInfo($userId, $status = null, $projectUid = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoString';
        $request = $this->listTargetLangsRequest($userId, $status, $projectUid, $workflowStepId, $dueInHours, $filename, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTargetLangs'
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  int $workflowStepId (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTargetLangsRequest($userId, $status = null, $projectUid = null, $workflowStepId = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling listTargetLangs'
            );
        }
        if ($dueInHours !== null && $dueInHours < -1) {
            throw new \InvalidArgumentException('invalid value for "$dueInHours" when calling UserApi.listTargetLangs, must be bigger than or equal to -1.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling UserApi.listTargetLangs, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listTargetLangs, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listTargetLangs, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/users/{userId}/targetLangs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($projectUid !== null) {
            $queryParams['projectUid'] = ObjectSerializer::toQueryValue($projectUid);
        }
        // query params
        if ($workflowStepId !== null) {
            $queryParams['workflowStepId'] = ObjectSerializer::toQueryValue($workflowStepId);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listWorkflowSteps
     *
     * List assigned workflow steps
     *
     * @param  int $userId userId (required)
     * @param  string[] $status status (optional)
     * @param  string $projectUid projectUid (optional)
     * @param  string[] $targetLang targetLang (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename filename (optional)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoWorkflowStepReference
     */
    public function listWorkflowSteps($userId, $status = null, $projectUid = null, $targetLang = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listWorkflowStepsWithHttpInfo($userId, $status, $projectUid, $targetLang, $dueInHours, $filename, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listWorkflowStepsWithHttpInfo
     *
     * List assigned workflow steps
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoWorkflowStepReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWorkflowStepsWithHttpInfo($userId, $status = null, $projectUid = null, $targetLang = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoWorkflowStepReference';
        $request = $this->listWorkflowStepsRequest($userId, $status, $projectUid, $targetLang, $dueInHours, $filename, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoWorkflowStepReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listWorkflowStepsAsync
     *
     * List assigned workflow steps
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWorkflowStepsAsync($userId, $status = null, $projectUid = null, $targetLang = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listWorkflowStepsAsyncWithHttpInfo($userId, $status, $projectUid, $targetLang, $dueInHours, $filename, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listWorkflowStepsAsyncWithHttpInfo
     *
     * List assigned workflow steps
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWorkflowStepsAsyncWithHttpInfo($userId, $status = null, $projectUid = null, $targetLang = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoWorkflowStepReference';
        $request = $this->listWorkflowStepsRequest($userId, $status, $projectUid, $targetLang, $dueInHours, $filename, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listWorkflowSteps'
     *
     * @param  int $userId (required)
     * @param  string[] $status (optional)
     * @param  string $projectUid (optional)
     * @param  string[] $targetLang (optional)
     * @param  int $dueInHours -1 for jobs that are overdue (optional)
     * @param  string $filename (optional)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listWorkflowStepsRequest($userId, $status = null, $projectUid = null, $targetLang = null, $dueInHours = null, $filename = null, $pageNumber = '0', $pageSize = '50')
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling listWorkflowSteps'
            );
        }
        if ($dueInHours !== null && $dueInHours < -1) {
            throw new \InvalidArgumentException('invalid value for "$dueInHours" when calling UserApi.listWorkflowSteps, must be bigger than or equal to -1.');
        }

        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling UserApi.listWorkflowSteps, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listWorkflowSteps, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling UserApi.listWorkflowSteps, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/users/{userId}/workflowSteps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($projectUid !== null) {
            $queryParams['projectUid'] = ObjectSerializer::toQueryValue($projectUid);
        }
        // query params
        if (is_array($targetLang)) {
            $targetLang = ObjectSerializer::serializeCollection($targetLang, 'multi', true);
        }
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loginActivity
     *
     * Login statistics
     *
     * @param  int $userId userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\UserStatisticsListDto
     */
    public function loginActivity($userId)
    {
        list($response) = $this->loginActivityWithHttpInfo($userId);
        return $response;
    }

    /**
     * Operation loginActivityWithHttpInfo
     *
     * Login statistics
     *
     * @param  int $userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\UserStatisticsListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginActivityWithHttpInfo($userId)
    {
        $returnType = '\Memsource\Model\UserStatisticsListDto';
        $request = $this->loginActivityRequest($userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\UserStatisticsListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loginActivityAsync
     *
     * Login statistics
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginActivityAsync($userId)
    {
        return $this->loginActivityAsyncWithHttpInfo($userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loginActivityAsyncWithHttpInfo
     *
     * Login statistics
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginActivityAsyncWithHttpInfo($userId)
    {
        $returnType = '\Memsource\Model\UserStatisticsListDto';
        $request = $this->loginActivityRequest($userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loginActivity'
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function loginActivityRequest($userId)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling loginActivity'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}/loginStatistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendLoginInfo
     *
     * Send login information
     *
     * @param  int $userId userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendLoginInfo($userId)
    {
        $this->sendLoginInfoWithHttpInfo($userId);
    }

    /**
     * Operation sendLoginInfoWithHttpInfo
     *
     * Send login information
     *
     * @param  int $userId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendLoginInfoWithHttpInfo($userId)
    {
        $returnType = '';
        $request = $this->sendLoginInfoRequest($userId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendLoginInfoAsync
     *
     * Send login information
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendLoginInfoAsync($userId)
    {
        return $this->sendLoginInfoAsyncWithHttpInfo($userId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendLoginInfoAsyncWithHttpInfo
     *
     * Send login information
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendLoginInfoAsyncWithHttpInfo($userId)
    {
        $returnType = '';
        $request = $this->sendLoginInfoRequest($userId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendLoginInfo'
     *
     * @param  int $userId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendLoginInfoRequest($userId)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling sendLoginInfo'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}/emailLoginInformation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePassword
     *
     * Update password
     *
     * @param  int $userId userId (required)
     * @param  \Memsource\Model\UserPasswordEditDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePassword($userId, $body = null)
    {
        $this->updatePasswordWithHttpInfo($userId, $body);
    }

    /**
     * Operation updatePasswordWithHttpInfo
     *
     * Update password
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserPasswordEditDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePasswordWithHttpInfo($userId, $body = null)
    {
        $returnType = '';
        $request = $this->updatePasswordRequest($userId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updatePasswordAsync
     *
     * Update password
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserPasswordEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePasswordAsync($userId, $body = null)
    {
        return $this->updatePasswordAsyncWithHttpInfo($userId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePasswordAsyncWithHttpInfo
     *
     * Update password
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserPasswordEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePasswordAsyncWithHttpInfo($userId, $body = null)
    {
        $returnType = '';
        $request = $this->updatePasswordRequest($userId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePassword'
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserPasswordEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePasswordRequest($userId, $body = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling updatePassword'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}/updatePassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUser
     *
     * Edit user
     *
     * @param  int $userId userId (required)
     * @param  \Memsource\Model\UserEditDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\UserDetailsDto
     */
    public function updateUser($userId, $body = null)
    {
        list($response) = $this->updateUserWithHttpInfo($userId, $body);
        return $response;
    }

    /**
     * Operation updateUserWithHttpInfo
     *
     * Edit user
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserEditDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\UserDetailsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserWithHttpInfo($userId, $body = null)
    {
        $returnType = '\Memsource\Model\UserDetailsDto';
        $request = $this->updateUserRequest($userId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\UserDetailsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserAsync
     *
     * Edit user
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserAsync($userId, $body = null)
    {
        return $this->updateUserAsyncWithHttpInfo($userId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserAsyncWithHttpInfo
     *
     * Edit user
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserAsyncWithHttpInfo($userId, $body = null)
    {
        $returnType = '\Memsource\Model\UserDetailsDto';
        $request = $this->updateUserRequest($userId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUser'
     *
     * @param  int $userId (required)
     * @param  \Memsource\Model\UserEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateUserRequest($userId, $body = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling updateUser'
            );
        }

        $resourcePath = '/api2/v1/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
