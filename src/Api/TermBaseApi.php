<?php
/**
 * TermBaseApi
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Memsource\ApiException;
use Memsource\Configuration;
use Memsource\HeaderSelector;
use Memsource\ObjectSerializer;

/**
 * TermBaseApi Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TermBaseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation browseTerms
     *
     * Browse term base
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  \Memsource\Model\BrowseRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\BrowseResponseListDto
     */
    public function browseTerms($termBaseId, $body = null)
    {
        list($response) = $this->browseTermsWithHttpInfo($termBaseId, $body);
        return $response;
    }

    /**
     * Operation browseTermsWithHttpInfo
     *
     * Browse term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\BrowseRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\BrowseResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseTermsWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\BrowseResponseListDto';
        $request = $this->browseTermsRequest($termBaseId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\BrowseResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseTermsAsync
     *
     * Browse term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\BrowseRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseTermsAsync($termBaseId, $body = null)
    {
        return $this->browseTermsAsyncWithHttpInfo($termBaseId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseTermsAsyncWithHttpInfo
     *
     * Browse term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\BrowseRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseTermsAsyncWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\BrowseResponseListDto';
        $request = $this->browseTermsRequest($termBaseId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseTerms'
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\BrowseRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browseTermsRequest($termBaseId, $body = null)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling browseTerms'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/browse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearTermBase
     *
     * Clear term base
     *
     * @param  int $termBaseId termBaseId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearTermBase($termBaseId)
    {
        $this->clearTermBaseWithHttpInfo($termBaseId);
    }

    /**
     * Operation clearTermBaseWithHttpInfo
     *
     * Clear term base
     *
     * @param  int $termBaseId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearTermBaseWithHttpInfo($termBaseId)
    {
        $returnType = '';
        $request = $this->clearTermBaseRequest($termBaseId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation clearTermBaseAsync
     *
     * Clear term base
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearTermBaseAsync($termBaseId)
    {
        return $this->clearTermBaseAsyncWithHttpInfo($termBaseId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearTermBaseAsyncWithHttpInfo
     *
     * Clear term base
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearTermBaseAsyncWithHttpInfo($termBaseId)
    {
        $returnType = '';
        $request = $this->clearTermBaseRequest($termBaseId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearTermBase'
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearTermBaseRequest($termBaseId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling clearTermBase'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTerm
     *
     * Create term
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  \Memsource\Model\TermCreateDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermDto
     */
    public function createTerm($termBaseId, $body = null)
    {
        list($response) = $this->createTermWithHttpInfo($termBaseId, $body);
        return $response;
    }

    /**
     * Operation createTermWithHttpInfo
     *
     * Create term
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermCreateDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\TermDto';
        $request = $this->createTermRequest($termBaseId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTermAsync
     *
     * Create term
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermAsync($termBaseId, $body = null)
    {
        return $this->createTermAsyncWithHttpInfo($termBaseId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTermAsyncWithHttpInfo
     *
     * Create term
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermAsyncWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\TermDto';
        $request = $this->createTermRequest($termBaseId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTerm'
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermCreateDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTermRequest($termBaseId, $body = null)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling createTerm'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTermBase
     *
     * Create term base
     *
     * @param  \Memsource\Model\TermBaseEditDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermBaseDto
     */
    public function createTermBase($body = null)
    {
        list($response) = $this->createTermBaseWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTermBaseWithHttpInfo
     *
     * Create term base
     *
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermBaseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermBaseWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\TermBaseDto';
        $request = $this->createTermBaseRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermBaseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTermBaseAsync
     *
     * Create term base
     *
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermBaseAsync($body = null)
    {
        return $this->createTermBaseAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTermBaseAsyncWithHttpInfo
     *
     * Create term base
     *
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermBaseAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Memsource\Model\TermBaseDto';
        $request = $this->createTermBaseRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTermBase'
     *
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTermBaseRequest($body = null)
    {

        $resourcePath = '/api2/v1/termBases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTermByJob
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid jobUid (required)
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermPairDto
     */
    public function createTermByJob($jobUid, $projectUid, $body = null)
    {
        list($response) = $this->createTermByJobWithHttpInfo($jobUid, $projectUid, $body);
        return $response;
    }

    /**
     * Operation createTermByJobWithHttpInfo
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermPairDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermByJobWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\TermPairDto';
        $request = $this->createTermByJobRequest($jobUid, $projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermPairDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTermByJobAsync
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermByJobAsync($jobUid, $projectUid, $body = null)
    {
        return $this->createTermByJobAsyncWithHttpInfo($jobUid, $projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTermByJobAsyncWithHttpInfo
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermByJobAsyncWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\TermPairDto';
        $request = $this->createTermByJobRequest($jobUid, $projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTermByJob'
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTermByJobRequest($jobUid, $projectUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling createTermByJob'
            );
        }
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling createTermByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/createByJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }
        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConcept
     *
     * Delete concept
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  string $conceptId conceptId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConcept($termBaseId, $conceptId)
    {
        $this->deleteConceptWithHttpInfo($termBaseId, $conceptId);
    }

    /**
     * Operation deleteConceptWithHttpInfo
     *
     * Delete concept
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConceptWithHttpInfo($termBaseId, $conceptId)
    {
        $returnType = '';
        $request = $this->deleteConceptRequest($termBaseId, $conceptId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConceptAsync
     *
     * Delete concept
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConceptAsync($termBaseId, $conceptId)
    {
        return $this->deleteConceptAsyncWithHttpInfo($termBaseId, $conceptId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConceptAsyncWithHttpInfo
     *
     * Delete concept
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConceptAsyncWithHttpInfo($termBaseId, $conceptId)
    {
        $returnType = '';
        $request = $this->deleteConceptRequest($termBaseId, $conceptId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConcept'
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConceptRequest($termBaseId, $conceptId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling deleteConcept'
            );
        }
        // verify the required parameter 'conceptId' is set
        if ($conceptId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conceptId when calling deleteConcept'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/concepts/{conceptId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }
        // path params
        if ($conceptId !== null) {
            $resourcePath = str_replace(
                '{' . 'conceptId' . '}',
                ObjectSerializer::toPathValue($conceptId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTerm
     *
     * Delete term
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  string $termId termId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTerm($termBaseId, $termId)
    {
        $this->deleteTermWithHttpInfo($termBaseId, $termId);
    }

    /**
     * Operation deleteTermWithHttpInfo
     *
     * Delete term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermWithHttpInfo($termBaseId, $termId)
    {
        $returnType = '';
        $request = $this->deleteTermRequest($termBaseId, $termId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTermAsync
     *
     * Delete term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermAsync($termBaseId, $termId)
    {
        return $this->deleteTermAsyncWithHttpInfo($termBaseId, $termId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTermAsyncWithHttpInfo
     *
     * Delete term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermAsyncWithHttpInfo($termBaseId, $termId)
    {
        $returnType = '';
        $request = $this->deleteTermRequest($termBaseId, $termId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTerm'
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTermRequest($termBaseId, $termId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling deleteTerm'
            );
        }
        // verify the required parameter 'termId' is set
        if ($termId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling deleteTerm'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/terms/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTermBase
     *
     * Delete term base
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  bool $purge purge&#x3D;false - the Termbase is can later be restored,                      \&quot;purge&#x3D;true - the Termbase is completely deleted and cannot be restored (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTermBase($termBaseId, $purge = 'false')
    {
        $this->deleteTermBaseWithHttpInfo($termBaseId, $purge);
    }

    /**
     * Operation deleteTermBaseWithHttpInfo
     *
     * Delete term base
     *
     * @param  int $termBaseId (required)
     * @param  bool $purge purge&#x3D;false - the Termbase is can later be restored,                      \&quot;purge&#x3D;true - the Termbase is completely deleted and cannot be restored (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTermBaseWithHttpInfo($termBaseId, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deleteTermBaseRequest($termBaseId, $purge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTermBaseAsync
     *
     * Delete term base
     *
     * @param  int $termBaseId (required)
     * @param  bool $purge purge&#x3D;false - the Termbase is can later be restored,                      \&quot;purge&#x3D;true - the Termbase is completely deleted and cannot be restored (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermBaseAsync($termBaseId, $purge = 'false')
    {
        return $this->deleteTermBaseAsyncWithHttpInfo($termBaseId, $purge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTermBaseAsyncWithHttpInfo
     *
     * Delete term base
     *
     * @param  int $termBaseId (required)
     * @param  bool $purge purge&#x3D;false - the Termbase is can later be restored,                      \&quot;purge&#x3D;true - the Termbase is completely deleted and cannot be restored (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTermBaseAsyncWithHttpInfo($termBaseId, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deleteTermBaseRequest($termBaseId, $purge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTermBase'
     *
     * @param  int $termBaseId (required)
     * @param  bool $purge purge&#x3D;false - the Termbase is can later be restored,                      \&quot;purge&#x3D;true - the Termbase is completely deleted and cannot be restored (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTermBaseRequest($termBaseId, $purge = 'false')
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling deleteTermBase'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purge !== null) {
            $queryParams['purge'] = ObjectSerializer::toQueryValue($purge);
        }

        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportTermBase
     *
     * Export term base
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  string $format format (optional, default to Tbx)
     * @param  string $charset charset (optional, default to UTF-8)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function exportTermBase($termBaseId, $format = 'Tbx', $charset = 'UTF-8')
    {
        $this->exportTermBaseWithHttpInfo($termBaseId, $format, $charset);
    }

    /**
     * Operation exportTermBaseWithHttpInfo
     *
     * Export term base
     *
     * @param  int $termBaseId (required)
     * @param  string $format (optional, default to Tbx)
     * @param  string $charset (optional, default to UTF-8)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportTermBaseWithHttpInfo($termBaseId, $format = 'Tbx', $charset = 'UTF-8')
    {
        $returnType = '';
        $request = $this->exportTermBaseRequest($termBaseId, $format, $charset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation exportTermBaseAsync
     *
     * Export term base
     *
     * @param  int $termBaseId (required)
     * @param  string $format (optional, default to Tbx)
     * @param  string $charset (optional, default to UTF-8)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTermBaseAsync($termBaseId, $format = 'Tbx', $charset = 'UTF-8')
    {
        return $this->exportTermBaseAsyncWithHttpInfo($termBaseId, $format, $charset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportTermBaseAsyncWithHttpInfo
     *
     * Export term base
     *
     * @param  int $termBaseId (required)
     * @param  string $format (optional, default to Tbx)
     * @param  string $charset (optional, default to UTF-8)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTermBaseAsyncWithHttpInfo($termBaseId, $format = 'Tbx', $charset = 'UTF-8')
    {
        $returnType = '';
        $request = $this->exportTermBaseRequest($termBaseId, $format, $charset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportTermBase'
     *
     * @param  int $termBaseId (required)
     * @param  string $format (optional, default to Tbx)
     * @param  string $charset (optional, default to UTF-8)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportTermBaseRequest($termBaseId, $format = 'Tbx', $charset = 'UTF-8')
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling exportTermBase'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($charset !== null) {
            $queryParams['charset'] = ObjectSerializer::toQueryValue($charset);
        }

        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTerm
     *
     * Get term
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  string $termId termId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermDto
     */
    public function getTerm($termBaseId, $termId)
    {
        list($response) = $this->getTermWithHttpInfo($termBaseId, $termId);
        return $response;
    }

    /**
     * Operation getTermWithHttpInfo
     *
     * Get term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermWithHttpInfo($termBaseId, $termId)
    {
        $returnType = '\Memsource\Model\TermDto';
        $request = $this->getTermRequest($termBaseId, $termId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTermAsync
     *
     * Get term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermAsync($termBaseId, $termId)
    {
        return $this->getTermAsyncWithHttpInfo($termBaseId, $termId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTermAsyncWithHttpInfo
     *
     * Get term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermAsyncWithHttpInfo($termBaseId, $termId)
    {
        $returnType = '\Memsource\Model\TermDto';
        $request = $this->getTermRequest($termBaseId, $termId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTerm'
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTermRequest($termBaseId, $termId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling getTerm'
            );
        }
        // verify the required parameter 'termId' is set
        if ($termId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling getTerm'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/terms/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTermBase
     *
     * Get term base
     *
     * @param  int $termBaseId termBaseId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermBaseDto
     */
    public function getTermBase($termBaseId)
    {
        list($response) = $this->getTermBaseWithHttpInfo($termBaseId);
        return $response;
    }

    /**
     * Operation getTermBaseWithHttpInfo
     *
     * Get term base
     *
     * @param  int $termBaseId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermBaseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermBaseWithHttpInfo($termBaseId)
    {
        $returnType = '\Memsource\Model\TermBaseDto';
        $request = $this->getTermBaseRequest($termBaseId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermBaseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTermBaseAsync
     *
     * Get term base
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermBaseAsync($termBaseId)
    {
        return $this->getTermBaseAsyncWithHttpInfo($termBaseId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTermBaseAsyncWithHttpInfo
     *
     * Get term base
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermBaseAsyncWithHttpInfo($termBaseId)
    {
        $returnType = '\Memsource\Model\TermBaseDto';
        $request = $this->getTermBaseRequest($termBaseId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTermBase'
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTermBaseRequest($termBaseId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling getTermBase'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTermBaseMetadata
     *
     * Get term base metadata
     *
     * @param  int $termBaseId termBaseId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\MetadataDto
     */
    public function getTermBaseMetadata($termBaseId)
    {
        list($response) = $this->getTermBaseMetadataWithHttpInfo($termBaseId);
        return $response;
    }

    /**
     * Operation getTermBaseMetadataWithHttpInfo
     *
     * Get term base metadata
     *
     * @param  int $termBaseId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\MetadataDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTermBaseMetadataWithHttpInfo($termBaseId)
    {
        $returnType = '\Memsource\Model\MetadataDto';
        $request = $this->getTermBaseMetadataRequest($termBaseId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\MetadataDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTermBaseMetadataAsync
     *
     * Get term base metadata
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermBaseMetadataAsync($termBaseId)
    {
        return $this->getTermBaseMetadataAsyncWithHttpInfo($termBaseId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTermBaseMetadataAsyncWithHttpInfo
     *
     * Get term base metadata
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTermBaseMetadataAsyncWithHttpInfo($termBaseId)
    {
        $returnType = '\Memsource\Model\MetadataDto';
        $request = $this->getTermBaseMetadataRequest($termBaseId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTermBaseMetadata'
     *
     * @param  int $termBaseId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTermBaseMetadataRequest($termBaseId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling getTermBaseMetadata'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTranslationResources
     *
     * Get translation resources
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TranslationResourcesDto
     */
    public function getTranslationResources($projectUid, $jobUid)
    {
        list($response) = $this->getTranslationResourcesWithHttpInfo($projectUid, $jobUid);
        return $response;
    }

    /**
     * Operation getTranslationResourcesWithHttpInfo
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TranslationResourcesDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTranslationResourcesWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\TranslationResourcesDto';
        $request = $this->getTranslationResourcesRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TranslationResourcesDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTranslationResourcesAsync
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTranslationResourcesAsync($projectUid, $jobUid)
    {
        return $this->getTranslationResourcesAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTranslationResourcesAsyncWithHttpInfo
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTranslationResourcesAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\TranslationResourcesDto';
        $request = $this->getTranslationResourcesRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTranslationResources'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTranslationResourcesRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getTranslationResources'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling getTranslationResources'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/translationResources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importTermBase
     *
     * Upload term base
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  \Memsource\Model\InputStream $body body (optional)
     * @param  string $contentDisposition contentDisposition (optional)
     * @param  string $charset charset (optional, default to UTF-8)
     * @param  bool $strictLangMatching strictLangMatching (optional, default to false)
     * @param  bool $updateTerms updateTerms (optional, default to true)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ImportResponse
     */
    public function importTermBase($termBaseId, $body = null, $contentDisposition = null, $charset = 'UTF-8', $strictLangMatching = 'false', $updateTerms = 'true')
    {
        list($response) = $this->importTermBaseWithHttpInfo($termBaseId, $body, $contentDisposition, $charset, $strictLangMatching, $updateTerms);
        return $response;
    }

    /**
     * Operation importTermBaseWithHttpInfo
     *
     * Upload term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  string $charset (optional, default to UTF-8)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $updateTerms (optional, default to true)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importTermBaseWithHttpInfo($termBaseId, $body = null, $contentDisposition = null, $charset = 'UTF-8', $strictLangMatching = 'false', $updateTerms = 'true')
    {
        $returnType = '\Memsource\Model\ImportResponse';
        $request = $this->importTermBaseRequest($termBaseId, $body, $contentDisposition, $charset, $strictLangMatching, $updateTerms);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ImportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importTermBaseAsync
     *
     * Upload term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  string $charset (optional, default to UTF-8)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $updateTerms (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importTermBaseAsync($termBaseId, $body = null, $contentDisposition = null, $charset = 'UTF-8', $strictLangMatching = 'false', $updateTerms = 'true')
    {
        return $this->importTermBaseAsyncWithHttpInfo($termBaseId, $body, $contentDisposition, $charset, $strictLangMatching, $updateTerms)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importTermBaseAsyncWithHttpInfo
     *
     * Upload term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  string $charset (optional, default to UTF-8)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $updateTerms (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importTermBaseAsyncWithHttpInfo($termBaseId, $body = null, $contentDisposition = null, $charset = 'UTF-8', $strictLangMatching = 'false', $updateTerms = 'true')
    {
        $returnType = '\Memsource\Model\ImportResponse';
        $request = $this->importTermBaseRequest($termBaseId, $body, $contentDisposition, $charset, $strictLangMatching, $updateTerms);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importTermBase'
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $contentDisposition (optional)
     * @param  string $charset (optional, default to UTF-8)
     * @param  bool $strictLangMatching (optional, default to false)
     * @param  bool $updateTerms (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importTermBaseRequest($termBaseId, $body = null, $contentDisposition = null, $charset = 'UTF-8', $strictLangMatching = 'false', $updateTerms = 'true')
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling importTermBase'
            );
        }
        if ($contentDisposition !== null && !preg_match("/filename\\*=UTF-8''(.+)/", $contentDisposition)) {
            throw new \InvalidArgumentException("invalid value for \"contentDisposition\" when calling TermBaseApi.importTermBase, must conform to the pattern /filename\\*=UTF-8''(.+)/.");
        }


        $resourcePath = '/api2/v1/termBases/{termBaseId}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($charset !== null) {
            $queryParams['charset'] = ObjectSerializer::toQueryValue($charset);
        }
        // query params
        if ($strictLangMatching !== null) {
            $queryParams['strictLangMatching'] = ObjectSerializer::toQueryValue($strictLangMatching);
        }
        // query params
        if ($updateTerms !== null) {
            $queryParams['updateTerms'] = ObjectSerializer::toQueryValue($updateTerms);
        }
        // header params
        if ($contentDisposition !== null) {
            $headerParams['Content-Disposition'] = ObjectSerializer::toHeaderValue($contentDisposition);
        }

        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTermBases
     *
     * List term bases
     *
     * @param  string $name name (optional)
     * @param  string[] $lang Language of the term base (optional)
     * @param  string $clientId clientId (optional)
     * @param  string $domainId domainId (optional)
     * @param  string $subDomainId subDomainId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoTermBaseDto
     */
    public function listTermBases($name = null, $lang = null, $clientId = null, $domainId = null, $subDomainId = null, $pageNumber = '0', $pageSize = '50')
    {
        list($response) = $this->listTermBasesWithHttpInfo($name, $lang, $clientId, $domainId, $subDomainId, $pageNumber, $pageSize);
        return $response;
    }

    /**
     * Operation listTermBasesWithHttpInfo
     *
     * List term bases
     *
     * @param  string $name (optional)
     * @param  string[] $lang Language of the term base (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoTermBaseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTermBasesWithHttpInfo($name = null, $lang = null, $clientId = null, $domainId = null, $subDomainId = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoTermBaseDto';
        $request = $this->listTermBasesRequest($name, $lang, $clientId, $domainId, $subDomainId, $pageNumber, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoTermBaseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTermBasesAsync
     *
     * List term bases
     *
     * @param  string $name (optional)
     * @param  string[] $lang Language of the term base (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermBasesAsync($name = null, $lang = null, $clientId = null, $domainId = null, $subDomainId = null, $pageNumber = '0', $pageSize = '50')
    {
        return $this->listTermBasesAsyncWithHttpInfo($name, $lang, $clientId, $domainId, $subDomainId, $pageNumber, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTermBasesAsyncWithHttpInfo
     *
     * List term bases
     *
     * @param  string $name (optional)
     * @param  string[] $lang Language of the term base (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermBasesAsyncWithHttpInfo($name = null, $lang = null, $clientId = null, $domainId = null, $subDomainId = null, $pageNumber = '0', $pageSize = '50')
    {
        $returnType = '\Memsource\Model\PageDtoTermBaseDto';
        $request = $this->listTermBasesRequest($name, $lang, $clientId, $domainId, $subDomainId, $pageNumber, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTermBases'
     *
     * @param  string $name (optional)
     * @param  string[] $lang Language of the term base (optional)
     * @param  string $clientId (optional)
     * @param  string $domainId (optional)
     * @param  string $subDomainId (optional)
     * @param  int $pageNumber Page number, starting with 0, default 0 (optional, default to 0)
     * @param  int $pageSize Page size, accepts values between 1 and 50, default 50 (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTermBasesRequest($name = null, $lang = null, $clientId = null, $domainId = null, $subDomainId = null, $pageNumber = '0', $pageSize = '50')
    {
        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling TermBaseApi.listTermBases, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling TermBaseApi.listTermBases, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/termBases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if (is_array($lang)) {
            $lang = ObjectSerializer::serializeCollection($lang, 'multi', true);
        }
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }
        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId);
        }
        // query params
        if ($domainId !== null) {
            $queryParams['domainId'] = ObjectSerializer::toQueryValue($domainId);
        }
        // query params
        if ($subDomainId !== null) {
            $queryParams['subDomainId'] = ObjectSerializer::toQueryValue($subDomainId);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTermsOfConcept
     *
     * Get terms of concept
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  string $conceptId conceptId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ConceptDto
     */
    public function listTermsOfConcept($termBaseId, $conceptId)
    {
        list($response) = $this->listTermsOfConceptWithHttpInfo($termBaseId, $conceptId);
        return $response;
    }

    /**
     * Operation listTermsOfConceptWithHttpInfo
     *
     * Get terms of concept
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ConceptDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTermsOfConceptWithHttpInfo($termBaseId, $conceptId)
    {
        $returnType = '\Memsource\Model\ConceptDto';
        $request = $this->listTermsOfConceptRequest($termBaseId, $conceptId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ConceptDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTermsOfConceptAsync
     *
     * Get terms of concept
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermsOfConceptAsync($termBaseId, $conceptId)
    {
        return $this->listTermsOfConceptAsyncWithHttpInfo($termBaseId, $conceptId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTermsOfConceptAsyncWithHttpInfo
     *
     * Get terms of concept
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermsOfConceptAsyncWithHttpInfo($termBaseId, $conceptId)
    {
        $returnType = '\Memsource\Model\ConceptDto';
        $request = $this->listTermsOfConceptRequest($termBaseId, $conceptId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTermsOfConcept'
     *
     * @param  int $termBaseId (required)
     * @param  string $conceptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTermsOfConceptRequest($termBaseId, $conceptId)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling listTermsOfConcept'
            );
        }
        // verify the required parameter 'conceptId' is set
        if ($conceptId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conceptId when calling listTermsOfConcept'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/concepts/{conceptId}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }
        // path params
        if ($conceptId !== null) {
            $resourcePath = str_replace(
                '{' . 'conceptId' . '}',
                ObjectSerializer::toPathValue($conceptId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTerms
     *
     * Search term base
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  \Memsource\Model\TermBaseSearchRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function searchTerms($termBaseId, $body = null)
    {
        list($response) = $this->searchTermsWithHttpInfo($termBaseId, $body);
        return $response;
    }

    /**
     * Operation searchTermsWithHttpInfo
     *
     * Search term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseSearchRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchTermsRequest($termBaseId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsAsync
     *
     * Search term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseSearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsAsync($termBaseId, $body = null)
    {
        return $this->searchTermsAsyncWithHttpInfo($termBaseId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsAsyncWithHttpInfo
     *
     * Search term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseSearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsAsyncWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchTermsRequest($termBaseId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTerms'
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseSearchRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsRequest($termBaseId, $body = null)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling searchTerms'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTermsByJob
     *
     * Search job's term bases
     *
     * @param  string $jobUid jobUid (required)
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function searchTermsByJob($jobUid, $projectUid, $body = null)
    {
        list($response) = $this->searchTermsByJobWithHttpInfo($jobUid, $projectUid, $body);
        return $response;
    }

    /**
     * Operation searchTermsByJobWithHttpInfo
     *
     * Search job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsByJobWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchTermsByJobRequest($jobUid, $projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsByJobAsync
     *
     * Search job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByJobAsync($jobUid, $projectUid, $body = null)
    {
        return $this->searchTermsByJobAsyncWithHttpInfo($jobUid, $projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsByJobAsyncWithHttpInfo
     *
     * Search job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByJobAsyncWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchTermsByJobRequest($jobUid, $projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTermsByJob'
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsByJobRequest($jobUid, $projectUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling searchTermsByJob'
            );
        }
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling searchTermsByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/searchByJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }
        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTermsInTextByJob
     *
     * Search terms in text
     *
     * @param  string $jobUid jobUid (required)
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchInTextResponseListDto
     */
    public function searchTermsInTextByJob($jobUid, $projectUid, $body = null)
    {
        list($response) = $this->searchTermsInTextByJobWithHttpInfo($jobUid, $projectUid, $body);
        return $response;
    }

    /**
     * Operation searchTermsInTextByJobWithHttpInfo
     *
     * Search terms in text
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchInTextResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsInTextByJobWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchInTextResponseListDto';
        $request = $this->searchTermsInTextByJobRequest($jobUid, $projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchInTextResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsInTextByJobAsync
     *
     * Search terms in text
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsInTextByJobAsync($jobUid, $projectUid, $body = null)
    {
        return $this->searchTermsInTextByJobAsyncWithHttpInfo($jobUid, $projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsInTextByJobAsyncWithHttpInfo
     *
     * Search terms in text
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsInTextByJobAsyncWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchInTextResponseListDto';
        $request = $this->searchTermsInTextByJobRequest($jobUid, $projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTermsInTextByJob'
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsInTextByJobRequest($jobUid, $projectUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling searchTermsInTextByJob'
            );
        }
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling searchTermsInTextByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/searchInTextByJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }
        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTerm
     *
     * Edit term
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  string $termId termId (required)
     * @param  \Memsource\Model\TermEditDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermDto
     */
    public function updateTerm($termBaseId, $termId, $body = null)
    {
        list($response) = $this->updateTermWithHttpInfo($termBaseId, $termId, $body);
        return $response;
    }

    /**
     * Operation updateTermWithHttpInfo
     *
     * Edit term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     * @param  \Memsource\Model\TermEditDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermWithHttpInfo($termBaseId, $termId, $body = null)
    {
        $returnType = '\Memsource\Model\TermDto';
        $request = $this->updateTermRequest($termBaseId, $termId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTermAsync
     *
     * Edit term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     * @param  \Memsource\Model\TermEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermAsync($termBaseId, $termId, $body = null)
    {
        return $this->updateTermAsyncWithHttpInfo($termBaseId, $termId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTermAsyncWithHttpInfo
     *
     * Edit term
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     * @param  \Memsource\Model\TermEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermAsyncWithHttpInfo($termBaseId, $termId, $body = null)
    {
        $returnType = '\Memsource\Model\TermDto';
        $request = $this->updateTermRequest($termBaseId, $termId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTerm'
     *
     * @param  int $termBaseId (required)
     * @param  string $termId (required)
     * @param  \Memsource\Model\TermEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTermRequest($termBaseId, $termId, $body = null)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling updateTerm'
            );
        }
        // verify the required parameter 'termId' is set
        if ($termId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling updateTerm'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}/terms/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTermBase
     *
     * Edit term base
     *
     * @param  int $termBaseId termBaseId (required)
     * @param  \Memsource\Model\TermBaseEditDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermBaseDto
     */
    public function updateTermBase($termBaseId, $body = null)
    {
        list($response) = $this->updateTermBaseWithHttpInfo($termBaseId, $body);
        return $response;
    }

    /**
     * Operation updateTermBaseWithHttpInfo
     *
     * Edit term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermBaseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTermBaseWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\TermBaseDto';
        $request = $this->updateTermBaseRequest($termBaseId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermBaseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTermBaseAsync
     *
     * Edit term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermBaseAsync($termBaseId, $body = null)
    {
        return $this->updateTermBaseAsyncWithHttpInfo($termBaseId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTermBaseAsyncWithHttpInfo
     *
     * Edit term base
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTermBaseAsyncWithHttpInfo($termBaseId, $body = null)
    {
        $returnType = '\Memsource\Model\TermBaseDto';
        $request = $this->updateTermBaseRequest($termBaseId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTermBase'
     *
     * @param  int $termBaseId (required)
     * @param  \Memsource\Model\TermBaseEditDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTermBaseRequest($termBaseId, $body = null)
    {
        // verify the required parameter 'termBaseId' is set
        if ($termBaseId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termBaseId when calling updateTermBase'
            );
        }

        $resourcePath = '/api2/v1/termBases/{termBaseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($termBaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'termBaseId' . '}',
                ObjectSerializer::toPathValue($termBaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
