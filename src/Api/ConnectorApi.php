<?php
/**
 * ConnectorApi
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Memsource\ApiException;
use Memsource\Configuration;
use Memsource\HeaderSelector;
use Memsource\ObjectSerializer;

/**
 * ConnectorApi Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getConnector
     *
     * Get a connector
     *
     * @param  string $connectorId connectorId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ConnectorDto
     */
    public function getConnector($connectorId)
    {
        list($response) = $this->getConnectorWithHttpInfo($connectorId);
        return $response;
    }

    /**
     * Operation getConnectorWithHttpInfo
     *
     * Get a connector
     *
     * @param  string $connectorId (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ConnectorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectorWithHttpInfo($connectorId)
    {
        $returnType = '\Memsource\Model\ConnectorDto';
        $request = $this->getConnectorRequest($connectorId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ConnectorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConnectorAsync
     *
     * Get a connector
     *
     * @param  string $connectorId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectorAsync($connectorId)
    {
        return $this->getConnectorAsyncWithHttpInfo($connectorId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectorAsyncWithHttpInfo
     *
     * Get a connector
     *
     * @param  string $connectorId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectorAsyncWithHttpInfo($connectorId)
    {
        $returnType = '\Memsource\Model\ConnectorDto';
        $request = $this->getConnectorRequest($connectorId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnector'
     *
     * @param  string $connectorId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConnectorRequest($connectorId)
    {
        // verify the required parameter 'connectorId' is set
        if ($connectorId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectorId when calling getConnector'
            );
        }

        $resourcePath = '/api2/v1/connectors/{connectorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($connectorId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectorId' . '}',
                ObjectSerializer::toPathValue($connectorId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnectorList
     *
     * List connectors
     *
     * @param  string $type type (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ConnectorListDto
     */
    public function getConnectorList($type = null)
    {
        list($response) = $this->getConnectorListWithHttpInfo($type);
        return $response;
    }

    /**
     * Operation getConnectorListWithHttpInfo
     *
     * List connectors
     *
     * @param  string $type (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ConnectorListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectorListWithHttpInfo($type = null)
    {
        $returnType = '\Memsource\Model\ConnectorListDto';
        $request = $this->getConnectorListRequest($type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ConnectorListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConnectorListAsync
     *
     * List connectors
     *
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectorListAsync($type = null)
    {
        return $this->getConnectorListAsyncWithHttpInfo($type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectorListAsyncWithHttpInfo
     *
     * List connectors
     *
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectorListAsyncWithHttpInfo($type = null)
    {
        $returnType = '\Memsource\Model\ConnectorListDto';
        $request = $this->getConnectorListRequest($type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnectorList'
     *
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConnectorListRequest($type = null)
    {

        $resourcePath = '/api2/v1/connectors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFile
     *
     * Download file
     *
     * @param  string $connectorId connectorId (required)
     * @param  string $folder folder (required)
     * @param  string $file file (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\InputStreamLength
     */
    public function getFile($connectorId, $folder, $file)
    {
        list($response) = $this->getFileWithHttpInfo($connectorId, $folder, $file);
        return $response;
    }

    /**
     * Operation getFileWithHttpInfo
     *
     * Download file
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $file (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\InputStreamLength, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileWithHttpInfo($connectorId, $folder, $file)
    {
        $returnType = '\Memsource\Model\InputStreamLength';
        $request = $this->getFileRequest($connectorId, $folder, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\InputStreamLength',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFileAsync
     *
     * Download file
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileAsync($connectorId, $folder, $file)
    {
        return $this->getFileAsyncWithHttpInfo($connectorId, $folder, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFileAsyncWithHttpInfo
     *
     * Download file
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileAsyncWithHttpInfo($connectorId, $folder, $file)
    {
        $returnType = '\Memsource\Model\InputStreamLength';
        $request = $this->getFileRequest($connectorId, $folder, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFile'
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFileRequest($connectorId, $folder, $file)
    {
        // verify the required parameter 'connectorId' is set
        if ($connectorId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectorId when calling getFile'
            );
        }
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling getFile'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling getFile'
            );
        }

        $resourcePath = '/api2/v1/connectors/{connectorId}/folders/{folder}/files/{file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($connectorId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectorId' . '}',
                ObjectSerializer::toPathValue($connectorId),
                $resourcePath
            );
        }
        // path params
        if ($folder !== null) {
            $resourcePath = str_replace(
                '{' . 'folder' . '}',
                ObjectSerializer::toPathValue($folder),
                $resourcePath
            );
        }
        // path params
        if ($file !== null) {
            $resourcePath = str_replace(
                '{' . 'file' . '}',
                ObjectSerializer::toPathValue($file),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolder
     *
     * List files in a subfolder
     *
     * @param  string $connectorId connectorId (required)
     * @param  string $folder folder (required)
     * @param  string $fileType fileType (optional, default to ALL)
     * @param  string $sort sort (optional, default to NAME)
     * @param  string $direction direction (optional, default to ASCENDING)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\FileListDto
     */
    public function getFolder($connectorId, $folder, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        list($response) = $this->getFolderWithHttpInfo($connectorId, $folder, $fileType, $sort, $direction);
        return $response;
    }

    /**
     * Operation getFolderWithHttpInfo
     *
     * List files in a subfolder
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\FileListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderWithHttpInfo($connectorId, $folder, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        $returnType = '\Memsource\Model\FileListDto';
        $request = $this->getFolderRequest($connectorId, $folder, $fileType, $sort, $direction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\FileListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderAsync
     *
     * List files in a subfolder
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderAsync($connectorId, $folder, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        return $this->getFolderAsyncWithHttpInfo($connectorId, $folder, $fileType, $sort, $direction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFolderAsyncWithHttpInfo
     *
     * List files in a subfolder
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderAsyncWithHttpInfo($connectorId, $folder, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        $returnType = '\Memsource\Model\FileListDto';
        $request = $this->getFolderRequest($connectorId, $folder, $fileType, $sort, $direction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolder'
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFolderRequest($connectorId, $folder, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        // verify the required parameter 'connectorId' is set
        if ($connectorId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectorId when calling getFolder'
            );
        }
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling getFolder'
            );
        }
        if ($fileType !== null && !preg_match("/ALL|FILES_ONLY|FOLDERS_ONLY/", $fileType)) {
            throw new \InvalidArgumentException("invalid value for \"fileType\" when calling ConnectorApi.getFolder, must conform to the pattern /ALL|FILES_ONLY|FOLDERS_ONLY/.");
        }

        if ($sort !== null && !preg_match("/NAME|SIZE|LAST_MODIFIED/", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling ConnectorApi.getFolder, must conform to the pattern /NAME|SIZE|LAST_MODIFIED/.");
        }

        if ($direction !== null && !preg_match("/ASCENDING|DESCENDING/", $direction)) {
            throw new \InvalidArgumentException("invalid value for \"direction\" when calling ConnectorApi.getFolder, must conform to the pattern /ASCENDING|DESCENDING/.");
        }


        $resourcePath = '/api2/v1/connectors/{connectorId}/folders/{folder}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fileType !== null) {
            $queryParams['fileType'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }

        // path params
        if ($connectorId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectorId' . '}',
                ObjectSerializer::toPathValue($connectorId),
                $resourcePath
            );
        }
        // path params
        if ($folder !== null) {
            $resourcePath = str_replace(
                '{' . 'folder' . '}',
                ObjectSerializer::toPathValue($folder),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRootFolder
     *
     * List files in root
     *
     * @param  string $connectorId connectorId (required)
     * @param  string $fileType fileType (optional, default to ALL)
     * @param  string $sort sort (optional, default to NAME)
     * @param  string $direction direction (optional, default to ASCENDING)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\FileListDto
     */
    public function getRootFolder($connectorId, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        list($response) = $this->getRootFolderWithHttpInfo($connectorId, $fileType, $sort, $direction);
        return $response;
    }

    /**
     * Operation getRootFolderWithHttpInfo
     *
     * List files in root
     *
     * @param  string $connectorId (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\FileListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRootFolderWithHttpInfo($connectorId, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        $returnType = '\Memsource\Model\FileListDto';
        $request = $this->getRootFolderRequest($connectorId, $fileType, $sort, $direction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\FileListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRootFolderAsync
     *
     * List files in root
     *
     * @param  string $connectorId (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRootFolderAsync($connectorId, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        return $this->getRootFolderAsyncWithHttpInfo($connectorId, $fileType, $sort, $direction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRootFolderAsyncWithHttpInfo
     *
     * List files in root
     *
     * @param  string $connectorId (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRootFolderAsyncWithHttpInfo($connectorId, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        $returnType = '\Memsource\Model\FileListDto';
        $request = $this->getRootFolderRequest($connectorId, $fileType, $sort, $direction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRootFolder'
     *
     * @param  string $connectorId (required)
     * @param  string $fileType (optional, default to ALL)
     * @param  string $sort (optional, default to NAME)
     * @param  string $direction (optional, default to ASCENDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRootFolderRequest($connectorId, $fileType = 'ALL', $sort = 'NAME', $direction = 'ASCENDING')
    {
        // verify the required parameter 'connectorId' is set
        if ($connectorId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectorId when calling getRootFolder'
            );
        }
        if ($fileType !== null && !preg_match("/ALL|FILES_ONLY|FOLDERS_ONLY/", $fileType)) {
            throw new \InvalidArgumentException("invalid value for \"fileType\" when calling ConnectorApi.getRootFolder, must conform to the pattern /ALL|FILES_ONLY|FOLDERS_ONLY/.");
        }

        if ($sort !== null && !preg_match("/NAME|SIZE|LAST_MODIFIED/", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling ConnectorApi.getRootFolder, must conform to the pattern /NAME|SIZE|LAST_MODIFIED/.");
        }

        if ($direction !== null && !preg_match("/ASCENDING|DESCENDING/", $direction)) {
            throw new \InvalidArgumentException("invalid value for \"direction\" when calling ConnectorApi.getRootFolder, must conform to the pattern /ASCENDING|DESCENDING/.");
        }


        $resourcePath = '/api2/v1/connectors/{connectorId}/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fileType !== null) {
            $queryParams['fileType'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }

        // path params
        if ($connectorId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectorId' . '}',
                ObjectSerializer::toPathValue($connectorId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadFile
     *
     * Upload a file to a subfolder of the selected connector
     *
     * @param  string $connectorId connectorId (required)
     * @param  string $folder folder (required)
     * @param  string $contentType contentType (required)
     * @param  \SplFileObject $file Translated file to upload (required)
     * @param  string $sourceFileName Name or ID of the original file (optional)
     * @param  string $subfolderName Optional subfolder to upload the file to (optional)
     * @param  string $mimeType Mime type of the file to upload (optional)
     * @param  string $commitMessage Commit message for upload to Git, etc. (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\UploadResultDto
     */
    public function uploadFile($connectorId, $folder, $contentType, $file, $sourceFileName = null, $subfolderName = null, $mimeType = null, $commitMessage = null)
    {
        list($response) = $this->uploadFileWithHttpInfo($connectorId, $folder, $contentType, $file, $sourceFileName, $subfolderName, $mimeType, $commitMessage);
        return $response;
    }

    /**
     * Operation uploadFileWithHttpInfo
     *
     * Upload a file to a subfolder of the selected connector
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $contentType (required)
     * @param  \SplFileObject $file Translated file to upload (required)
     * @param  string $sourceFileName Name or ID of the original file (optional)
     * @param  string $subfolderName Optional subfolder to upload the file to (optional)
     * @param  string $mimeType Mime type of the file to upload (optional)
     * @param  string $commitMessage Commit message for upload to Git, etc. (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\UploadResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadFileWithHttpInfo($connectorId, $folder, $contentType, $file, $sourceFileName = null, $subfolderName = null, $mimeType = null, $commitMessage = null)
    {
        $returnType = '\Memsource\Model\UploadResultDto';
        $request = $this->uploadFileRequest($connectorId, $folder, $contentType, $file, $sourceFileName, $subfolderName, $mimeType, $commitMessage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\UploadResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadFileAsync
     *
     * Upload a file to a subfolder of the selected connector
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $contentType (required)
     * @param  \SplFileObject $file Translated file to upload (required)
     * @param  string $sourceFileName Name or ID of the original file (optional)
     * @param  string $subfolderName Optional subfolder to upload the file to (optional)
     * @param  string $mimeType Mime type of the file to upload (optional)
     * @param  string $commitMessage Commit message for upload to Git, etc. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFileAsync($connectorId, $folder, $contentType, $file, $sourceFileName = null, $subfolderName = null, $mimeType = null, $commitMessage = null)
    {
        return $this->uploadFileAsyncWithHttpInfo($connectorId, $folder, $contentType, $file, $sourceFileName, $subfolderName, $mimeType, $commitMessage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadFileAsyncWithHttpInfo
     *
     * Upload a file to a subfolder of the selected connector
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $contentType (required)
     * @param  \SplFileObject $file Translated file to upload (required)
     * @param  string $sourceFileName Name or ID of the original file (optional)
     * @param  string $subfolderName Optional subfolder to upload the file to (optional)
     * @param  string $mimeType Mime type of the file to upload (optional)
     * @param  string $commitMessage Commit message for upload to Git, etc. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFileAsyncWithHttpInfo($connectorId, $folder, $contentType, $file, $sourceFileName = null, $subfolderName = null, $mimeType = null, $commitMessage = null)
    {
        $returnType = '\Memsource\Model\UploadResultDto';
        $request = $this->uploadFileRequest($connectorId, $folder, $contentType, $file, $sourceFileName, $subfolderName, $mimeType, $commitMessage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadFile'
     *
     * @param  string $connectorId (required)
     * @param  string $folder (required)
     * @param  string $contentType (required)
     * @param  \SplFileObject $file Translated file to upload (required)
     * @param  string $sourceFileName Name or ID of the original file (optional)
     * @param  string $subfolderName Optional subfolder to upload the file to (optional)
     * @param  string $mimeType Mime type of the file to upload (optional)
     * @param  string $commitMessage Commit message for upload to Git, etc. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadFileRequest($connectorId, $folder, $contentType, $file, $sourceFileName = null, $subfolderName = null, $mimeType = null, $commitMessage = null)
    {
        // verify the required parameter 'connectorId' is set
        if ($connectorId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectorId when calling uploadFile'
            );
        }
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling uploadFile'
            );
        }
        // verify the required parameter 'contentType' is set
        if ($contentType === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentType when calling uploadFile'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadFile'
            );
        }

        $resourcePath = '/api2/v1/connectors/{connectorId}/folders/{folder}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($contentType !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($contentType);
        }

        // path params
        if ($connectorId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectorId' . '}',
                ObjectSerializer::toPathValue($connectorId),
                $resourcePath
            );
        }
        // path params
        if ($folder !== null) {
            $resourcePath = str_replace(
                '{' . 'folder' . '}',
                ObjectSerializer::toPathValue($folder),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // form params
        if ($sourceFileName !== null) {
            $formParams['sourceFileName'] = ObjectSerializer::toFormValue($sourceFileName);
        }
        // form params
        if ($subfolderName !== null) {
            $formParams['subfolderName'] = ObjectSerializer::toFormValue($subfolderName);
        }
        // form params
        if ($mimeType !== null) {
            $formParams['mimeType'] = ObjectSerializer::toFormValue($mimeType);
        }
        // form params
        if ($commitMessage !== null) {
            $formParams['commitMessage'] = ObjectSerializer::toFormValue($commitMessage);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
