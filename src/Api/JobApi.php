<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Memsource\ApiException;
use Memsource\Configuration;
use Memsource\HeaderSelector;
use Memsource\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation comparePart
     *
     * Compare jobs on workflow levels
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body body (optional)
     * @param  int $atWorkflowLevel atWorkflowLevel (optional, default to 1)
     * @param  int $withWorkflowLevel withWorkflowLevel (optional, default to 1)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ComparedSegmentsDto
     */
    public function comparePart($projectUid, $body = null, $atWorkflowLevel = '1', $withWorkflowLevel = '1')
    {
        list($response) = $this->comparePartWithHttpInfo($projectUid, $body, $atWorkflowLevel, $withWorkflowLevel);
        return $response;
    }

    /**
     * Operation comparePartWithHttpInfo
     *
     * Compare jobs on workflow levels
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  int $atWorkflowLevel (optional, default to 1)
     * @param  int $withWorkflowLevel (optional, default to 1)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ComparedSegmentsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function comparePartWithHttpInfo($projectUid, $body = null, $atWorkflowLevel = '1', $withWorkflowLevel = '1')
    {
        $returnType = '\Memsource\Model\ComparedSegmentsDto';
        $request = $this->comparePartRequest($projectUid, $body, $atWorkflowLevel, $withWorkflowLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ComparedSegmentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation comparePartAsync
     *
     * Compare jobs on workflow levels
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  int $atWorkflowLevel (optional, default to 1)
     * @param  int $withWorkflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function comparePartAsync($projectUid, $body = null, $atWorkflowLevel = '1', $withWorkflowLevel = '1')
    {
        return $this->comparePartAsyncWithHttpInfo($projectUid, $body, $atWorkflowLevel, $withWorkflowLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation comparePartAsyncWithHttpInfo
     *
     * Compare jobs on workflow levels
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  int $atWorkflowLevel (optional, default to 1)
     * @param  int $withWorkflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function comparePartAsyncWithHttpInfo($projectUid, $body = null, $atWorkflowLevel = '1', $withWorkflowLevel = '1')
    {
        $returnType = '\Memsource\Model\ComparedSegmentsDto';
        $request = $this->comparePartRequest($projectUid, $body, $atWorkflowLevel, $withWorkflowLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'comparePart'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  int $atWorkflowLevel (optional, default to 1)
     * @param  int $withWorkflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function comparePartRequest($projectUid, $body = null, $atWorkflowLevel = '1', $withWorkflowLevel = '1')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling comparePart'
            );
        }
        if ($atWorkflowLevel !== null && $atWorkflowLevel > 15) {
            throw new \InvalidArgumentException('invalid value for "$atWorkflowLevel" when calling JobApi.comparePart, must be smaller than or equal to 15.');
        }
        if ($atWorkflowLevel !== null && $atWorkflowLevel < 1) {
            throw new \InvalidArgumentException('invalid value for "$atWorkflowLevel" when calling JobApi.comparePart, must be bigger than or equal to 1.');
        }

        if ($withWorkflowLevel !== null && $withWorkflowLevel > 15) {
            throw new \InvalidArgumentException('invalid value for "$withWorkflowLevel" when calling JobApi.comparePart, must be smaller than or equal to 15.');
        }
        if ($withWorkflowLevel !== null && $withWorkflowLevel < 1) {
            throw new \InvalidArgumentException('invalid value for "$withWorkflowLevel" when calling JobApi.comparePart, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/compare';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($atWorkflowLevel !== null) {
            $queryParams['atWorkflowLevel'] = ObjectSerializer::toQueryValue($atWorkflowLevel);
        }
        // query params
        if ($withWorkflowLevel !== null) {
            $queryParams['withWorkflowLevel'] = ObjectSerializer::toQueryValue($withWorkflowLevel);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completedFile
     *
     * Download target file
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  string $format format (optional, default to ORIGINAL)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function completedFile($projectUid, $jobUid, $format = 'ORIGINAL')
    {
        $this->completedFileWithHttpInfo($projectUid, $jobUid, $format);
    }

    /**
     * Operation completedFileWithHttpInfo
     *
     * Download target file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  string $format (optional, default to ORIGINAL)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function completedFileWithHttpInfo($projectUid, $jobUid, $format = 'ORIGINAL')
    {
        $returnType = '';
        $request = $this->completedFileRequest($projectUid, $jobUid, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation completedFileAsync
     *
     * Download target file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  string $format (optional, default to ORIGINAL)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completedFileAsync($projectUid, $jobUid, $format = 'ORIGINAL')
    {
        return $this->completedFileAsyncWithHttpInfo($projectUid, $jobUid, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completedFileAsyncWithHttpInfo
     *
     * Download target file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  string $format (optional, default to ORIGINAL)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completedFileAsyncWithHttpInfo($projectUid, $jobUid, $format = 'ORIGINAL')
    {
        $returnType = '';
        $request = $this->completedFileRequest($projectUid, $jobUid, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completedFile'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  string $format (optional, default to ORIGINAL)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function completedFileRequest($projectUid, $jobUid, $format = 'ORIGINAL')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling completedFile'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling completedFile'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/targetFile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createJob
     *
     * Create job
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $memsource memsource (optional)
     * @param  string $contentDisposition contentDisposition (optional)
     * @param  \Memsource\Model\InputStream $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobListDto
     */
    public function createJob($projectUid, $memsource = null, $contentDisposition = null, $body = null)
    {
        list($response) = $this->createJobWithHttpInfo($projectUid, $memsource, $contentDisposition, $body);
        return $response;
    }

    /**
     * Operation createJobWithHttpInfo
     *
     * Create job
     *
     * @param  string $projectUid (required)
     * @param  string $memsource (optional)
     * @param  string $contentDisposition (optional)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJobWithHttpInfo($projectUid, $memsource = null, $contentDisposition = null, $body = null)
    {
        $returnType = '\Memsource\Model\JobListDto';
        $request = $this->createJobRequest($projectUid, $memsource, $contentDisposition, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJobAsync
     *
     * Create job
     *
     * @param  string $projectUid (required)
     * @param  string $memsource (optional)
     * @param  string $contentDisposition (optional)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJobAsync($projectUid, $memsource = null, $contentDisposition = null, $body = null)
    {
        return $this->createJobAsyncWithHttpInfo($projectUid, $memsource, $contentDisposition, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJobAsyncWithHttpInfo
     *
     * Create job
     *
     * @param  string $projectUid (required)
     * @param  string $memsource (optional)
     * @param  string $contentDisposition (optional)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJobAsyncWithHttpInfo($projectUid, $memsource = null, $contentDisposition = null, $body = null)
    {
        $returnType = '\Memsource\Model\JobListDto';
        $request = $this->createJobRequest($projectUid, $memsource, $contentDisposition, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJob'
     *
     * @param  string $projectUid (required)
     * @param  string $memsource (optional)
     * @param  string $contentDisposition (optional)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createJobRequest($projectUid, $memsource = null, $contentDisposition = null, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling createJob'
            );
        }
        if ($contentDisposition !== null && !preg_match("/filename\\*=UTF-8''(.+)/", $contentDisposition)) {
            throw new \InvalidArgumentException("invalid value for \"contentDisposition\" when calling JobApi.createJob, must conform to the pattern /filename\\*=UTF-8''(.+)/.");
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($memsource !== null) {
            $headerParams['Memsource'] = ObjectSerializer::toHeaderValue($memsource);
        }
        // header params
        if ($contentDisposition !== null) {
            $headerParams['Content-Disposition'] = ObjectSerializer::toHeaderValue($contentDisposition);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTermByJob
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid jobUid (required)
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TermPairDto
     */
    public function createTermByJob($jobUid, $projectUid, $body = null)
    {
        list($response) = $this->createTermByJobWithHttpInfo($jobUid, $projectUid, $body);
        return $response;
    }

    /**
     * Operation createTermByJobWithHttpInfo
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TermPairDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTermByJobWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\TermPairDto';
        $request = $this->createTermByJobRequest($jobUid, $projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TermPairDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTermByJobAsync
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermByJobAsync($jobUid, $projectUid, $body = null)
    {
        return $this->createTermByJobAsyncWithHttpInfo($jobUid, $projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTermByJobAsyncWithHttpInfo
     *
     * Create term in job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTermByJobAsyncWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\TermPairDto';
        $request = $this->createTermByJobRequest($jobUid, $projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTermByJob'
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\CreateTermsDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTermByJobRequest($jobUid, $projectUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling createTermByJob'
            );
        }
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling createTermByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/createByJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }
        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllTranslations
     *
     * Delete all translations
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllTranslations($projectUid, $body = null)
    {
        $this->deleteAllTranslationsWithHttpInfo($projectUid, $body);
    }

    /**
     * Operation deleteAllTranslationsWithHttpInfo
     *
     * Delete all translations
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllTranslationsWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->deleteAllTranslationsRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllTranslationsAsync
     *
     * Delete all translations
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllTranslationsAsync($projectUid, $body = null)
    {
        return $this->deleteAllTranslationsAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllTranslationsAsyncWithHttpInfo
     *
     * Delete all translations
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllTranslationsAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->deleteAllTranslationsRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllTranslations'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAllTranslationsRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling deleteAllTranslations'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParts
     *
     * Delete job (batch)
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\JobPartReferences $body body (optional)
     * @param  bool $purge purge (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParts($projectUid, $body = null, $purge = 'false')
    {
        $this->deletePartsWithHttpInfo($projectUid, $body, $purge);
    }

    /**
     * Operation deletePartsWithHttpInfo
     *
     * Delete job (batch)
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReferences $body (optional)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePartsWithHttpInfo($projectUid, $body = null, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deletePartsRequest($projectUid, $body, $purge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePartsAsync
     *
     * Delete job (batch)
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReferences $body (optional)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePartsAsync($projectUid, $body = null, $purge = 'false')
    {
        return $this->deletePartsAsyncWithHttpInfo($projectUid, $body, $purge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePartsAsyncWithHttpInfo
     *
     * Delete job (batch)
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReferences $body (optional)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePartsAsyncWithHttpInfo($projectUid, $body = null, $purge = 'false')
    {
        $returnType = '';
        $request = $this->deletePartsRequest($projectUid, $body, $purge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParts'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReferences $body (optional)
     * @param  bool $purge (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePartsRequest($projectUid, $body = null, $purge = 'false')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling deleteParts'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purge !== null) {
            $queryParams['purge'] = ObjectSerializer::toQueryValue($purge);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editPart
     *
     * Edit job
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\JobPartUpdateSingleDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobPartExtendedDto
     */
    public function editPart($projectUid, $jobUid, $body = null)
    {
        list($response) = $this->editPartWithHttpInfo($projectUid, $jobUid, $body);
        return $response;
    }

    /**
     * Operation editPartWithHttpInfo
     *
     * Edit job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobPartUpdateSingleDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobPartExtendedDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function editPartWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\JobPartExtendedDto';
        $request = $this->editPartRequest($projectUid, $jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobPartExtendedDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editPartAsync
     *
     * Edit job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobPartUpdateSingleDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPartAsync($projectUid, $jobUid, $body = null)
    {
        return $this->editPartAsyncWithHttpInfo($projectUid, $jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editPartAsyncWithHttpInfo
     *
     * Edit job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobPartUpdateSingleDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPartAsyncWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\JobPartExtendedDto';
        $request = $this->editPartRequest($projectUid, $jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editPart'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobPartUpdateSingleDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editPartRequest($projectUid, $jobUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling editPart'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling editPart'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editParts
     *
     * Edit jobs (batch)
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\JobPartUpdateBatchDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobPartsDto
     */
    public function editParts($projectUid, $body = null)
    {
        list($response) = $this->editPartsWithHttpInfo($projectUid, $body);
        return $response;
    }

    /**
     * Operation editPartsWithHttpInfo
     *
     * Edit jobs (batch)
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartUpdateBatchDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobPartsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function editPartsWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\JobPartsDto';
        $request = $this->editPartsRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobPartsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editPartsAsync
     *
     * Edit jobs (batch)
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartUpdateBatchDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPartsAsync($projectUid, $body = null)
    {
        return $this->editPartsAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editPartsAsyncWithHttpInfo
     *
     * Edit jobs (batch)
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartUpdateBatchDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPartsAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\JobPartsDto';
        $request = $this->editPartsRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editParts'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartUpdateBatchDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editPartsRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling editParts'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filePreview
     *
     * Download preview file
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\InputStream $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function filePreview($projectUid, $jobUid, $body = null)
    {
        $this->filePreviewWithHttpInfo($projectUid, $jobUid, $body);
    }

    /**
     * Operation filePreviewWithHttpInfo
     *
     * Download preview file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function filePreviewWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '';
        $request = $this->filePreviewRequest($projectUid, $jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation filePreviewAsync
     *
     * Download preview file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filePreviewAsync($projectUid, $jobUid, $body = null)
    {
        return $this->filePreviewAsyncWithHttpInfo($projectUid, $jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filePreviewAsyncWithHttpInfo
     *
     * Download preview file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filePreviewAsyncWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '';
        $request = $this->filePreviewRequest($projectUid, $jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filePreview'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\InputStream $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function filePreviewRequest($projectUid, $jobUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling filePreview'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling filePreview'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filePreviewJob
     *
     * Download preview file
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function filePreviewJob($projectUid, $jobUid)
    {
        $this->filePreviewJobWithHttpInfo($projectUid, $jobUid);
    }

    /**
     * Operation filePreviewJobWithHttpInfo
     *
     * Download preview file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function filePreviewJobWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '';
        $request = $this->filePreviewJobRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation filePreviewJobAsync
     *
     * Download preview file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filePreviewJobAsync($projectUid, $jobUid)
    {
        return $this->filePreviewJobAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filePreviewJobAsyncWithHttpInfo
     *
     * Download preview file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filePreviewJobAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '';
        $request = $this->filePreviewJobRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filePreviewJob'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function filePreviewJobRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling filePreviewJob'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling filePreviewJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBilingualFile
     *
     * Download bilingual file
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body body (optional)
     * @param  string $format format (optional, default to MXLF)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getBilingualFile($projectUid, $body = null, $format = 'MXLF')
    {
        $this->getBilingualFileWithHttpInfo($projectUid, $body, $format);
    }

    /**
     * Operation getBilingualFileWithHttpInfo
     *
     * Download bilingual file
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $format (optional, default to MXLF)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBilingualFileWithHttpInfo($projectUid, $body = null, $format = 'MXLF')
    {
        $returnType = '';
        $request = $this->getBilingualFileRequest($projectUid, $body, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getBilingualFileAsync
     *
     * Download bilingual file
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $format (optional, default to MXLF)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBilingualFileAsync($projectUid, $body = null, $format = 'MXLF')
    {
        return $this->getBilingualFileAsyncWithHttpInfo($projectUid, $body, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBilingualFileAsyncWithHttpInfo
     *
     * Download bilingual file
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $format (optional, default to MXLF)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBilingualFileAsyncWithHttpInfo($projectUid, $body = null, $format = 'MXLF')
    {
        $returnType = '';
        $request = $this->getBilingualFileRequest($projectUid, $body, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBilingualFile'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $format (optional, default to MXLF)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBilingualFileRequest($projectUid, $body = null, $format = 'MXLF')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getBilingualFile'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/bilingualFile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOriginalFile
     *
     * Download original file
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getOriginalFile($projectUid, $jobUid)
    {
        $this->getOriginalFileWithHttpInfo($projectUid, $jobUid);
    }

    /**
     * Operation getOriginalFileWithHttpInfo
     *
     * Download original file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOriginalFileWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '';
        $request = $this->getOriginalFileRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getOriginalFileAsync
     *
     * Download original file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOriginalFileAsync($projectUid, $jobUid)
    {
        return $this->getOriginalFileAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOriginalFileAsyncWithHttpInfo
     *
     * Download original file
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOriginalFileAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '';
        $request = $this->getOriginalFileRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOriginalFile'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOriginalFileRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getOriginalFile'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling getOriginalFile'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/original';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPart
     *
     * Get job
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobPartExtendedDto
     */
    public function getPart($projectUid, $jobUid)
    {
        list($response) = $this->getPartWithHttpInfo($projectUid, $jobUid);
        return $response;
    }

    /**
     * Operation getPartWithHttpInfo
     *
     * Get job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobPartExtendedDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPartWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\JobPartExtendedDto';
        $request = $this->getPartRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobPartExtendedDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPartAsync
     *
     * Get job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartAsync($projectUid, $jobUid)
    {
        return $this->getPartAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPartAsyncWithHttpInfo
     *
     * Get job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\JobPartExtendedDto';
        $request = $this->getPartRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPart'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPartRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getPart'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling getPart'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTranslationResources
     *
     * Get translation resources
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\TranslationResourcesDto
     */
    public function getTranslationResources($projectUid, $jobUid)
    {
        list($response) = $this->getTranslationResourcesWithHttpInfo($projectUid, $jobUid);
        return $response;
    }

    /**
     * Operation getTranslationResourcesWithHttpInfo
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\TranslationResourcesDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTranslationResourcesWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\TranslationResourcesDto';
        $request = $this->getTranslationResourcesRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\TranslationResourcesDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTranslationResourcesAsync
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTranslationResourcesAsync($projectUid, $jobUid)
    {
        return $this->getTranslationResourcesAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTranslationResourcesAsyncWithHttpInfo
     *
     * Get translation resources
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTranslationResourcesAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\TranslationResourcesDto';
        $request = $this->getTranslationResourcesRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTranslationResources'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTranslationResourcesRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling getTranslationResources'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling getTranslationResources'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/translationResources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listParts
     *
     * List jobs
     *
     * @param  string $projectUid projectUid (required)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     * @param  bool $count count (optional, default to false)
     * @param  int $workflowLevel workflowLevel (optional, default to 1)
     * @param  string[] $status status (optional)
     * @param  int $assignedLinguist assignedLinguist (optional)
     * @param  int $dueInHours dueInHours (optional)
     * @param  string $filename filename (optional)
     * @param  string $targetLang targetLang (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoJobPartReference
     */
    public function listParts($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedLinguist = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        list($response) = $this->listPartsWithHttpInfo($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedLinguist, $dueInHours, $filename, $targetLang);
        return $response;
    }

    /**
     * Operation listPartsWithHttpInfo
     *
     * List jobs
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedLinguist (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoJobPartReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPartsWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedLinguist = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        $returnType = '\Memsource\Model\PageDtoJobPartReference';
        $request = $this->listPartsRequest($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedLinguist, $dueInHours, $filename, $targetLang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoJobPartReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPartsAsync
     *
     * List jobs
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedLinguist (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPartsAsync($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedLinguist = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        return $this->listPartsAsyncWithHttpInfo($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedLinguist, $dueInHours, $filename, $targetLang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPartsAsyncWithHttpInfo
     *
     * List jobs
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedLinguist (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPartsAsyncWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedLinguist = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        $returnType = '\Memsource\Model\PageDtoJobPartReference';
        $request = $this->listPartsRequest($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedLinguist, $dueInHours, $filename, $targetLang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listParts'
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedLinguist (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPartsRequest($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedLinguist = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling listParts'
            );
        }
        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling JobApi.listParts, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling JobApi.listParts, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling JobApi.listParts, must be bigger than or equal to 1.');
        }

        if ($workflowLevel !== null && $workflowLevel > 15) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling JobApi.listParts, must be smaller than or equal to 15.');
        }
        if ($workflowLevel !== null && $workflowLevel < 1) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling JobApi.listParts, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($workflowLevel !== null) {
            $queryParams['workflowLevel'] = ObjectSerializer::toQueryValue($workflowLevel);
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($assignedLinguist !== null) {
            $queryParams['assignedLinguist'] = ObjectSerializer::toQueryValue($assignedLinguist);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPartsV2
     *
     * List jobs
     *
     * @param  string $projectUid projectUid (required)
     * @param  int $pageNumber pageNumber (optional, default to 0)
     * @param  int $pageSize pageSize (optional, default to 50)
     * @param  bool $count count (optional, default to false)
     * @param  int $workflowLevel workflowLevel (optional, default to 1)
     * @param  string[] $status status (optional)
     * @param  int $assignedUser assignedUser (optional)
     * @param  int $dueInHours dueInHours (optional)
     * @param  string $filename filename (optional)
     * @param  string $targetLang targetLang (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PageDtoJobPartReferenceV2
     */
    public function listPartsV2($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedUser = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        list($response) = $this->listPartsV2WithHttpInfo($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedUser, $dueInHours, $filename, $targetLang);
        return $response;
    }

    /**
     * Operation listPartsV2WithHttpInfo
     *
     * List jobs
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedUser (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PageDtoJobPartReferenceV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPartsV2WithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedUser = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        $returnType = '\Memsource\Model\PageDtoJobPartReferenceV2';
        $request = $this->listPartsV2Request($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedUser, $dueInHours, $filename, $targetLang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PageDtoJobPartReferenceV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPartsV2Async
     *
     * List jobs
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedUser (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPartsV2Async($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedUser = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        return $this->listPartsV2AsyncWithHttpInfo($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedUser, $dueInHours, $filename, $targetLang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPartsV2AsyncWithHttpInfo
     *
     * List jobs
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedUser (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPartsV2AsyncWithHttpInfo($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedUser = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        $returnType = '\Memsource\Model\PageDtoJobPartReferenceV2';
        $request = $this->listPartsV2Request($projectUid, $pageNumber, $pageSize, $count, $workflowLevel, $status, $assignedUser, $dueInHours, $filename, $targetLang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPartsV2'
     *
     * @param  string $projectUid (required)
     * @param  int $pageNumber (optional, default to 0)
     * @param  int $pageSize (optional, default to 50)
     * @param  bool $count (optional, default to false)
     * @param  int $workflowLevel (optional, default to 1)
     * @param  string[] $status (optional)
     * @param  int $assignedUser (optional)
     * @param  int $dueInHours (optional)
     * @param  string $filename (optional)
     * @param  string $targetLang (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPartsV2Request($projectUid, $pageNumber = '0', $pageSize = '50', $count = 'false', $workflowLevel = '1', $status = null, $assignedUser = null, $dueInHours = null, $filename = null, $targetLang = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling listPartsV2'
            );
        }
        if ($pageNumber !== null && $pageNumber < 0) {
            throw new \InvalidArgumentException('invalid value for "$pageNumber" when calling JobApi.listPartsV2, must be bigger than or equal to 0.');
        }

        if ($pageSize !== null && $pageSize > 50) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling JobApi.listPartsV2, must be smaller than or equal to 50.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling JobApi.listPartsV2, must be bigger than or equal to 1.');
        }

        if ($workflowLevel !== null && $workflowLevel > 15) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling JobApi.listPartsV2, must be smaller than or equal to 15.');
        }
        if ($workflowLevel !== null && $workflowLevel < 1) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling JobApi.listPartsV2, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v2/projects/{projectUid}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($workflowLevel !== null) {
            $queryParams['workflowLevel'] = ObjectSerializer::toQueryValue($workflowLevel);
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($assignedUser !== null) {
            $queryParams['assignedUser'] = ObjectSerializer::toQueryValue($assignedUser);
        }
        // query params
        if ($dueInHours !== null) {
            $queryParams['dueInHours'] = ObjectSerializer::toQueryValue($dueInHours);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename);
        }
        // query params
        if ($targetLang !== null) {
            $queryParams['targetLang'] = ObjectSerializer::toQueryValue($targetLang);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProviders
     *
     * Get suggested providers
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\ProviderListDto
     */
    public function listProviders($projectUid, $jobUid)
    {
        list($response) = $this->listProvidersWithHttpInfo($projectUid, $jobUid);
        return $response;
    }

    /**
     * Operation listProvidersWithHttpInfo
     *
     * Get suggested providers
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\ProviderListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listProvidersWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\ProviderListDto';
        $request = $this->listProvidersRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\ProviderListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listProvidersAsync
     *
     * Get suggested providers
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProvidersAsync($projectUid, $jobUid)
    {
        return $this->listProvidersAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listProvidersAsyncWithHttpInfo
     *
     * Get suggested providers
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProvidersAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\ProviderListDto';
        $request = $this->listProvidersRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listProviders'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listProvidersRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling listProviders'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling listProviders'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/providers/suggest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSegments
     *
     * Get segments
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  int $beginIndex beginIndex (optional, default to 0)
     * @param  int $endIndex endIndex (optional, default to 0)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SegmentListDto
     */
    public function listSegments($projectUid, $jobUid, $beginIndex = '0', $endIndex = '0')
    {
        list($response) = $this->listSegmentsWithHttpInfo($projectUid, $jobUid, $beginIndex, $endIndex);
        return $response;
    }

    /**
     * Operation listSegmentsWithHttpInfo
     *
     * Get segments
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $beginIndex (optional, default to 0)
     * @param  int $endIndex (optional, default to 0)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SegmentListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSegmentsWithHttpInfo($projectUid, $jobUid, $beginIndex = '0', $endIndex = '0')
    {
        $returnType = '\Memsource\Model\SegmentListDto';
        $request = $this->listSegmentsRequest($projectUid, $jobUid, $beginIndex, $endIndex);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SegmentListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSegmentsAsync
     *
     * Get segments
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $beginIndex (optional, default to 0)
     * @param  int $endIndex (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSegmentsAsync($projectUid, $jobUid, $beginIndex = '0', $endIndex = '0')
    {
        return $this->listSegmentsAsyncWithHttpInfo($projectUid, $jobUid, $beginIndex, $endIndex)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSegmentsAsyncWithHttpInfo
     *
     * Get segments
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $beginIndex (optional, default to 0)
     * @param  int $endIndex (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSegmentsAsyncWithHttpInfo($projectUid, $jobUid, $beginIndex = '0', $endIndex = '0')
    {
        $returnType = '\Memsource\Model\SegmentListDto';
        $request = $this->listSegmentsRequest($projectUid, $jobUid, $beginIndex, $endIndex);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSegments'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $beginIndex (optional, default to 0)
     * @param  int $endIndex (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listSegmentsRequest($projectUid, $jobUid, $beginIndex = '0', $endIndex = '0')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling listSegments'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling listSegments'
            );
        }
        if ($beginIndex !== null && $beginIndex < 0) {
            throw new \InvalidArgumentException('invalid value for "$beginIndex" when calling JobApi.listSegments, must be bigger than or equal to 0.');
        }

        if ($endIndex !== null && $endIndex < 0) {
            throw new \InvalidArgumentException('invalid value for "$endIndex" when calling JobApi.listSegments, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/segments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($beginIndex !== null) {
            $queryParams['beginIndex'] = ObjectSerializer::toQueryValue($beginIndex);
        }
        // query params
        if ($endIndex !== null) {
            $queryParams['endIndex'] = ObjectSerializer::toQueryValue($endIndex);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notifyAssigned
     *
     * Notify assigned users
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\NotifyJobPartsRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function notifyAssigned($projectUid, $body = null)
    {
        $this->notifyAssignedWithHttpInfo($projectUid, $body);
    }

    /**
     * Operation notifyAssignedWithHttpInfo
     *
     * Notify assigned users
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\NotifyJobPartsRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function notifyAssignedWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->notifyAssignedRequest($projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation notifyAssignedAsync
     *
     * Notify assigned users
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\NotifyJobPartsRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notifyAssignedAsync($projectUid, $body = null)
    {
        return $this->notifyAssignedAsyncWithHttpInfo($projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notifyAssignedAsyncWithHttpInfo
     *
     * Notify assigned users
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\NotifyJobPartsRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notifyAssignedAsyncWithHttpInfo($projectUid, $body = null)
    {
        $returnType = '';
        $request = $this->notifyAssignedRequest($projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notifyAssigned'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\NotifyJobPartsRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notifyAssignedRequest($projectUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling notifyAssigned'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/notifyAssigned';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation previewUrls
     *
     * Get PDF preview
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  int $workflowLevel workflowLevel (optional, default to 1)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\PreviewUrlsDto
     */
    public function previewUrls($projectUid, $jobUid, $workflowLevel = '1')
    {
        list($response) = $this->previewUrlsWithHttpInfo($projectUid, $jobUid, $workflowLevel);
        return $response;
    }

    /**
     * Operation previewUrlsWithHttpInfo
     *
     * Get PDF preview
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\PreviewUrlsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewUrlsWithHttpInfo($projectUid, $jobUid, $workflowLevel = '1')
    {
        $returnType = '\Memsource\Model\PreviewUrlsDto';
        $request = $this->previewUrlsRequest($projectUid, $jobUid, $workflowLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\PreviewUrlsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation previewUrlsAsync
     *
     * Get PDF preview
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewUrlsAsync($projectUid, $jobUid, $workflowLevel = '1')
    {
        return $this->previewUrlsAsyncWithHttpInfo($projectUid, $jobUid, $workflowLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation previewUrlsAsyncWithHttpInfo
     *
     * Get PDF preview
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewUrlsAsyncWithHttpInfo($projectUid, $jobUid, $workflowLevel = '1')
    {
        $returnType = '\Memsource\Model\PreviewUrlsDto';
        $request = $this->previewUrlsRequest($projectUid, $jobUid, $workflowLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'previewUrls'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  int $workflowLevel (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function previewUrlsRequest($projectUid, $jobUid, $workflowLevel = '1')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling previewUrls'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling previewUrls'
            );
        }
        if ($workflowLevel !== null && $workflowLevel > 15) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling JobApi.previewUrls, must be smaller than or equal to 15.');
        }
        if ($workflowLevel !== null && $workflowLevel < 1) {
            throw new \InvalidArgumentException('invalid value for "$workflowLevel" when calling JobApi.previewUrls, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/previewUrl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($workflowLevel !== null) {
            $queryParams['workflowLevel'] = ObjectSerializer::toQueryValue($workflowLevel);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pseudoTranslate
     *
     * Pseudo-translate job
     *
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body body (optional)
     * @param  string $replacement replacement (optional, default to $)
     * @param  string $prefix prefix (optional)
     * @param  string $suffix suffix (optional)
     * @param  double $length length (optional, default to 1.0)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pseudoTranslate($projectUid, $body = null, $replacement = '$', $prefix = null, $suffix = null, $length = '1.0')
    {
        $this->pseudoTranslateWithHttpInfo($projectUid, $body, $replacement, $prefix, $suffix, $length);
    }

    /**
     * Operation pseudoTranslateWithHttpInfo
     *
     * Pseudo-translate job
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $replacement (optional, default to $)
     * @param  string $prefix (optional)
     * @param  string $suffix (optional)
     * @param  double $length (optional, default to 1.0)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pseudoTranslateWithHttpInfo($projectUid, $body = null, $replacement = '$', $prefix = null, $suffix = null, $length = '1.0')
    {
        $returnType = '';
        $request = $this->pseudoTranslateRequest($projectUid, $body, $replacement, $prefix, $suffix, $length);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pseudoTranslateAsync
     *
     * Pseudo-translate job
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $replacement (optional, default to $)
     * @param  string $prefix (optional)
     * @param  string $suffix (optional)
     * @param  double $length (optional, default to 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pseudoTranslateAsync($projectUid, $body = null, $replacement = '$', $prefix = null, $suffix = null, $length = '1.0')
    {
        return $this->pseudoTranslateAsyncWithHttpInfo($projectUid, $body, $replacement, $prefix, $suffix, $length)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pseudoTranslateAsyncWithHttpInfo
     *
     * Pseudo-translate job
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $replacement (optional, default to $)
     * @param  string $prefix (optional)
     * @param  string $suffix (optional)
     * @param  double $length (optional, default to 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pseudoTranslateAsyncWithHttpInfo($projectUid, $body = null, $replacement = '$', $prefix = null, $suffix = null, $length = '1.0')
    {
        $returnType = '';
        $request = $this->pseudoTranslateRequest($projectUid, $body, $replacement, $prefix, $suffix, $length);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pseudoTranslate'
     *
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\JobPartReadyReferences $body (optional)
     * @param  string $replacement (optional, default to $)
     * @param  string $prefix (optional)
     * @param  string $suffix (optional)
     * @param  double $length (optional, default to 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pseudoTranslateRequest($projectUid, $body = null, $replacement = '$', $prefix = null, $suffix = null, $length = '1.0')
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling pseudoTranslate'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/pseudoTranslate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($replacement !== null) {
            $queryParams['replacement'] = ObjectSerializer::toQueryValue($replacement);
        }
        // query params
        if ($prefix !== null) {
            $queryParams['prefix'] = ObjectSerializer::toQueryValue($prefix);
        }
        // query params
        if ($suffix !== null) {
            $queryParams['suffix'] = ObjectSerializer::toQueryValue($suffix);
        }
        // query params
        if ($length !== null) {
            $queryParams['length'] = ObjectSerializer::toQueryValue($length);
        }

        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pseudoTranslateJobPart
     *
     * Pseudo-translates job
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\PseudoTranslateActionDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pseudoTranslateJobPart($projectUid, $jobUid, $body = null)
    {
        $this->pseudoTranslateJobPartWithHttpInfo($projectUid, $jobUid, $body);
    }

    /**
     * Operation pseudoTranslateJobPartWithHttpInfo
     *
     * Pseudo-translates job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\PseudoTranslateActionDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pseudoTranslateJobPartWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '';
        $request = $this->pseudoTranslateJobPartRequest($projectUid, $jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pseudoTranslateJobPartAsync
     *
     * Pseudo-translates job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\PseudoTranslateActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pseudoTranslateJobPartAsync($projectUid, $jobUid, $body = null)
    {
        return $this->pseudoTranslateJobPartAsyncWithHttpInfo($projectUid, $jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pseudoTranslateJobPartAsyncWithHttpInfo
     *
     * Pseudo-translates job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\PseudoTranslateActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pseudoTranslateJobPartAsyncWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '';
        $request = $this->pseudoTranslateJobPartRequest($projectUid, $jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pseudoTranslateJobPart'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\PseudoTranslateActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pseudoTranslateJobPartRequest($projectUid, $jobUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling pseudoTranslateJobPart'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling pseudoTranslateJobPart'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/pseudoTranslate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSegmentByJob
     *
     * Search job's translation memories
     *
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function searchSegmentByJob($jobUid, $body = null)
    {
        list($response) = $this->searchSegmentByJobWithHttpInfo($jobUid, $body);
        return $response;
    }

    /**
     * Operation searchSegmentByJobWithHttpInfo
     *
     * Search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSegmentByJobWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchSegmentByJobRequest($jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSegmentByJobAsync
     *
     * Search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSegmentByJobAsync($jobUid, $body = null)
    {
        return $this->searchSegmentByJobAsyncWithHttpInfo($jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSegmentByJobAsyncWithHttpInfo
     *
     * Search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSegmentByJobAsyncWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchSegmentByJobRequest($jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSegmentByJob'
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSegmentByJobRequest($jobUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling searchSegmentByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/transMemories/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTermsByJob
     *
     * Search job's term bases
     *
     * @param  string $jobUid jobUid (required)
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function searchTermsByJob($jobUid, $projectUid, $body = null)
    {
        list($response) = $this->searchTermsByJobWithHttpInfo($jobUid, $projectUid, $body);
        return $response;
    }

    /**
     * Operation searchTermsByJobWithHttpInfo
     *
     * Search job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsByJobWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchTermsByJobRequest($jobUid, $projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsByJobAsync
     *
     * Search job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByJobAsync($jobUid, $projectUid, $body = null)
    {
        return $this->searchTermsByJobAsyncWithHttpInfo($jobUid, $projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsByJobAsyncWithHttpInfo
     *
     * Search job's term bases
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsByJobAsyncWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->searchTermsByJobRequest($jobUid, $projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTermsByJob'
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsByJobRequest($jobUid, $projectUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling searchTermsByJob'
            );
        }
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling searchTermsByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/searchByJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }
        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTermsInTextByJob
     *
     * Search terms in text
     *
     * @param  string $jobUid jobUid (required)
     * @param  string $projectUid projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchInTextResponseListDto
     */
    public function searchTermsInTextByJob($jobUid, $projectUid, $body = null)
    {
        list($response) = $this->searchTermsInTextByJobWithHttpInfo($jobUid, $projectUid, $body);
        return $response;
    }

    /**
     * Operation searchTermsInTextByJobWithHttpInfo
     *
     * Search terms in text
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchInTextResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTermsInTextByJobWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchInTextResponseListDto';
        $request = $this->searchTermsInTextByJobRequest($jobUid, $projectUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchInTextResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTermsInTextByJobAsync
     *
     * Search terms in text
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsInTextByJobAsync($jobUid, $projectUid, $body = null)
    {
        return $this->searchTermsInTextByJobAsyncWithHttpInfo($jobUid, $projectUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTermsInTextByJobAsyncWithHttpInfo
     *
     * Search terms in text
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTermsInTextByJobAsyncWithHttpInfo($jobUid, $projectUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchInTextResponseListDto';
        $request = $this->searchTermsInTextByJobRequest($jobUid, $projectUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTermsInTextByJob'
     *
     * @param  string $jobUid (required)
     * @param  string $projectUid (required)
     * @param  \Memsource\Model\SearchInTextByJobRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTermsInTextByJobRequest($jobUid, $projectUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling searchTermsInTextByJob'
            );
        }
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling searchTermsInTextByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/searchInTextByJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }
        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setStatus
     *
     * Edit job status
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\JobStatusChangeActionDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setStatus($projectUid, $jobUid, $body = null)
    {
        $this->setStatusWithHttpInfo($projectUid, $jobUid, $body);
    }

    /**
     * Operation setStatusWithHttpInfo
     *
     * Edit job status
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobStatusChangeActionDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setStatusWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '';
        $request = $this->setStatusRequest($projectUid, $jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setStatusAsync
     *
     * Edit job status
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobStatusChangeActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setStatusAsync($projectUid, $jobUid, $body = null)
    {
        return $this->setStatusAsyncWithHttpInfo($projectUid, $jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setStatusAsyncWithHttpInfo
     *
     * Edit job status
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobStatusChangeActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setStatusAsyncWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '';
        $request = $this->setStatusRequest($projectUid, $jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setStatus'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\JobStatusChangeActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setStatusRequest($projectUid, $jobUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling setStatus'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling setStatus'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/setStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation split
     *
     * Split job
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\SplitJobActionDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobPartsDto
     */
    public function split($projectUid, $jobUid, $body = null)
    {
        list($response) = $this->splitWithHttpInfo($projectUid, $jobUid, $body);
        return $response;
    }

    /**
     * Operation splitWithHttpInfo
     *
     * Split job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SplitJobActionDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobPartsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function splitWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\JobPartsDto';
        $request = $this->splitRequest($projectUid, $jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobPartsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation splitAsync
     *
     * Split job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SplitJobActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function splitAsync($projectUid, $jobUid, $body = null)
    {
        return $this->splitAsyncWithHttpInfo($projectUid, $jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation splitAsyncWithHttpInfo
     *
     * Split job
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SplitJobActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function splitAsyncWithHttpInfo($projectUid, $jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\JobPartsDto';
        $request = $this->splitRequest($projectUid, $jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'split'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\SplitJobActionDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitRequest($projectUid, $jobUid, $body = null)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling split'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling split'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/split';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation statusChanges
     *
     * Get status changes
     *
     * @param  string $projectUid projectUid (required)
     * @param  string $jobUid jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobPartStatusChangesDto
     */
    public function statusChanges($projectUid, $jobUid)
    {
        list($response) = $this->statusChangesWithHttpInfo($projectUid, $jobUid);
        return $response;
    }

    /**
     * Operation statusChangesWithHttpInfo
     *
     * Get status changes
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobPartStatusChangesDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function statusChangesWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\JobPartStatusChangesDto';
        $request = $this->statusChangesRequest($projectUid, $jobUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobPartStatusChangesDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation statusChangesAsync
     *
     * Get status changes
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statusChangesAsync($projectUid, $jobUid)
    {
        return $this->statusChangesAsyncWithHttpInfo($projectUid, $jobUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation statusChangesAsyncWithHttpInfo
     *
     * Get status changes
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statusChangesAsyncWithHttpInfo($projectUid, $jobUid)
    {
        $returnType = '\Memsource\Model\JobPartStatusChangesDto';
        $request = $this->statusChangesRequest($projectUid, $jobUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'statusChanges'
     *
     * @param  string $projectUid (required)
     * @param  string $jobUid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function statusChangesRequest($projectUid, $jobUid)
    {
        // verify the required parameter 'projectUid' is set
        if ($projectUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectUid when calling statusChanges'
            );
        }
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling statusChanges'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/statusChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($projectUid !== null) {
            $resourcePath = str_replace(
                '{' . 'projectUid' . '}',
                ObjectSerializer::toPathValue($projectUid),
                $resourcePath
            );
        }
        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadBilingualFile
     *
     * Upload bilingual file
     *
     * @param  \Memsource\Model\InputStream $body body (optional)
     * @param  string $format format (optional, default to MXLF)
     * @param  string $saveToTransMemory saveToTransMemory (optional, default to Confirmed)
     * @param  bool $setCompleted setCompleted (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\JobPartsDto
     */
    public function uploadBilingualFile($body = null, $format = 'MXLF', $saveToTransMemory = 'Confirmed', $setCompleted = 'false')
    {
        list($response) = $this->uploadBilingualFileWithHttpInfo($body, $format, $saveToTransMemory, $setCompleted);
        return $response;
    }

    /**
     * Operation uploadBilingualFileWithHttpInfo
     *
     * Upload bilingual file
     *
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $format (optional, default to MXLF)
     * @param  string $saveToTransMemory (optional, default to Confirmed)
     * @param  bool $setCompleted (optional, default to false)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\JobPartsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadBilingualFileWithHttpInfo($body = null, $format = 'MXLF', $saveToTransMemory = 'Confirmed', $setCompleted = 'false')
    {
        $returnType = '\Memsource\Model\JobPartsDto';
        $request = $this->uploadBilingualFileRequest($body, $format, $saveToTransMemory, $setCompleted);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\JobPartsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadBilingualFileAsync
     *
     * Upload bilingual file
     *
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $format (optional, default to MXLF)
     * @param  string $saveToTransMemory (optional, default to Confirmed)
     * @param  bool $setCompleted (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadBilingualFileAsync($body = null, $format = 'MXLF', $saveToTransMemory = 'Confirmed', $setCompleted = 'false')
    {
        return $this->uploadBilingualFileAsyncWithHttpInfo($body, $format, $saveToTransMemory, $setCompleted)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadBilingualFileAsyncWithHttpInfo
     *
     * Upload bilingual file
     *
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $format (optional, default to MXLF)
     * @param  string $saveToTransMemory (optional, default to Confirmed)
     * @param  bool $setCompleted (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadBilingualFileAsyncWithHttpInfo($body = null, $format = 'MXLF', $saveToTransMemory = 'Confirmed', $setCompleted = 'false')
    {
        $returnType = '\Memsource\Model\JobPartsDto';
        $request = $this->uploadBilingualFileRequest($body, $format, $saveToTransMemory, $setCompleted);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadBilingualFile'
     *
     * @param  \Memsource\Model\InputStream $body (optional)
     * @param  string $format (optional, default to MXLF)
     * @param  string $saveToTransMemory (optional, default to Confirmed)
     * @param  bool $setCompleted (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadBilingualFileRequest($body = null, $format = 'MXLF', $saveToTransMemory = 'Confirmed', $setCompleted = 'false')
    {

        $resourcePath = '/api2/v1/bilingualFiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($saveToTransMemory !== null) {
            $queryParams['saveToTransMemory'] = ObjectSerializer::toQueryValue($saveToTransMemory);
        }
        // query params
        if ($setCompleted !== null) {
            $queryParams['setCompleted'] = ObjectSerializer::toQueryValue($setCompleted);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wildCardSearchByJob
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Memsource\Model\SearchResponseListDto
     */
    public function wildCardSearchByJob($jobUid, $body = null)
    {
        list($response) = $this->wildCardSearchByJobWithHttpInfo($jobUid, $body);
        return $response;
    }

    /**
     * Operation wildCardSearchByJobWithHttpInfo
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \Memsource\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Memsource\Model\SearchResponseListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function wildCardSearchByJobWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->wildCardSearchByJobRequest($jobUid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Memsource\Model\SearchResponseListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wildCardSearchByJobAsync
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wildCardSearchByJobAsync($jobUid, $body = null)
    {
        return $this->wildCardSearchByJobAsyncWithHttpInfo($jobUid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wildCardSearchByJobAsyncWithHttpInfo
     *
     * Wildcard search job's translation memories
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wildCardSearchByJobAsyncWithHttpInfo($jobUid, $body = null)
    {
        $returnType = '\Memsource\Model\SearchResponseListDto';
        $request = $this->wildCardSearchByJobRequest($jobUid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wildCardSearchByJob'
     *
     * @param  string $jobUid (required)
     * @param  \Memsource\Model\WildCardSearchByProjectRequestDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wildCardSearchByJobRequest($jobUid, $body = null)
    {
        // verify the required parameter 'jobUid' is set
        if ($jobUid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobUid when calling wildCardSearchByJob'
            );
        }

        $resourcePath = '/api2/v1/projects/{projectUid}/jobs/{jobUid}/transMemories/wildCardSearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($jobUid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobUid' . '}',
                ObjectSerializer::toPathValue($jobUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
