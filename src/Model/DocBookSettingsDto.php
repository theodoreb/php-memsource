<?php
/**
 * DocBookSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * DocBookSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocBookSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocBookSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'includeTags' => 'string',
        'excludeTags' => 'string',
        'inlineTags' => 'string',
        'inlineTagsNonTranslatable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'includeTags' => null,
        'excludeTags' => null,
        'inlineTags' => null,
        'inlineTagsNonTranslatable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'includeTags' => 'includeTags',
        'excludeTags' => 'excludeTags',
        'inlineTags' => 'inlineTags',
        'inlineTagsNonTranslatable' => 'inlineTagsNonTranslatable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'includeTags' => 'setIncludeTags',
        'excludeTags' => 'setExcludeTags',
        'inlineTags' => 'setInlineTags',
        'inlineTagsNonTranslatable' => 'setInlineTagsNonTranslatable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'includeTags' => 'getIncludeTags',
        'excludeTags' => 'getExcludeTags',
        'inlineTags' => 'getInlineTags',
        'inlineTagsNonTranslatable' => 'getInlineTagsNonTranslatable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['includeTags'] = isset($data['includeTags']) ? $data['includeTags'] : null;
        $this->container['excludeTags'] = isset($data['excludeTags']) ? $data['excludeTags'] : null;
        $this->container['inlineTags'] = isset($data['inlineTags']) ? $data['inlineTags'] : null;
        $this->container['inlineTagsNonTranslatable'] = isset($data['inlineTagsNonTranslatable']) ? $data['inlineTagsNonTranslatable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets includeTags
     *
     * @return string
     */
    public function getIncludeTags()
    {
        return $this->container['includeTags'];
    }

    /**
     * Sets includeTags
     *
     * @param string $includeTags includeTags
     *
     * @return $this
     */
    public function setIncludeTags($includeTags)
    {
        $this->container['includeTags'] = $includeTags;

        return $this;
    }

    /**
     * Gets excludeTags
     *
     * @return string
     */
    public function getExcludeTags()
    {
        return $this->container['excludeTags'];
    }

    /**
     * Sets excludeTags
     *
     * @param string $excludeTags excludeTags
     *
     * @return $this
     */
    public function setExcludeTags($excludeTags)
    {
        $this->container['excludeTags'] = $excludeTags;

        return $this;
    }

    /**
     * Gets inlineTags
     *
     * @return string
     */
    public function getInlineTags()
    {
        return $this->container['inlineTags'];
    }

    /**
     * Sets inlineTags
     *
     * @param string $inlineTags inlineTags
     *
     * @return $this
     */
    public function setInlineTags($inlineTags)
    {
        $this->container['inlineTags'] = $inlineTags;

        return $this;
    }

    /**
     * Gets inlineTagsNonTranslatable
     *
     * @return string
     */
    public function getInlineTagsNonTranslatable()
    {
        return $this->container['inlineTagsNonTranslatable'];
    }

    /**
     * Sets inlineTagsNonTranslatable
     *
     * @param string $inlineTagsNonTranslatable inlineTagsNonTranslatable
     *
     * @return $this
     */
    public function setInlineTagsNonTranslatable($inlineTagsNonTranslatable)
    {
        $this->container['inlineTagsNonTranslatable'] = $inlineTagsNonTranslatable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


