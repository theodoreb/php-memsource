<?php
/**
 * LQAReferences
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * LQAReferences Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LQAReferences implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LQAReferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'taskId' => 'string',
        'transGroupId' => 'int',
        'segmentId' => 'string',
        'conversationTitle' => 'string',
        'lqa' => '\Memsource\Model\LQAReference[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'taskId' => null,
        'transGroupId' => 'int32',
        'segmentId' => null,
        'conversationTitle' => null,
        'lqa' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'taskId' => 'taskId',
        'transGroupId' => 'transGroupId',
        'segmentId' => 'segmentId',
        'conversationTitle' => 'conversationTitle',
        'lqa' => 'lqa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'taskId' => 'setTaskId',
        'transGroupId' => 'setTransGroupId',
        'segmentId' => 'setSegmentId',
        'conversationTitle' => 'setConversationTitle',
        'lqa' => 'setLqa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'taskId' => 'getTaskId',
        'transGroupId' => 'getTransGroupId',
        'segmentId' => 'getSegmentId',
        'conversationTitle' => 'getConversationTitle',
        'lqa' => 'getLqa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['taskId'] = isset($data['taskId']) ? $data['taskId'] : null;
        $this->container['transGroupId'] = isset($data['transGroupId']) ? $data['transGroupId'] : null;
        $this->container['segmentId'] = isset($data['segmentId']) ? $data['segmentId'] : null;
        $this->container['conversationTitle'] = isset($data['conversationTitle']) ? $data['conversationTitle'] : null;
        $this->container['lqa'] = isset($data['lqa']) ? $data['lqa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transGroupId'] === null) {
            $invalidProperties[] = "'transGroupId' can't be null";
        }
        if (($this->container['transGroupId'] < 0)) {
            $invalidProperties[] = "invalid value for 'transGroupId', must be bigger than or equal to 0.";
        }

        if ($this->container['segmentId'] === null) {
            $invalidProperties[] = "'segmentId' can't be null";
        }
        if ($this->container['lqa'] === null) {
            $invalidProperties[] = "'lqa' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['transGroupId'] === null) {
            return false;
        }
        if ($this->container['transGroupId'] < 0) {
            return false;
        }
        if ($this->container['segmentId'] === null) {
            return false;
        }
        if ($this->container['lqa'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets taskId
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['taskId'];
    }

    /**
     * Sets taskId
     *
     * @param string $taskId taskId
     *
     * @return $this
     */
    public function setTaskId($taskId)
    {
        $this->container['taskId'] = $taskId;

        return $this;
    }

    /**
     * Gets transGroupId
     *
     * @return int
     */
    public function getTransGroupId()
    {
        return $this->container['transGroupId'];
    }

    /**
     * Sets transGroupId
     *
     * @param int $transGroupId transGroupId
     *
     * @return $this
     */
    public function setTransGroupId($transGroupId)
    {

        if (($transGroupId < 0)) {
            throw new \InvalidArgumentException('invalid value for $transGroupId when calling LQAReferences., must be bigger than or equal to 0.');
        }

        $this->container['transGroupId'] = $transGroupId;

        return $this;
    }

    /**
     * Gets segmentId
     *
     * @return string
     */
    public function getSegmentId()
    {
        return $this->container['segmentId'];
    }

    /**
     * Sets segmentId
     *
     * @param string $segmentId segmentId
     *
     * @return $this
     */
    public function setSegmentId($segmentId)
    {
        $this->container['segmentId'] = $segmentId;

        return $this;
    }

    /**
     * Gets conversationTitle
     *
     * @return string
     */
    public function getConversationTitle()
    {
        return $this->container['conversationTitle'];
    }

    /**
     * Sets conversationTitle
     *
     * @param string $conversationTitle conversationTitle
     *
     * @return $this
     */
    public function setConversationTitle($conversationTitle)
    {
        $this->container['conversationTitle'] = $conversationTitle;

        return $this;
    }

    /**
     * Gets lqa
     *
     * @return \Memsource\Model\LQAReference[]
     */
    public function getLqa()
    {
        return $this->container['lqa'];
    }

    /**
     * Sets lqa
     *
     * @param \Memsource\Model\LQAReference[] $lqa lqa
     *
     * @return $this
     */
    public function setLqa($lqa)
    {
        $this->container['lqa'] = $lqa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


