<?php
/**
 * DocSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * DocSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comments' => 'bool',
        'index' => 'bool',
        'other' => 'bool',
        'tagRegexp' => 'string',
        'hyperlinkTarget' => 'bool',
        'joinSimilarRuns' => 'bool',
        'targetFont' => 'string',
        'properties' => 'bool',
        'hidden' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comments' => null,
        'index' => null,
        'other' => null,
        'tagRegexp' => null,
        'hyperlinkTarget' => null,
        'joinSimilarRuns' => null,
        'targetFont' => null,
        'properties' => null,
        'hidden' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comments' => 'comments',
        'index' => 'index',
        'other' => 'other',
        'tagRegexp' => 'tagRegexp',
        'hyperlinkTarget' => 'hyperlinkTarget',
        'joinSimilarRuns' => 'joinSimilarRuns',
        'targetFont' => 'targetFont',
        'properties' => 'properties',
        'hidden' => 'hidden'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comments' => 'setComments',
        'index' => 'setIndex',
        'other' => 'setOther',
        'tagRegexp' => 'setTagRegexp',
        'hyperlinkTarget' => 'setHyperlinkTarget',
        'joinSimilarRuns' => 'setJoinSimilarRuns',
        'targetFont' => 'setTargetFont',
        'properties' => 'setProperties',
        'hidden' => 'setHidden'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comments' => 'getComments',
        'index' => 'getIndex',
        'other' => 'getOther',
        'tagRegexp' => 'getTagRegexp',
        'hyperlinkTarget' => 'getHyperlinkTarget',
        'joinSimilarRuns' => 'getJoinSimilarRuns',
        'targetFont' => 'getTargetFont',
        'properties' => 'getProperties',
        'hidden' => 'getHidden'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['other'] = isset($data['other']) ? $data['other'] : null;
        $this->container['tagRegexp'] = isset($data['tagRegexp']) ? $data['tagRegexp'] : null;
        $this->container['hyperlinkTarget'] = isset($data['hyperlinkTarget']) ? $data['hyperlinkTarget'] : null;
        $this->container['joinSimilarRuns'] = isset($data['joinSimilarRuns']) ? $data['joinSimilarRuns'] : null;
        $this->container['targetFont'] = isset($data['targetFont']) ? $data['targetFont'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets comments
     *
     * @return bool
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param bool $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets index
     *
     * @return bool
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param bool $index default: true
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets other
     *
     * @return bool
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param bool $other other
     *
     * @return $this
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets tagRegexp
     *
     * @return string
     */
    public function getTagRegexp()
    {
        return $this->container['tagRegexp'];
    }

    /**
     * Sets tagRegexp
     *
     * @param string $tagRegexp tagRegexp
     *
     * @return $this
     */
    public function setTagRegexp($tagRegexp)
    {
        $this->container['tagRegexp'] = $tagRegexp;

        return $this;
    }

    /**
     * Gets hyperlinkTarget
     *
     * @return bool
     */
    public function getHyperlinkTarget()
    {
        return $this->container['hyperlinkTarget'];
    }

    /**
     * Sets hyperlinkTarget
     *
     * @param bool $hyperlinkTarget hyperlinkTarget
     *
     * @return $this
     */
    public function setHyperlinkTarget($hyperlinkTarget)
    {
        $this->container['hyperlinkTarget'] = $hyperlinkTarget;

        return $this;
    }

    /**
     * Gets joinSimilarRuns
     *
     * @return bool
     */
    public function getJoinSimilarRuns()
    {
        return $this->container['joinSimilarRuns'];
    }

    /**
     * Sets joinSimilarRuns
     *
     * @param bool $joinSimilarRuns joinSimilarRuns
     *
     * @return $this
     */
    public function setJoinSimilarRuns($joinSimilarRuns)
    {
        $this->container['joinSimilarRuns'] = $joinSimilarRuns;

        return $this;
    }

    /**
     * Gets targetFont
     *
     * @return string
     */
    public function getTargetFont()
    {
        return $this->container['targetFont'];
    }

    /**
     * Sets targetFont
     *
     * @param string $targetFont targetFont
     *
     * @return $this
     */
    public function setTargetFont($targetFont)
    {
        $this->container['targetFont'] = $targetFont;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return bool
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param bool $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


