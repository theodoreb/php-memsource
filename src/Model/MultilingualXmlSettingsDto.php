<?php
/**
 * MultilingualXmlSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * MultilingualXmlSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultilingualXmlSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MultilingualXmlSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'translatableElementsXPath' => 'string',
        'sourceElementsXPath' => 'string',
        'targetElementsXPaths' => 'map[string,string]',
        'inlineElementsNonTranslatableXPath' => 'string',
        'tagRegexp' => 'string',
        'segmentation' => 'bool',
        'htmlSubFilter' => 'bool',
        'contextKeyXPath' => 'string',
        'contextNoteXPath' => 'string',
        'maxLenXPath' => 'string',
        'preserveWhitespace' => 'bool',
        'preserveCharEntities' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'translatableElementsXPath' => null,
        'sourceElementsXPath' => null,
        'targetElementsXPaths' => null,
        'inlineElementsNonTranslatableXPath' => null,
        'tagRegexp' => null,
        'segmentation' => null,
        'htmlSubFilter' => null,
        'contextKeyXPath' => null,
        'contextNoteXPath' => null,
        'maxLenXPath' => null,
        'preserveWhitespace' => null,
        'preserveCharEntities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'translatableElementsXPath' => 'translatableElementsXPath',
        'sourceElementsXPath' => 'sourceElementsXPath',
        'targetElementsXPaths' => 'targetElementsXPaths',
        'inlineElementsNonTranslatableXPath' => 'inlineElementsNonTranslatableXPath',
        'tagRegexp' => 'tagRegexp',
        'segmentation' => 'segmentation',
        'htmlSubFilter' => 'htmlSubFilter',
        'contextKeyXPath' => 'contextKeyXPath',
        'contextNoteXPath' => 'contextNoteXPath',
        'maxLenXPath' => 'maxLenXPath',
        'preserveWhitespace' => 'preserveWhitespace',
        'preserveCharEntities' => 'preserveCharEntities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'translatableElementsXPath' => 'setTranslatableElementsXPath',
        'sourceElementsXPath' => 'setSourceElementsXPath',
        'targetElementsXPaths' => 'setTargetElementsXPaths',
        'inlineElementsNonTranslatableXPath' => 'setInlineElementsNonTranslatableXPath',
        'tagRegexp' => 'setTagRegexp',
        'segmentation' => 'setSegmentation',
        'htmlSubFilter' => 'setHtmlSubFilter',
        'contextKeyXPath' => 'setContextKeyXPath',
        'contextNoteXPath' => 'setContextNoteXPath',
        'maxLenXPath' => 'setMaxLenXPath',
        'preserveWhitespace' => 'setPreserveWhitespace',
        'preserveCharEntities' => 'setPreserveCharEntities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'translatableElementsXPath' => 'getTranslatableElementsXPath',
        'sourceElementsXPath' => 'getSourceElementsXPath',
        'targetElementsXPaths' => 'getTargetElementsXPaths',
        'inlineElementsNonTranslatableXPath' => 'getInlineElementsNonTranslatableXPath',
        'tagRegexp' => 'getTagRegexp',
        'segmentation' => 'getSegmentation',
        'htmlSubFilter' => 'getHtmlSubFilter',
        'contextKeyXPath' => 'getContextKeyXPath',
        'contextNoteXPath' => 'getContextNoteXPath',
        'maxLenXPath' => 'getMaxLenXPath',
        'preserveWhitespace' => 'getPreserveWhitespace',
        'preserveCharEntities' => 'getPreserveCharEntities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['translatableElementsXPath'] = isset($data['translatableElementsXPath']) ? $data['translatableElementsXPath'] : null;
        $this->container['sourceElementsXPath'] = isset($data['sourceElementsXPath']) ? $data['sourceElementsXPath'] : null;
        $this->container['targetElementsXPaths'] = isset($data['targetElementsXPaths']) ? $data['targetElementsXPaths'] : null;
        $this->container['inlineElementsNonTranslatableXPath'] = isset($data['inlineElementsNonTranslatableXPath']) ? $data['inlineElementsNonTranslatableXPath'] : null;
        $this->container['tagRegexp'] = isset($data['tagRegexp']) ? $data['tagRegexp'] : null;
        $this->container['segmentation'] = isset($data['segmentation']) ? $data['segmentation'] : null;
        $this->container['htmlSubFilter'] = isset($data['htmlSubFilter']) ? $data['htmlSubFilter'] : null;
        $this->container['contextKeyXPath'] = isset($data['contextKeyXPath']) ? $data['contextKeyXPath'] : null;
        $this->container['contextNoteXPath'] = isset($data['contextNoteXPath']) ? $data['contextNoteXPath'] : null;
        $this->container['maxLenXPath'] = isset($data['maxLenXPath']) ? $data['maxLenXPath'] : null;
        $this->container['preserveWhitespace'] = isset($data['preserveWhitespace']) ? $data['preserveWhitespace'] : null;
        $this->container['preserveCharEntities'] = isset($data['preserveCharEntities']) ? $data['preserveCharEntities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets translatableElementsXPath
     *
     * @return string
     */
    public function getTranslatableElementsXPath()
    {
        return $this->container['translatableElementsXPath'];
    }

    /**
     * Sets translatableElementsXPath
     *
     * @param string $translatableElementsXPath translatableElementsXPath
     *
     * @return $this
     */
    public function setTranslatableElementsXPath($translatableElementsXPath)
    {
        $this->container['translatableElementsXPath'] = $translatableElementsXPath;

        return $this;
    }

    /**
     * Gets sourceElementsXPath
     *
     * @return string
     */
    public function getSourceElementsXPath()
    {
        return $this->container['sourceElementsXPath'];
    }

    /**
     * Sets sourceElementsXPath
     *
     * @param string $sourceElementsXPath sourceElementsXPath
     *
     * @return $this
     */
    public function setSourceElementsXPath($sourceElementsXPath)
    {
        $this->container['sourceElementsXPath'] = $sourceElementsXPath;

        return $this;
    }

    /**
     * Gets targetElementsXPaths
     *
     * @return map[string,string]
     */
    public function getTargetElementsXPaths()
    {
        return $this->container['targetElementsXPaths'];
    }

    /**
     * Sets targetElementsXPaths
     *
     * @param map[string,string] $targetElementsXPaths format: \"language\":\"xpath\";          example: {\"en\": \"tuv[@lang='en']/seg\", \"sk\": \"tuv[@lang='sk']/seg\"}
     *
     * @return $this
     */
    public function setTargetElementsXPaths($targetElementsXPaths)
    {
        $this->container['targetElementsXPaths'] = $targetElementsXPaths;

        return $this;
    }

    /**
     * Gets inlineElementsNonTranslatableXPath
     *
     * @return string
     */
    public function getInlineElementsNonTranslatableXPath()
    {
        return $this->container['inlineElementsNonTranslatableXPath'];
    }

    /**
     * Sets inlineElementsNonTranslatableXPath
     *
     * @param string $inlineElementsNonTranslatableXPath inlineElementsNonTranslatableXPath
     *
     * @return $this
     */
    public function setInlineElementsNonTranslatableXPath($inlineElementsNonTranslatableXPath)
    {
        $this->container['inlineElementsNonTranslatableXPath'] = $inlineElementsNonTranslatableXPath;

        return $this;
    }

    /**
     * Gets tagRegexp
     *
     * @return string
     */
    public function getTagRegexp()
    {
        return $this->container['tagRegexp'];
    }

    /**
     * Sets tagRegexp
     *
     * @param string $tagRegexp tagRegexp
     *
     * @return $this
     */
    public function setTagRegexp($tagRegexp)
    {
        $this->container['tagRegexp'] = $tagRegexp;

        return $this;
    }

    /**
     * Gets segmentation
     *
     * @return bool
     */
    public function getSegmentation()
    {
        return $this->container['segmentation'];
    }

    /**
     * Sets segmentation
     *
     * @param bool $segmentation default: true
     *
     * @return $this
     */
    public function setSegmentation($segmentation)
    {
        $this->container['segmentation'] = $segmentation;

        return $this;
    }

    /**
     * Gets htmlSubFilter
     *
     * @return bool
     */
    public function getHtmlSubFilter()
    {
        return $this->container['htmlSubFilter'];
    }

    /**
     * Sets htmlSubFilter
     *
     * @param bool $htmlSubFilter htmlSubFilter
     *
     * @return $this
     */
    public function setHtmlSubFilter($htmlSubFilter)
    {
        $this->container['htmlSubFilter'] = $htmlSubFilter;

        return $this;
    }

    /**
     * Gets contextKeyXPath
     *
     * @return string
     */
    public function getContextKeyXPath()
    {
        return $this->container['contextKeyXPath'];
    }

    /**
     * Sets contextKeyXPath
     *
     * @param string $contextKeyXPath contextKeyXPath
     *
     * @return $this
     */
    public function setContextKeyXPath($contextKeyXPath)
    {
        $this->container['contextKeyXPath'] = $contextKeyXPath;

        return $this;
    }

    /**
     * Gets contextNoteXPath
     *
     * @return string
     */
    public function getContextNoteXPath()
    {
        return $this->container['contextNoteXPath'];
    }

    /**
     * Sets contextNoteXPath
     *
     * @param string $contextNoteXPath contextNoteXPath
     *
     * @return $this
     */
    public function setContextNoteXPath($contextNoteXPath)
    {
        $this->container['contextNoteXPath'] = $contextNoteXPath;

        return $this;
    }

    /**
     * Gets maxLenXPath
     *
     * @return string
     */
    public function getMaxLenXPath()
    {
        return $this->container['maxLenXPath'];
    }

    /**
     * Sets maxLenXPath
     *
     * @param string $maxLenXPath maxLenXPath
     *
     * @return $this
     */
    public function setMaxLenXPath($maxLenXPath)
    {
        $this->container['maxLenXPath'] = $maxLenXPath;

        return $this;
    }

    /**
     * Gets preserveWhitespace
     *
     * @return bool
     */
    public function getPreserveWhitespace()
    {
        return $this->container['preserveWhitespace'];
    }

    /**
     * Sets preserveWhitespace
     *
     * @param bool $preserveWhitespace preserveWhitespace
     *
     * @return $this
     */
    public function setPreserveWhitespace($preserveWhitespace)
    {
        $this->container['preserveWhitespace'] = $preserveWhitespace;

        return $this;
    }

    /**
     * Gets preserveCharEntities
     *
     * @return string
     */
    public function getPreserveCharEntities()
    {
        return $this->container['preserveCharEntities'];
    }

    /**
     * Sets preserveCharEntities
     *
     * @param string $preserveCharEntities preserveCharEntities
     *
     * @return $this
     */
    public function setPreserveCharEntities($preserveCharEntities)
    {
        $this->container['preserveCharEntities'] = $preserveCharEntities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


