<?php
/**
 * MachineTranslateSettingsPbmDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * MachineTranslateSettingsPbmDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MachineTranslateSettingsPbmDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MachineTranslateSettingsPbmDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'baseName' => 'string',
        'name' => 'string',
        'type' => 'string',
        'default_' => 'bool',
        'includeTags' => 'bool',
        'args' => 'map[string,string]',
        'payForMtPossible' => 'bool',
        'payForMtActive' => 'bool',
        'charCount' => 'int',
        'sharingSettings' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'baseName' => null,
        'name' => null,
        'type' => null,
        'default_' => null,
        'includeTags' => null,
        'args' => null,
        'payForMtPossible' => null,
        'payForMtActive' => null,
        'charCount' => 'int32',
        'sharingSettings' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'baseName' => 'baseName',
        'name' => 'name',
        'type' => 'type',
        'default_' => 'default_',
        'includeTags' => 'includeTags',
        'args' => 'args',
        'payForMtPossible' => 'payForMtPossible',
        'payForMtActive' => 'payForMtActive',
        'charCount' => 'charCount',
        'sharingSettings' => 'sharingSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'baseName' => 'setBaseName',
        'name' => 'setName',
        'type' => 'setType',
        'default_' => 'setDefault_',
        'includeTags' => 'setIncludeTags',
        'args' => 'setArgs',
        'payForMtPossible' => 'setPayForMtPossible',
        'payForMtActive' => 'setPayForMtActive',
        'charCount' => 'setCharCount',
        'sharingSettings' => 'setSharingSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'baseName' => 'getBaseName',
        'name' => 'getName',
        'type' => 'getType',
        'default_' => 'getDefault_',
        'includeTags' => 'getIncludeTags',
        'args' => 'getArgs',
        'payForMtPossible' => 'getPayForMtPossible',
        'payForMtActive' => 'getPayForMtActive',
        'charCount' => 'getCharCount',
        'sharingSettings' => 'getSharingSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['baseName'] = isset($data['baseName']) ? $data['baseName'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['default_'] = isset($data['default_']) ? $data['default_'] : null;
        $this->container['includeTags'] = isset($data['includeTags']) ? $data['includeTags'] : null;
        $this->container['args'] = isset($data['args']) ? $data['args'] : null;
        $this->container['payForMtPossible'] = isset($data['payForMtPossible']) ? $data['payForMtPossible'] : null;
        $this->container['payForMtActive'] = isset($data['payForMtActive']) ? $data['payForMtActive'] : null;
        $this->container['charCount'] = isset($data['charCount']) ? $data['charCount'] : null;
        $this->container['sharingSettings'] = isset($data['sharingSettings']) ? $data['sharingSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets baseName
     *
     * @return string
     */
    public function getBaseName()
    {
        return $this->container['baseName'];
    }

    /**
     * Sets baseName
     *
     * @param string $baseName baseName
     *
     * @return $this
     */
    public function setBaseName($baseName)
    {
        $this->container['baseName'] = $baseName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets default_
     *
     * @return bool
     */
    public function getDefault_()
    {
        return $this->container['default_'];
    }

    /**
     * Sets default_
     *
     * @param bool $default_ default_
     *
     * @return $this
     */
    public function setDefault_($default_)
    {
        $this->container['default_'] = $default_;

        return $this;
    }

    /**
     * Gets includeTags
     *
     * @return bool
     */
    public function getIncludeTags()
    {
        return $this->container['includeTags'];
    }

    /**
     * Sets includeTags
     *
     * @param bool $includeTags includeTags
     *
     * @return $this
     */
    public function setIncludeTags($includeTags)
    {
        $this->container['includeTags'] = $includeTags;

        return $this;
    }

    /**
     * Gets args
     *
     * @return map[string,string]
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param map[string,string] $args args
     *
     * @return $this
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets payForMtPossible
     *
     * @return bool
     */
    public function getPayForMtPossible()
    {
        return $this->container['payForMtPossible'];
    }

    /**
     * Sets payForMtPossible
     *
     * @param bool $payForMtPossible payForMtPossible
     *
     * @return $this
     */
    public function setPayForMtPossible($payForMtPossible)
    {
        $this->container['payForMtPossible'] = $payForMtPossible;

        return $this;
    }

    /**
     * Gets payForMtActive
     *
     * @return bool
     */
    public function getPayForMtActive()
    {
        return $this->container['payForMtActive'];
    }

    /**
     * Sets payForMtActive
     *
     * @param bool $payForMtActive payForMtActive
     *
     * @return $this
     */
    public function setPayForMtActive($payForMtActive)
    {
        $this->container['payForMtActive'] = $payForMtActive;

        return $this;
    }

    /**
     * Gets charCount
     *
     * @return int
     */
    public function getCharCount()
    {
        return $this->container['charCount'];
    }

    /**
     * Sets charCount
     *
     * @param int $charCount charCount
     *
     * @return $this
     */
    public function setCharCount($charCount)
    {
        $this->container['charCount'] = $charCount;

        return $this;
    }

    /**
     * Gets sharingSettings
     *
     * @return int
     */
    public function getSharingSettings()
    {
        return $this->container['sharingSettings'];
    }

    /**
     * Sets sharingSettings
     *
     * @param int $sharingSettings sharingSettings
     *
     * @return $this
     */
    public function setSharingSettings($sharingSettings)
    {
        $this->container['sharingSettings'] = $sharingSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


