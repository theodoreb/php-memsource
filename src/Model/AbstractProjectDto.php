<?php
/**
 * AbstractProjectDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * AbstractProjectDto Class Doc Comment
 *
 * @category Class
 * @description Base projectDto
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AbstractProjectDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = 'userRole';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AbstractProjectDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'string',
        'internalId' => 'int',
        'id' => 'string',
        'name' => 'string',
        'dateCreated' => '\DateTime',
        'domain' => '\Memsource\Model\DomainReference',
        'subDomain' => '\Memsource\Model\SubDomainReference',
        'owner' => '\Memsource\Model\UserReference',
        'sourceLang' => 'string',
        'targetLangs' => 'string[]',
        'references' => '\Memsource\Model\ReferenceFileReference[]',
        'userRole' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
        'internalId' => 'int32',
        'id' => null,
        'name' => null,
        'dateCreated' => 'date-time',
        'domain' => null,
        'subDomain' => null,
        'owner' => null,
        'sourceLang' => null,
        'targetLangs' => null,
        'references' => null,
        'userRole' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
        'internalId' => 'internalId',
        'id' => 'id',
        'name' => 'name',
        'dateCreated' => 'dateCreated',
        'domain' => 'domain',
        'subDomain' => 'subDomain',
        'owner' => 'owner',
        'sourceLang' => 'sourceLang',
        'targetLangs' => 'targetLangs',
        'references' => 'references',
        'userRole' => 'userRole'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'internalId' => 'setInternalId',
        'id' => 'setId',
        'name' => 'setName',
        'dateCreated' => 'setDateCreated',
        'domain' => 'setDomain',
        'subDomain' => 'setSubDomain',
        'owner' => 'setOwner',
        'sourceLang' => 'setSourceLang',
        'targetLangs' => 'setTargetLangs',
        'references' => 'setReferences',
        'userRole' => 'setUserRole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'internalId' => 'getInternalId',
        'id' => 'getId',
        'name' => 'getName',
        'dateCreated' => 'getDateCreated',
        'domain' => 'getDomain',
        'subDomain' => 'getSubDomain',
        'owner' => 'getOwner',
        'sourceLang' => 'getSourceLang',
        'targetLangs' => 'getTargetLangs',
        'references' => 'getReferences',
        'userRole' => 'getUserRole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['internalId'] = isset($data['internalId']) ? $data['internalId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['subDomain'] = isset($data['subDomain']) ? $data['subDomain'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['sourceLang'] = isset($data['sourceLang']) ? $data['sourceLang'] : null;
        $this->container['targetLangs'] = isset($data['targetLangs']) ? $data['targetLangs'] : null;
        $this->container['references'] = isset($data['references']) ? $data['references'] : null;
        $this->container['userRole'] = isset($data['userRole']) ? $data['userRole'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('userRole', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets internalId
     *
     * @return int
     */
    public function getInternalId()
    {
        return $this->container['internalId'];
    }

    /**
     * Sets internalId
     *
     * @param int $internalId internalId
     *
     * @return $this
     */
    public function setInternalId($internalId)
    {
        $this->container['internalId'] = $internalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Memsource\Model\DomainReference
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Memsource\Model\DomainReference $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets subDomain
     *
     * @return \Memsource\Model\SubDomainReference
     */
    public function getSubDomain()
    {
        return $this->container['subDomain'];
    }

    /**
     * Sets subDomain
     *
     * @param \Memsource\Model\SubDomainReference $subDomain subDomain
     *
     * @return $this
     */
    public function setSubDomain($subDomain)
    {
        $this->container['subDomain'] = $subDomain;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Memsource\Model\UserReference
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Memsource\Model\UserReference $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets sourceLang
     *
     * @return string
     */
    public function getSourceLang()
    {
        return $this->container['sourceLang'];
    }

    /**
     * Sets sourceLang
     *
     * @param string $sourceLang sourceLang
     *
     * @return $this
     */
    public function setSourceLang($sourceLang)
    {
        $this->container['sourceLang'] = $sourceLang;

        return $this;
    }

    /**
     * Gets targetLangs
     *
     * @return string[]
     */
    public function getTargetLangs()
    {
        return $this->container['targetLangs'];
    }

    /**
     * Sets targetLangs
     *
     * @param string[] $targetLangs targetLangs
     *
     * @return $this
     */
    public function setTargetLangs($targetLangs)
    {
        $this->container['targetLangs'] = $targetLangs;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \Memsource\Model\ReferenceFileReference[]
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \Memsource\Model\ReferenceFileReference[] $references references
     *
     * @return $this
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets userRole
     *
     * @return string
     */
    public function getUserRole()
    {
        return $this->container['userRole'];
    }

    /**
     * Sets userRole
     *
     * @param string $userRole Response differs based on user's role
     *
     * @return $this
     */
    public function setUserRole($userRole)
    {
        $this->container['userRole'] = $userRole;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


