<?php
/**
 * EditQASettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * EditQASettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EditQASettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EditQASettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'emptyTranslation' => 'bool',
        'inconsistentTranslation' => 'bool',
        'joinTags' => 'bool',
        'missingNumbers' => 'bool',
        'segmentNotConfirmed' => 'bool',
        'terminology' => 'bool',
        'multipleSpaces' => 'bool',
        'trailingSpace' => 'bool',
        'trailingPunctuation' => 'bool',
        'targetLengthMax' => 'int',
        'formatting' => 'bool',
        'unresolvedComment' => 'bool',
        'emptyPairTags' => 'bool',
        'strictJobStatus' => 'bool',
        'forbiddenStrings' => 'string[]',
        'excludeLockedSegments' => 'bool',
        'ignoreNotApprovedTerms' => 'bool',
        'spellCheck' => 'bool',
        'repeatedWords' => 'bool',
        'inconsistentTagContent' => 'bool',
        'emptyTagContent' => 'bool',
        'xliffTags' => 'bool',
        'forbiddenTerms' => 'bool',
        'targetLengthPercent' => 'double',
        'targetLengthPerSegment' => 'bool',
        'newerAtPrecedingWorkflowStep' => 'bool',
        'leadingAndTrailingSpaces' => 'bool',
        'moraviaQA' => '\Memsource\Model\MoraviaQADto',
        'regexp' => '\Memsource\Model\RegexpCheckDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'emptyTranslation' => null,
        'inconsistentTranslation' => null,
        'joinTags' => null,
        'missingNumbers' => null,
        'segmentNotConfirmed' => null,
        'terminology' => null,
        'multipleSpaces' => null,
        'trailingSpace' => null,
        'trailingPunctuation' => null,
        'targetLengthMax' => 'int32',
        'formatting' => null,
        'unresolvedComment' => null,
        'emptyPairTags' => null,
        'strictJobStatus' => null,
        'forbiddenStrings' => null,
        'excludeLockedSegments' => null,
        'ignoreNotApprovedTerms' => null,
        'spellCheck' => null,
        'repeatedWords' => null,
        'inconsistentTagContent' => null,
        'emptyTagContent' => null,
        'xliffTags' => null,
        'forbiddenTerms' => null,
        'targetLengthPercent' => 'double',
        'targetLengthPerSegment' => null,
        'newerAtPrecedingWorkflowStep' => null,
        'leadingAndTrailingSpaces' => null,
        'moraviaQA' => null,
        'regexp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'emptyTranslation' => 'emptyTranslation',
        'inconsistentTranslation' => 'inconsistentTranslation',
        'joinTags' => 'joinTags',
        'missingNumbers' => 'missingNumbers',
        'segmentNotConfirmed' => 'segmentNotConfirmed',
        'terminology' => 'terminology',
        'multipleSpaces' => 'multipleSpaces',
        'trailingSpace' => 'trailingSpace',
        'trailingPunctuation' => 'trailingPunctuation',
        'targetLengthMax' => 'targetLengthMax',
        'formatting' => 'formatting',
        'unresolvedComment' => 'unresolvedComment',
        'emptyPairTags' => 'emptyPairTags',
        'strictJobStatus' => 'strictJobStatus',
        'forbiddenStrings' => 'forbiddenStrings',
        'excludeLockedSegments' => 'excludeLockedSegments',
        'ignoreNotApprovedTerms' => 'ignoreNotApprovedTerms',
        'spellCheck' => 'spellCheck',
        'repeatedWords' => 'repeatedWords',
        'inconsistentTagContent' => 'inconsistentTagContent',
        'emptyTagContent' => 'emptyTagContent',
        'xliffTags' => 'xliffTags',
        'forbiddenTerms' => 'forbiddenTerms',
        'targetLengthPercent' => 'targetLengthPercent',
        'targetLengthPerSegment' => 'targetLengthPerSegment',
        'newerAtPrecedingWorkflowStep' => 'newerAtPrecedingWorkflowStep',
        'leadingAndTrailingSpaces' => 'leadingAndTrailingSpaces',
        'moraviaQA' => 'moraviaQA',
        'regexp' => 'regexp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'emptyTranslation' => 'setEmptyTranslation',
        'inconsistentTranslation' => 'setInconsistentTranslation',
        'joinTags' => 'setJoinTags',
        'missingNumbers' => 'setMissingNumbers',
        'segmentNotConfirmed' => 'setSegmentNotConfirmed',
        'terminology' => 'setTerminology',
        'multipleSpaces' => 'setMultipleSpaces',
        'trailingSpace' => 'setTrailingSpace',
        'trailingPunctuation' => 'setTrailingPunctuation',
        'targetLengthMax' => 'setTargetLengthMax',
        'formatting' => 'setFormatting',
        'unresolvedComment' => 'setUnresolvedComment',
        'emptyPairTags' => 'setEmptyPairTags',
        'strictJobStatus' => 'setStrictJobStatus',
        'forbiddenStrings' => 'setForbiddenStrings',
        'excludeLockedSegments' => 'setExcludeLockedSegments',
        'ignoreNotApprovedTerms' => 'setIgnoreNotApprovedTerms',
        'spellCheck' => 'setSpellCheck',
        'repeatedWords' => 'setRepeatedWords',
        'inconsistentTagContent' => 'setInconsistentTagContent',
        'emptyTagContent' => 'setEmptyTagContent',
        'xliffTags' => 'setXliffTags',
        'forbiddenTerms' => 'setForbiddenTerms',
        'targetLengthPercent' => 'setTargetLengthPercent',
        'targetLengthPerSegment' => 'setTargetLengthPerSegment',
        'newerAtPrecedingWorkflowStep' => 'setNewerAtPrecedingWorkflowStep',
        'leadingAndTrailingSpaces' => 'setLeadingAndTrailingSpaces',
        'moraviaQA' => 'setMoraviaQA',
        'regexp' => 'setRegexp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'emptyTranslation' => 'getEmptyTranslation',
        'inconsistentTranslation' => 'getInconsistentTranslation',
        'joinTags' => 'getJoinTags',
        'missingNumbers' => 'getMissingNumbers',
        'segmentNotConfirmed' => 'getSegmentNotConfirmed',
        'terminology' => 'getTerminology',
        'multipleSpaces' => 'getMultipleSpaces',
        'trailingSpace' => 'getTrailingSpace',
        'trailingPunctuation' => 'getTrailingPunctuation',
        'targetLengthMax' => 'getTargetLengthMax',
        'formatting' => 'getFormatting',
        'unresolvedComment' => 'getUnresolvedComment',
        'emptyPairTags' => 'getEmptyPairTags',
        'strictJobStatus' => 'getStrictJobStatus',
        'forbiddenStrings' => 'getForbiddenStrings',
        'excludeLockedSegments' => 'getExcludeLockedSegments',
        'ignoreNotApprovedTerms' => 'getIgnoreNotApprovedTerms',
        'spellCheck' => 'getSpellCheck',
        'repeatedWords' => 'getRepeatedWords',
        'inconsistentTagContent' => 'getInconsistentTagContent',
        'emptyTagContent' => 'getEmptyTagContent',
        'xliffTags' => 'getXliffTags',
        'forbiddenTerms' => 'getForbiddenTerms',
        'targetLengthPercent' => 'getTargetLengthPercent',
        'targetLengthPerSegment' => 'getTargetLengthPerSegment',
        'newerAtPrecedingWorkflowStep' => 'getNewerAtPrecedingWorkflowStep',
        'leadingAndTrailingSpaces' => 'getLeadingAndTrailingSpaces',
        'moraviaQA' => 'getMoraviaQA',
        'regexp' => 'getRegexp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['emptyTranslation'] = isset($data['emptyTranslation']) ? $data['emptyTranslation'] : null;
        $this->container['inconsistentTranslation'] = isset($data['inconsistentTranslation']) ? $data['inconsistentTranslation'] : null;
        $this->container['joinTags'] = isset($data['joinTags']) ? $data['joinTags'] : null;
        $this->container['missingNumbers'] = isset($data['missingNumbers']) ? $data['missingNumbers'] : null;
        $this->container['segmentNotConfirmed'] = isset($data['segmentNotConfirmed']) ? $data['segmentNotConfirmed'] : null;
        $this->container['terminology'] = isset($data['terminology']) ? $data['terminology'] : null;
        $this->container['multipleSpaces'] = isset($data['multipleSpaces']) ? $data['multipleSpaces'] : null;
        $this->container['trailingSpace'] = isset($data['trailingSpace']) ? $data['trailingSpace'] : null;
        $this->container['trailingPunctuation'] = isset($data['trailingPunctuation']) ? $data['trailingPunctuation'] : null;
        $this->container['targetLengthMax'] = isset($data['targetLengthMax']) ? $data['targetLengthMax'] : null;
        $this->container['formatting'] = isset($data['formatting']) ? $data['formatting'] : null;
        $this->container['unresolvedComment'] = isset($data['unresolvedComment']) ? $data['unresolvedComment'] : null;
        $this->container['emptyPairTags'] = isset($data['emptyPairTags']) ? $data['emptyPairTags'] : null;
        $this->container['strictJobStatus'] = isset($data['strictJobStatus']) ? $data['strictJobStatus'] : null;
        $this->container['forbiddenStrings'] = isset($data['forbiddenStrings']) ? $data['forbiddenStrings'] : null;
        $this->container['excludeLockedSegments'] = isset($data['excludeLockedSegments']) ? $data['excludeLockedSegments'] : null;
        $this->container['ignoreNotApprovedTerms'] = isset($data['ignoreNotApprovedTerms']) ? $data['ignoreNotApprovedTerms'] : null;
        $this->container['spellCheck'] = isset($data['spellCheck']) ? $data['spellCheck'] : null;
        $this->container['repeatedWords'] = isset($data['repeatedWords']) ? $data['repeatedWords'] : null;
        $this->container['inconsistentTagContent'] = isset($data['inconsistentTagContent']) ? $data['inconsistentTagContent'] : null;
        $this->container['emptyTagContent'] = isset($data['emptyTagContent']) ? $data['emptyTagContent'] : null;
        $this->container['xliffTags'] = isset($data['xliffTags']) ? $data['xliffTags'] : null;
        $this->container['forbiddenTerms'] = isset($data['forbiddenTerms']) ? $data['forbiddenTerms'] : null;
        $this->container['targetLengthPercent'] = isset($data['targetLengthPercent']) ? $data['targetLengthPercent'] : null;
        $this->container['targetLengthPerSegment'] = isset($data['targetLengthPerSegment']) ? $data['targetLengthPerSegment'] : null;
        $this->container['newerAtPrecedingWorkflowStep'] = isset($data['newerAtPrecedingWorkflowStep']) ? $data['newerAtPrecedingWorkflowStep'] : null;
        $this->container['leadingAndTrailingSpaces'] = isset($data['leadingAndTrailingSpaces']) ? $data['leadingAndTrailingSpaces'] : null;
        $this->container['moraviaQA'] = isset($data['moraviaQA']) ? $data['moraviaQA'] : null;
        $this->container['regexp'] = isset($data['regexp']) ? $data['regexp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['targetLengthMax']) && ($this->container['targetLengthMax'] < 0)) {
            $invalidProperties[] = "invalid value for 'targetLengthMax', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['targetLengthPercent']) && ($this->container['targetLengthPercent'] < 0)) {
            $invalidProperties[] = "invalid value for 'targetLengthPercent', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['targetLengthMax'] < 0) {
            return false;
        }
        if ($this->container['targetLengthPercent'] < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets emptyTranslation
     *
     * @return bool
     */
    public function getEmptyTranslation()
    {
        return $this->container['emptyTranslation'];
    }

    /**
     * Sets emptyTranslation
     *
     * @param bool $emptyTranslation default value: false
     *
     * @return $this
     */
    public function setEmptyTranslation($emptyTranslation)
    {
        $this->container['emptyTranslation'] = $emptyTranslation;

        return $this;
    }

    /**
     * Gets inconsistentTranslation
     *
     * @return bool
     */
    public function getInconsistentTranslation()
    {
        return $this->container['inconsistentTranslation'];
    }

    /**
     * Sets inconsistentTranslation
     *
     * @param bool $inconsistentTranslation default value: false
     *
     * @return $this
     */
    public function setInconsistentTranslation($inconsistentTranslation)
    {
        $this->container['inconsistentTranslation'] = $inconsistentTranslation;

        return $this;
    }

    /**
     * Gets joinTags
     *
     * @return bool
     */
    public function getJoinTags()
    {
        return $this->container['joinTags'];
    }

    /**
     * Sets joinTags
     *
     * @param bool $joinTags default value: false
     *
     * @return $this
     */
    public function setJoinTags($joinTags)
    {
        $this->container['joinTags'] = $joinTags;

        return $this;
    }

    /**
     * Gets missingNumbers
     *
     * @return bool
     */
    public function getMissingNumbers()
    {
        return $this->container['missingNumbers'];
    }

    /**
     * Sets missingNumbers
     *
     * @param bool $missingNumbers default value: false
     *
     * @return $this
     */
    public function setMissingNumbers($missingNumbers)
    {
        $this->container['missingNumbers'] = $missingNumbers;

        return $this;
    }

    /**
     * Gets segmentNotConfirmed
     *
     * @return bool
     */
    public function getSegmentNotConfirmed()
    {
        return $this->container['segmentNotConfirmed'];
    }

    /**
     * Sets segmentNotConfirmed
     *
     * @param bool $segmentNotConfirmed default value: false
     *
     * @return $this
     */
    public function setSegmentNotConfirmed($segmentNotConfirmed)
    {
        $this->container['segmentNotConfirmed'] = $segmentNotConfirmed;

        return $this;
    }

    /**
     * Gets terminology
     *
     * @return bool
     */
    public function getTerminology()
    {
        return $this->container['terminology'];
    }

    /**
     * Sets terminology
     *
     * @param bool $terminology default value: false
     *
     * @return $this
     */
    public function setTerminology($terminology)
    {
        $this->container['terminology'] = $terminology;

        return $this;
    }

    /**
     * Gets multipleSpaces
     *
     * @return bool
     */
    public function getMultipleSpaces()
    {
        return $this->container['multipleSpaces'];
    }

    /**
     * Sets multipleSpaces
     *
     * @param bool $multipleSpaces default value: false
     *
     * @return $this
     */
    public function setMultipleSpaces($multipleSpaces)
    {
        $this->container['multipleSpaces'] = $multipleSpaces;

        return $this;
    }

    /**
     * Gets trailingSpace
     *
     * @return bool
     */
    public function getTrailingSpace()
    {
        return $this->container['trailingSpace'];
    }

    /**
     * Sets trailingSpace
     *
     * @param bool $trailingSpace default value: false
     *
     * @return $this
     */
    public function setTrailingSpace($trailingSpace)
    {
        $this->container['trailingSpace'] = $trailingSpace;

        return $this;
    }

    /**
     * Gets trailingPunctuation
     *
     * @return bool
     */
    public function getTrailingPunctuation()
    {
        return $this->container['trailingPunctuation'];
    }

    /**
     * Sets trailingPunctuation
     *
     * @param bool $trailingPunctuation default value: false
     *
     * @return $this
     */
    public function setTrailingPunctuation($trailingPunctuation)
    {
        $this->container['trailingPunctuation'] = $trailingPunctuation;

        return $this;
    }

    /**
     * Gets targetLengthMax
     *
     * @return int
     */
    public function getTargetLengthMax()
    {
        return $this->container['targetLengthMax'];
    }

    /**
     * Sets targetLengthMax
     *
     * @param int $targetLengthMax targetLengthMax
     *
     * @return $this
     */
    public function setTargetLengthMax($targetLengthMax)
    {

        if (!is_null($targetLengthMax) && ($targetLengthMax < 0)) {
            throw new \InvalidArgumentException('invalid value for $targetLengthMax when calling EditQASettingsDto., must be bigger than or equal to 0.');
        }

        $this->container['targetLengthMax'] = $targetLengthMax;

        return $this;
    }

    /**
     * Gets formatting
     *
     * @return bool
     */
    public function getFormatting()
    {
        return $this->container['formatting'];
    }

    /**
     * Sets formatting
     *
     * @param bool $formatting default value: false
     *
     * @return $this
     */
    public function setFormatting($formatting)
    {
        $this->container['formatting'] = $formatting;

        return $this;
    }

    /**
     * Gets unresolvedComment
     *
     * @return bool
     */
    public function getUnresolvedComment()
    {
        return $this->container['unresolvedComment'];
    }

    /**
     * Sets unresolvedComment
     *
     * @param bool $unresolvedComment default value: false
     *
     * @return $this
     */
    public function setUnresolvedComment($unresolvedComment)
    {
        $this->container['unresolvedComment'] = $unresolvedComment;

        return $this;
    }

    /**
     * Gets emptyPairTags
     *
     * @return bool
     */
    public function getEmptyPairTags()
    {
        return $this->container['emptyPairTags'];
    }

    /**
     * Sets emptyPairTags
     *
     * @param bool $emptyPairTags default value: false
     *
     * @return $this
     */
    public function setEmptyPairTags($emptyPairTags)
    {
        $this->container['emptyPairTags'] = $emptyPairTags;

        return $this;
    }

    /**
     * Gets strictJobStatus
     *
     * @return bool
     */
    public function getStrictJobStatus()
    {
        return $this->container['strictJobStatus'];
    }

    /**
     * Sets strictJobStatus
     *
     * @param bool $strictJobStatus Linguists may not set jobs with unresolved QA warnings to Completed. default value: false
     *
     * @return $this
     */
    public function setStrictJobStatus($strictJobStatus)
    {
        $this->container['strictJobStatus'] = $strictJobStatus;

        return $this;
    }

    /**
     * Gets forbiddenStrings
     *
     * @return string[]
     */
    public function getForbiddenStrings()
    {
        return $this->container['forbiddenStrings'];
    }

    /**
     * Sets forbiddenStrings
     *
     * @param string[] $forbiddenStrings forbiddenStrings
     *
     * @return $this
     */
    public function setForbiddenStrings($forbiddenStrings)
    {
        $this->container['forbiddenStrings'] = $forbiddenStrings;

        return $this;
    }

    /**
     * Gets excludeLockedSegments
     *
     * @return bool
     */
    public function getExcludeLockedSegments()
    {
        return $this->container['excludeLockedSegments'];
    }

    /**
     * Sets excludeLockedSegments
     *
     * @param bool $excludeLockedSegments default value: false
     *
     * @return $this
     */
    public function setExcludeLockedSegments($excludeLockedSegments)
    {
        $this->container['excludeLockedSegments'] = $excludeLockedSegments;

        return $this;
    }

    /**
     * Gets ignoreNotApprovedTerms
     *
     * @return bool
     */
    public function getIgnoreNotApprovedTerms()
    {
        return $this->container['ignoreNotApprovedTerms'];
    }

    /**
     * Sets ignoreNotApprovedTerms
     *
     * @param bool $ignoreNotApprovedTerms default value: false
     *
     * @return $this
     */
    public function setIgnoreNotApprovedTerms($ignoreNotApprovedTerms)
    {
        $this->container['ignoreNotApprovedTerms'] = $ignoreNotApprovedTerms;

        return $this;
    }

    /**
     * Gets spellCheck
     *
     * @return bool
     */
    public function getSpellCheck()
    {
        return $this->container['spellCheck'];
    }

    /**
     * Sets spellCheck
     *
     * @param bool $spellCheck default value: false
     *
     * @return $this
     */
    public function setSpellCheck($spellCheck)
    {
        $this->container['spellCheck'] = $spellCheck;

        return $this;
    }

    /**
     * Gets repeatedWords
     *
     * @return bool
     */
    public function getRepeatedWords()
    {
        return $this->container['repeatedWords'];
    }

    /**
     * Sets repeatedWords
     *
     * @param bool $repeatedWords default value: false
     *
     * @return $this
     */
    public function setRepeatedWords($repeatedWords)
    {
        $this->container['repeatedWords'] = $repeatedWords;

        return $this;
    }

    /**
     * Gets inconsistentTagContent
     *
     * @return bool
     */
    public function getInconsistentTagContent()
    {
        return $this->container['inconsistentTagContent'];
    }

    /**
     * Sets inconsistentTagContent
     *
     * @param bool $inconsistentTagContent default value: false
     *
     * @return $this
     */
    public function setInconsistentTagContent($inconsistentTagContent)
    {
        $this->container['inconsistentTagContent'] = $inconsistentTagContent;

        return $this;
    }

    /**
     * Gets emptyTagContent
     *
     * @return bool
     */
    public function getEmptyTagContent()
    {
        return $this->container['emptyTagContent'];
    }

    /**
     * Sets emptyTagContent
     *
     * @param bool $emptyTagContent default value: false
     *
     * @return $this
     */
    public function setEmptyTagContent($emptyTagContent)
    {
        $this->container['emptyTagContent'] = $emptyTagContent;

        return $this;
    }

    /**
     * Gets xliffTags
     *
     * @return bool
     */
    public function getXliffTags()
    {
        return $this->container['xliffTags'];
    }

    /**
     * Sets xliffTags
     *
     * @param bool $xliffTags default value: false
     *
     * @return $this
     */
    public function setXliffTags($xliffTags)
    {
        $this->container['xliffTags'] = $xliffTags;

        return $this;
    }

    /**
     * Gets forbiddenTerms
     *
     * @return bool
     */
    public function getForbiddenTerms()
    {
        return $this->container['forbiddenTerms'];
    }

    /**
     * Sets forbiddenTerms
     *
     * @param bool $forbiddenTerms default value: false
     *
     * @return $this
     */
    public function setForbiddenTerms($forbiddenTerms)
    {
        $this->container['forbiddenTerms'] = $forbiddenTerms;

        return $this;
    }

    /**
     * Gets targetLengthPercent
     *
     * @return double
     */
    public function getTargetLengthPercent()
    {
        return $this->container['targetLengthPercent'];
    }

    /**
     * Sets targetLengthPercent
     *
     * @param double $targetLengthPercent targetLengthPercent
     *
     * @return $this
     */
    public function setTargetLengthPercent($targetLengthPercent)
    {

        if (!is_null($targetLengthPercent) && ($targetLengthPercent < 0)) {
            throw new \InvalidArgumentException('invalid value for $targetLengthPercent when calling EditQASettingsDto., must be bigger than or equal to 0.');
        }

        $this->container['targetLengthPercent'] = $targetLengthPercent;

        return $this;
    }

    /**
     * Gets targetLengthPerSegment
     *
     * @return bool
     */
    public function getTargetLengthPerSegment()
    {
        return $this->container['targetLengthPerSegment'];
    }

    /**
     * Sets targetLengthPerSegment
     *
     * @param bool $targetLengthPerSegment default value: false
     *
     * @return $this
     */
    public function setTargetLengthPerSegment($targetLengthPerSegment)
    {
        $this->container['targetLengthPerSegment'] = $targetLengthPerSegment;

        return $this;
    }

    /**
     * Gets newerAtPrecedingWorkflowStep
     *
     * @return bool
     */
    public function getNewerAtPrecedingWorkflowStep()
    {
        return $this->container['newerAtPrecedingWorkflowStep'];
    }

    /**
     * Sets newerAtPrecedingWorkflowStep
     *
     * @param bool $newerAtPrecedingWorkflowStep default value: false
     *
     * @return $this
     */
    public function setNewerAtPrecedingWorkflowStep($newerAtPrecedingWorkflowStep)
    {
        $this->container['newerAtPrecedingWorkflowStep'] = $newerAtPrecedingWorkflowStep;

        return $this;
    }

    /**
     * Gets leadingAndTrailingSpaces
     *
     * @return bool
     */
    public function getLeadingAndTrailingSpaces()
    {
        return $this->container['leadingAndTrailingSpaces'];
    }

    /**
     * Sets leadingAndTrailingSpaces
     *
     * @param bool $leadingAndTrailingSpaces default value: false
     *
     * @return $this
     */
    public function setLeadingAndTrailingSpaces($leadingAndTrailingSpaces)
    {
        $this->container['leadingAndTrailingSpaces'] = $leadingAndTrailingSpaces;

        return $this;
    }

    /**
     * Gets moraviaQA
     *
     * @return \Memsource\Model\MoraviaQADto
     */
    public function getMoraviaQA()
    {
        return $this->container['moraviaQA'];
    }

    /**
     * Sets moraviaQA
     *
     * @param \Memsource\Model\MoraviaQADto $moraviaQA moraviaQA
     *
     * @return $this
     */
    public function setMoraviaQA($moraviaQA)
    {
        $this->container['moraviaQA'] = $moraviaQA;

        return $this;
    }

    /**
     * Gets regexp
     *
     * @return \Memsource\Model\RegexpCheckDto
     */
    public function getRegexp()
    {
        return $this->container['regexp'];
    }

    /**
     * Sets regexp
     *
     * @param \Memsource\Model\RegexpCheckDto $regexp regexp
     *
     * @return $this
     */
    public function setRegexp($regexp)
    {
        $this->container['regexp'] = $regexp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


