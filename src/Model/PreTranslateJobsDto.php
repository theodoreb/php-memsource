<?php
/**
 * PreTranslateJobsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * PreTranslateJobsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreTranslateJobsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreTranslateJobsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jobs' => '\Memsource\Model\UidReference[]',
        'useTranslationMemory' => 'bool',
        'useMachineTranslation' => 'bool',
        'translationMemoryTreshold' => 'double',
        'insertMachineTranslationIntoTarget' => 'bool',
        'preTranslateNonTranslatables' => 'bool',
        'confirm100NonTranslatableMatches' => 'bool',
        'confirm100TranslationMemoryMatches' => 'bool',
        'confirm101TranslationMemoryMatches' => 'bool',
        'lock100NonTranslatableMatches' => 'bool',
        'lock100TranslationMemoryMatches' => 'bool',
        'lock101TranslationMemoryMatches' => 'bool',
        'overwrite' => 'bool',
        'segmentFilters' => 'string[]',
        'useProjectPreTranslateSettings' => 'bool',
        'callbackUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jobs' => null,
        'useTranslationMemory' => null,
        'useMachineTranslation' => null,
        'translationMemoryTreshold' => 'double',
        'insertMachineTranslationIntoTarget' => null,
        'preTranslateNonTranslatables' => null,
        'confirm100NonTranslatableMatches' => null,
        'confirm100TranslationMemoryMatches' => null,
        'confirm101TranslationMemoryMatches' => null,
        'lock100NonTranslatableMatches' => null,
        'lock100TranslationMemoryMatches' => null,
        'lock101TranslationMemoryMatches' => null,
        'overwrite' => null,
        'segmentFilters' => null,
        'useProjectPreTranslateSettings' => null,
        'callbackUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobs' => 'jobs',
        'useTranslationMemory' => 'useTranslationMemory',
        'useMachineTranslation' => 'useMachineTranslation',
        'translationMemoryTreshold' => 'translationMemoryTreshold',
        'insertMachineTranslationIntoTarget' => 'insertMachineTranslationIntoTarget',
        'preTranslateNonTranslatables' => 'preTranslateNonTranslatables',
        'confirm100NonTranslatableMatches' => 'confirm100NonTranslatableMatches',
        'confirm100TranslationMemoryMatches' => 'confirm100TranslationMemoryMatches',
        'confirm101TranslationMemoryMatches' => 'confirm101TranslationMemoryMatches',
        'lock100NonTranslatableMatches' => 'lock100NonTranslatableMatches',
        'lock100TranslationMemoryMatches' => 'lock100TranslationMemoryMatches',
        'lock101TranslationMemoryMatches' => 'lock101TranslationMemoryMatches',
        'overwrite' => 'overwrite',
        'segmentFilters' => 'segmentFilters',
        'useProjectPreTranslateSettings' => 'useProjectPreTranslateSettings',
        'callbackUrl' => 'callbackUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobs' => 'setJobs',
        'useTranslationMemory' => 'setUseTranslationMemory',
        'useMachineTranslation' => 'setUseMachineTranslation',
        'translationMemoryTreshold' => 'setTranslationMemoryTreshold',
        'insertMachineTranslationIntoTarget' => 'setInsertMachineTranslationIntoTarget',
        'preTranslateNonTranslatables' => 'setPreTranslateNonTranslatables',
        'confirm100NonTranslatableMatches' => 'setConfirm100NonTranslatableMatches',
        'confirm100TranslationMemoryMatches' => 'setConfirm100TranslationMemoryMatches',
        'confirm101TranslationMemoryMatches' => 'setConfirm101TranslationMemoryMatches',
        'lock100NonTranslatableMatches' => 'setLock100NonTranslatableMatches',
        'lock100TranslationMemoryMatches' => 'setLock100TranslationMemoryMatches',
        'lock101TranslationMemoryMatches' => 'setLock101TranslationMemoryMatches',
        'overwrite' => 'setOverwrite',
        'segmentFilters' => 'setSegmentFilters',
        'useProjectPreTranslateSettings' => 'setUseProjectPreTranslateSettings',
        'callbackUrl' => 'setCallbackUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobs' => 'getJobs',
        'useTranslationMemory' => 'getUseTranslationMemory',
        'useMachineTranslation' => 'getUseMachineTranslation',
        'translationMemoryTreshold' => 'getTranslationMemoryTreshold',
        'insertMachineTranslationIntoTarget' => 'getInsertMachineTranslationIntoTarget',
        'preTranslateNonTranslatables' => 'getPreTranslateNonTranslatables',
        'confirm100NonTranslatableMatches' => 'getConfirm100NonTranslatableMatches',
        'confirm100TranslationMemoryMatches' => 'getConfirm100TranslationMemoryMatches',
        'confirm101TranslationMemoryMatches' => 'getConfirm101TranslationMemoryMatches',
        'lock100NonTranslatableMatches' => 'getLock100NonTranslatableMatches',
        'lock100TranslationMemoryMatches' => 'getLock100TranslationMemoryMatches',
        'lock101TranslationMemoryMatches' => 'getLock101TranslationMemoryMatches',
        'overwrite' => 'getOverwrite',
        'segmentFilters' => 'getSegmentFilters',
        'useProjectPreTranslateSettings' => 'getUseProjectPreTranslateSettings',
        'callbackUrl' => 'getCallbackUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEGMENT_FILTERS_LOCKED = 'LOCKED';
    const SEGMENT_FILTERS_NOT_LOCKED = 'NOT_LOCKED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSegmentFiltersAllowableValues()
    {
        return [
            self::SEGMENT_FILTERS_LOCKED,
            self::SEGMENT_FILTERS_NOT_LOCKED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jobs'] = isset($data['jobs']) ? $data['jobs'] : null;
        $this->container['useTranslationMemory'] = isset($data['useTranslationMemory']) ? $data['useTranslationMemory'] : null;
        $this->container['useMachineTranslation'] = isset($data['useMachineTranslation']) ? $data['useMachineTranslation'] : null;
        $this->container['translationMemoryTreshold'] = isset($data['translationMemoryTreshold']) ? $data['translationMemoryTreshold'] : null;
        $this->container['insertMachineTranslationIntoTarget'] = isset($data['insertMachineTranslationIntoTarget']) ? $data['insertMachineTranslationIntoTarget'] : null;
        $this->container['preTranslateNonTranslatables'] = isset($data['preTranslateNonTranslatables']) ? $data['preTranslateNonTranslatables'] : null;
        $this->container['confirm100NonTranslatableMatches'] = isset($data['confirm100NonTranslatableMatches']) ? $data['confirm100NonTranslatableMatches'] : null;
        $this->container['confirm100TranslationMemoryMatches'] = isset($data['confirm100TranslationMemoryMatches']) ? $data['confirm100TranslationMemoryMatches'] : null;
        $this->container['confirm101TranslationMemoryMatches'] = isset($data['confirm101TranslationMemoryMatches']) ? $data['confirm101TranslationMemoryMatches'] : null;
        $this->container['lock100NonTranslatableMatches'] = isset($data['lock100NonTranslatableMatches']) ? $data['lock100NonTranslatableMatches'] : null;
        $this->container['lock100TranslationMemoryMatches'] = isset($data['lock100TranslationMemoryMatches']) ? $data['lock100TranslationMemoryMatches'] : null;
        $this->container['lock101TranslationMemoryMatches'] = isset($data['lock101TranslationMemoryMatches']) ? $data['lock101TranslationMemoryMatches'] : null;
        $this->container['overwrite'] = isset($data['overwrite']) ? $data['overwrite'] : null;
        $this->container['segmentFilters'] = isset($data['segmentFilters']) ? $data['segmentFilters'] : null;
        $this->container['useProjectPreTranslateSettings'] = isset($data['useProjectPreTranslateSettings']) ? $data['useProjectPreTranslateSettings'] : null;
        $this->container['callbackUrl'] = isset($data['callbackUrl']) ? $data['callbackUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jobs'] === null) {
            $invalidProperties[] = "'jobs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['jobs'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets jobs
     *
     * @return \Memsource\Model\UidReference[]
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \Memsource\Model\UidReference[] $jobs jobs
     *
     * @return $this
     */
    public function setJobs($jobs)
    {
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets useTranslationMemory
     *
     * @return bool
     */
    public function getUseTranslationMemory()
    {
        return $this->container['useTranslationMemory'];
    }

    /**
     * Sets useTranslationMemory
     *
     * @param bool $useTranslationMemory default: true
     *
     * @return $this
     */
    public function setUseTranslationMemory($useTranslationMemory)
    {
        $this->container['useTranslationMemory'] = $useTranslationMemory;

        return $this;
    }

    /**
     * Gets useMachineTranslation
     *
     * @return bool
     */
    public function getUseMachineTranslation()
    {
        return $this->container['useMachineTranslation'];
    }

    /**
     * Sets useMachineTranslation
     *
     * @param bool $useMachineTranslation default: true
     *
     * @return $this
     */
    public function setUseMachineTranslation($useMachineTranslation)
    {
        $this->container['useMachineTranslation'] = $useMachineTranslation;

        return $this;
    }

    /**
     * Gets translationMemoryTreshold
     *
     * @return double
     */
    public function getTranslationMemoryTreshold()
    {
        return $this->container['translationMemoryTreshold'];
    }

    /**
     * Sets translationMemoryTreshold
     *
     * @param double $translationMemoryTreshold default: 0.7
     *
     * @return $this
     */
    public function setTranslationMemoryTreshold($translationMemoryTreshold)
    {
        $this->container['translationMemoryTreshold'] = $translationMemoryTreshold;

        return $this;
    }

    /**
     * Gets insertMachineTranslationIntoTarget
     *
     * @return bool
     */
    public function getInsertMachineTranslationIntoTarget()
    {
        return $this->container['insertMachineTranslationIntoTarget'];
    }

    /**
     * Sets insertMachineTranslationIntoTarget
     *
     * @param bool $insertMachineTranslationIntoTarget default: true
     *
     * @return $this
     */
    public function setInsertMachineTranslationIntoTarget($insertMachineTranslationIntoTarget)
    {
        $this->container['insertMachineTranslationIntoTarget'] = $insertMachineTranslationIntoTarget;

        return $this;
    }

    /**
     * Gets preTranslateNonTranslatables
     *
     * @return bool
     */
    public function getPreTranslateNonTranslatables()
    {
        return $this->container['preTranslateNonTranslatables'];
    }

    /**
     * Sets preTranslateNonTranslatables
     *
     * @param bool $preTranslateNonTranslatables preTranslateNonTranslatables
     *
     * @return $this
     */
    public function setPreTranslateNonTranslatables($preTranslateNonTranslatables)
    {
        $this->container['preTranslateNonTranslatables'] = $preTranslateNonTranslatables;

        return $this;
    }

    /**
     * Gets confirm100NonTranslatableMatches
     *
     * @return bool
     */
    public function getConfirm100NonTranslatableMatches()
    {
        return $this->container['confirm100NonTranslatableMatches'];
    }

    /**
     * Sets confirm100NonTranslatableMatches
     *
     * @param bool $confirm100NonTranslatableMatches confirm100NonTranslatableMatches
     *
     * @return $this
     */
    public function setConfirm100NonTranslatableMatches($confirm100NonTranslatableMatches)
    {
        $this->container['confirm100NonTranslatableMatches'] = $confirm100NonTranslatableMatches;

        return $this;
    }

    /**
     * Gets confirm100TranslationMemoryMatches
     *
     * @return bool
     */
    public function getConfirm100TranslationMemoryMatches()
    {
        return $this->container['confirm100TranslationMemoryMatches'];
    }

    /**
     * Sets confirm100TranslationMemoryMatches
     *
     * @param bool $confirm100TranslationMemoryMatches confirm100TranslationMemoryMatches
     *
     * @return $this
     */
    public function setConfirm100TranslationMemoryMatches($confirm100TranslationMemoryMatches)
    {
        $this->container['confirm100TranslationMemoryMatches'] = $confirm100TranslationMemoryMatches;

        return $this;
    }

    /**
     * Gets confirm101TranslationMemoryMatches
     *
     * @return bool
     */
    public function getConfirm101TranslationMemoryMatches()
    {
        return $this->container['confirm101TranslationMemoryMatches'];
    }

    /**
     * Sets confirm101TranslationMemoryMatches
     *
     * @param bool $confirm101TranslationMemoryMatches confirm101TranslationMemoryMatches
     *
     * @return $this
     */
    public function setConfirm101TranslationMemoryMatches($confirm101TranslationMemoryMatches)
    {
        $this->container['confirm101TranslationMemoryMatches'] = $confirm101TranslationMemoryMatches;

        return $this;
    }

    /**
     * Gets lock100NonTranslatableMatches
     *
     * @return bool
     */
    public function getLock100NonTranslatableMatches()
    {
        return $this->container['lock100NonTranslatableMatches'];
    }

    /**
     * Sets lock100NonTranslatableMatches
     *
     * @param bool $lock100NonTranslatableMatches lock100NonTranslatableMatches
     *
     * @return $this
     */
    public function setLock100NonTranslatableMatches($lock100NonTranslatableMatches)
    {
        $this->container['lock100NonTranslatableMatches'] = $lock100NonTranslatableMatches;

        return $this;
    }

    /**
     * Gets lock100TranslationMemoryMatches
     *
     * @return bool
     */
    public function getLock100TranslationMemoryMatches()
    {
        return $this->container['lock100TranslationMemoryMatches'];
    }

    /**
     * Sets lock100TranslationMemoryMatches
     *
     * @param bool $lock100TranslationMemoryMatches lock100TranslationMemoryMatches
     *
     * @return $this
     */
    public function setLock100TranslationMemoryMatches($lock100TranslationMemoryMatches)
    {
        $this->container['lock100TranslationMemoryMatches'] = $lock100TranslationMemoryMatches;

        return $this;
    }

    /**
     * Gets lock101TranslationMemoryMatches
     *
     * @return bool
     */
    public function getLock101TranslationMemoryMatches()
    {
        return $this->container['lock101TranslationMemoryMatches'];
    }

    /**
     * Sets lock101TranslationMemoryMatches
     *
     * @param bool $lock101TranslationMemoryMatches lock101TranslationMemoryMatches
     *
     * @return $this
     */
    public function setLock101TranslationMemoryMatches($lock101TranslationMemoryMatches)
    {
        $this->container['lock101TranslationMemoryMatches'] = $lock101TranslationMemoryMatches;

        return $this;
    }

    /**
     * Gets overwrite
     *
     * @return bool
     */
    public function getOverwrite()
    {
        return $this->container['overwrite'];
    }

    /**
     * Sets overwrite
     *
     * @param bool $overwrite overwrite
     *
     * @return $this
     */
    public function setOverwrite($overwrite)
    {
        $this->container['overwrite'] = $overwrite;

        return $this;
    }

    /**
     * Gets segmentFilters
     *
     * @return string[]
     */
    public function getSegmentFilters()
    {
        return $this->container['segmentFilters'];
    }

    /**
     * Sets segmentFilters
     *
     * @param string[] $segmentFilters segmentFilters
     *
     * @return $this
     */
    public function setSegmentFilters($segmentFilters)
    {
        $allowedValues = $this->getSegmentFiltersAllowableValues();
        if (!is_null($segmentFilters) && array_diff($segmentFilters, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'segmentFilters', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['segmentFilters'] = $segmentFilters;

        return $this;
    }

    /**
     * Gets useProjectPreTranslateSettings
     *
     * @return bool
     */
    public function getUseProjectPreTranslateSettings()
    {
        return $this->container['useProjectPreTranslateSettings'];
    }

    /**
     * Sets useProjectPreTranslateSettings
     *
     * @param bool $useProjectPreTranslateSettings useProjectPreTranslateSettings
     *
     * @return $this
     */
    public function setUseProjectPreTranslateSettings($useProjectPreTranslateSettings)
    {
        $this->container['useProjectPreTranslateSettings'] = $useProjectPreTranslateSettings;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string $callbackUrl callbackUrl
     *
     * @return $this
     */
    public function setCallbackUrl($callbackUrl)
    {
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


