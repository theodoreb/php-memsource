<?php
/**
 * DiscountSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * DiscountSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscountSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'repetition' => 'double',
        'tm101' => 'double',
        'tm100' => 'double',
        'tm95' => 'double',
        'tm85' => 'double',
        'tm75' => 'double',
        'tm50' => 'double',
        'tm0' => 'double',
        'mt100' => 'double',
        'mt95' => 'double',
        'mt85' => 'double',
        'mt75' => 'double',
        'mt50' => 'double',
        'mt0' => 'double',
        'nt100' => 'double',
        'nt99' => 'double',
        'nt85' => 'double',
        'nt75' => 'double',
        'nt50' => 'double',
        'nt0' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'repetition' => 'double',
        'tm101' => 'double',
        'tm100' => 'double',
        'tm95' => 'double',
        'tm85' => 'double',
        'tm75' => 'double',
        'tm50' => 'double',
        'tm0' => 'double',
        'mt100' => 'double',
        'mt95' => 'double',
        'mt85' => 'double',
        'mt75' => 'double',
        'mt50' => 'double',
        'mt0' => 'double',
        'nt100' => 'double',
        'nt99' => 'double',
        'nt85' => 'double',
        'nt75' => 'double',
        'nt50' => 'double',
        'nt0' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'repetition' => 'repetition',
        'tm101' => 'tm101',
        'tm100' => 'tm100',
        'tm95' => 'tm95',
        'tm85' => 'tm85',
        'tm75' => 'tm75',
        'tm50' => 'tm50',
        'tm0' => 'tm0',
        'mt100' => 'mt100',
        'mt95' => 'mt95',
        'mt85' => 'mt85',
        'mt75' => 'mt75',
        'mt50' => 'mt50',
        'mt0' => 'mt0',
        'nt100' => 'nt100',
        'nt99' => 'nt99',
        'nt85' => 'nt85',
        'nt75' => 'nt75',
        'nt50' => 'nt50',
        'nt0' => 'nt0'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'repetition' => 'setRepetition',
        'tm101' => 'setTm101',
        'tm100' => 'setTm100',
        'tm95' => 'setTm95',
        'tm85' => 'setTm85',
        'tm75' => 'setTm75',
        'tm50' => 'setTm50',
        'tm0' => 'setTm0',
        'mt100' => 'setMt100',
        'mt95' => 'setMt95',
        'mt85' => 'setMt85',
        'mt75' => 'setMt75',
        'mt50' => 'setMt50',
        'mt0' => 'setMt0',
        'nt100' => 'setNt100',
        'nt99' => 'setNt99',
        'nt85' => 'setNt85',
        'nt75' => 'setNt75',
        'nt50' => 'setNt50',
        'nt0' => 'setNt0'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'repetition' => 'getRepetition',
        'tm101' => 'getTm101',
        'tm100' => 'getTm100',
        'tm95' => 'getTm95',
        'tm85' => 'getTm85',
        'tm75' => 'getTm75',
        'tm50' => 'getTm50',
        'tm0' => 'getTm0',
        'mt100' => 'getMt100',
        'mt95' => 'getMt95',
        'mt85' => 'getMt85',
        'mt75' => 'getMt75',
        'mt50' => 'getMt50',
        'mt0' => 'getMt0',
        'nt100' => 'getNt100',
        'nt99' => 'getNt99',
        'nt85' => 'getNt85',
        'nt75' => 'getNt75',
        'nt50' => 'getNt50',
        'nt0' => 'getNt0'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['repetition'] = isset($data['repetition']) ? $data['repetition'] : null;
        $this->container['tm101'] = isset($data['tm101']) ? $data['tm101'] : null;
        $this->container['tm100'] = isset($data['tm100']) ? $data['tm100'] : null;
        $this->container['tm95'] = isset($data['tm95']) ? $data['tm95'] : null;
        $this->container['tm85'] = isset($data['tm85']) ? $data['tm85'] : null;
        $this->container['tm75'] = isset($data['tm75']) ? $data['tm75'] : null;
        $this->container['tm50'] = isset($data['tm50']) ? $data['tm50'] : null;
        $this->container['tm0'] = isset($data['tm0']) ? $data['tm0'] : null;
        $this->container['mt100'] = isset($data['mt100']) ? $data['mt100'] : null;
        $this->container['mt95'] = isset($data['mt95']) ? $data['mt95'] : null;
        $this->container['mt85'] = isset($data['mt85']) ? $data['mt85'] : null;
        $this->container['mt75'] = isset($data['mt75']) ? $data['mt75'] : null;
        $this->container['mt50'] = isset($data['mt50']) ? $data['mt50'] : null;
        $this->container['mt0'] = isset($data['mt0']) ? $data['mt0'] : null;
        $this->container['nt100'] = isset($data['nt100']) ? $data['nt100'] : null;
        $this->container['nt99'] = isset($data['nt99']) ? $data['nt99'] : null;
        $this->container['nt85'] = isset($data['nt85']) ? $data['nt85'] : null;
        $this->container['nt75'] = isset($data['nt75']) ? $data['nt75'] : null;
        $this->container['nt50'] = isset($data['nt50']) ? $data['nt50'] : null;
        $this->container['nt0'] = isset($data['nt0']) ? $data['nt0'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets repetition
     *
     * @return double
     */
    public function getRepetition()
    {
        return $this->container['repetition'];
    }

    /**
     * Sets repetition
     *
     * @param double $repetition repetition
     *
     * @return $this
     */
    public function setRepetition($repetition)
    {
        $this->container['repetition'] = $repetition;

        return $this;
    }

    /**
     * Gets tm101
     *
     * @return double
     */
    public function getTm101()
    {
        return $this->container['tm101'];
    }

    /**
     * Sets tm101
     *
     * @param double $tm101 tm101
     *
     * @return $this
     */
    public function setTm101($tm101)
    {
        $this->container['tm101'] = $tm101;

        return $this;
    }

    /**
     * Gets tm100
     *
     * @return double
     */
    public function getTm100()
    {
        return $this->container['tm100'];
    }

    /**
     * Sets tm100
     *
     * @param double $tm100 tm100
     *
     * @return $this
     */
    public function setTm100($tm100)
    {
        $this->container['tm100'] = $tm100;

        return $this;
    }

    /**
     * Gets tm95
     *
     * @return double
     */
    public function getTm95()
    {
        return $this->container['tm95'];
    }

    /**
     * Sets tm95
     *
     * @param double $tm95 tm95
     *
     * @return $this
     */
    public function setTm95($tm95)
    {
        $this->container['tm95'] = $tm95;

        return $this;
    }

    /**
     * Gets tm85
     *
     * @return double
     */
    public function getTm85()
    {
        return $this->container['tm85'];
    }

    /**
     * Sets tm85
     *
     * @param double $tm85 tm85
     *
     * @return $this
     */
    public function setTm85($tm85)
    {
        $this->container['tm85'] = $tm85;

        return $this;
    }

    /**
     * Gets tm75
     *
     * @return double
     */
    public function getTm75()
    {
        return $this->container['tm75'];
    }

    /**
     * Sets tm75
     *
     * @param double $tm75 tm75
     *
     * @return $this
     */
    public function setTm75($tm75)
    {
        $this->container['tm75'] = $tm75;

        return $this;
    }

    /**
     * Gets tm50
     *
     * @return double
     */
    public function getTm50()
    {
        return $this->container['tm50'];
    }

    /**
     * Sets tm50
     *
     * @param double $tm50 tm50
     *
     * @return $this
     */
    public function setTm50($tm50)
    {
        $this->container['tm50'] = $tm50;

        return $this;
    }

    /**
     * Gets tm0
     *
     * @return double
     */
    public function getTm0()
    {
        return $this->container['tm0'];
    }

    /**
     * Sets tm0
     *
     * @param double $tm0 tm0
     *
     * @return $this
     */
    public function setTm0($tm0)
    {
        $this->container['tm0'] = $tm0;

        return $this;
    }

    /**
     * Gets mt100
     *
     * @return double
     */
    public function getMt100()
    {
        return $this->container['mt100'];
    }

    /**
     * Sets mt100
     *
     * @param double $mt100 mt100
     *
     * @return $this
     */
    public function setMt100($mt100)
    {
        $this->container['mt100'] = $mt100;

        return $this;
    }

    /**
     * Gets mt95
     *
     * @return double
     */
    public function getMt95()
    {
        return $this->container['mt95'];
    }

    /**
     * Sets mt95
     *
     * @param double $mt95 mt95
     *
     * @return $this
     */
    public function setMt95($mt95)
    {
        $this->container['mt95'] = $mt95;

        return $this;
    }

    /**
     * Gets mt85
     *
     * @return double
     */
    public function getMt85()
    {
        return $this->container['mt85'];
    }

    /**
     * Sets mt85
     *
     * @param double $mt85 mt85
     *
     * @return $this
     */
    public function setMt85($mt85)
    {
        $this->container['mt85'] = $mt85;

        return $this;
    }

    /**
     * Gets mt75
     *
     * @return double
     */
    public function getMt75()
    {
        return $this->container['mt75'];
    }

    /**
     * Sets mt75
     *
     * @param double $mt75 mt75
     *
     * @return $this
     */
    public function setMt75($mt75)
    {
        $this->container['mt75'] = $mt75;

        return $this;
    }

    /**
     * Gets mt50
     *
     * @return double
     */
    public function getMt50()
    {
        return $this->container['mt50'];
    }

    /**
     * Sets mt50
     *
     * @param double $mt50 mt50
     *
     * @return $this
     */
    public function setMt50($mt50)
    {
        $this->container['mt50'] = $mt50;

        return $this;
    }

    /**
     * Gets mt0
     *
     * @return double
     */
    public function getMt0()
    {
        return $this->container['mt0'];
    }

    /**
     * Sets mt0
     *
     * @param double $mt0 mt0
     *
     * @return $this
     */
    public function setMt0($mt0)
    {
        $this->container['mt0'] = $mt0;

        return $this;
    }

    /**
     * Gets nt100
     *
     * @return double
     */
    public function getNt100()
    {
        return $this->container['nt100'];
    }

    /**
     * Sets nt100
     *
     * @param double $nt100 nt100
     *
     * @return $this
     */
    public function setNt100($nt100)
    {
        $this->container['nt100'] = $nt100;

        return $this;
    }

    /**
     * Gets nt99
     *
     * @return double
     */
    public function getNt99()
    {
        return $this->container['nt99'];
    }

    /**
     * Sets nt99
     *
     * @param double $nt99 nt99
     *
     * @return $this
     */
    public function setNt99($nt99)
    {
        $this->container['nt99'] = $nt99;

        return $this;
    }

    /**
     * Gets nt85
     *
     * @return double
     */
    public function getNt85()
    {
        return $this->container['nt85'];
    }

    /**
     * Sets nt85
     *
     * @param double $nt85 nt85
     *
     * @return $this
     */
    public function setNt85($nt85)
    {
        $this->container['nt85'] = $nt85;

        return $this;
    }

    /**
     * Gets nt75
     *
     * @return double
     */
    public function getNt75()
    {
        return $this->container['nt75'];
    }

    /**
     * Sets nt75
     *
     * @param double $nt75 nt75
     *
     * @return $this
     */
    public function setNt75($nt75)
    {
        $this->container['nt75'] = $nt75;

        return $this;
    }

    /**
     * Gets nt50
     *
     * @return double
     */
    public function getNt50()
    {
        return $this->container['nt50'];
    }

    /**
     * Sets nt50
     *
     * @param double $nt50 nt50
     *
     * @return $this
     */
    public function setNt50($nt50)
    {
        $this->container['nt50'] = $nt50;

        return $this;
    }

    /**
     * Gets nt0
     *
     * @return double
     */
    public function getNt0()
    {
        return $this->container['nt0'];
    }

    /**
     * Sets nt0
     *
     * @param double $nt0 nt0
     *
     * @return $this
     */
    public function setNt0($nt0)
    {
        $this->container['nt0'] = $nt0;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


