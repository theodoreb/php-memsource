<?php
/**
 * SearchByJobRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * SearchByJobRequestDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchByJobRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchByJobRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segment' => 'string',
        'workflowLevel' => 'int',
        'scoreThreshold' => 'double',
        'previousSegment' => 'string',
        'nextSegment' => 'string',
        'contextKey' => 'string',
        'maxSegments' => 'int',
        'maxSubSegments' => 'int',
        'tagMetadata' => '\Memsource\Model\TagMetadataDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segment' => null,
        'workflowLevel' => 'int32',
        'scoreThreshold' => 'double',
        'previousSegment' => null,
        'nextSegment' => null,
        'contextKey' => null,
        'maxSegments' => 'int32',
        'maxSubSegments' => 'int32',
        'tagMetadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segment' => 'segment',
        'workflowLevel' => 'workflowLevel',
        'scoreThreshold' => 'scoreThreshold',
        'previousSegment' => 'previousSegment',
        'nextSegment' => 'nextSegment',
        'contextKey' => 'contextKey',
        'maxSegments' => 'maxSegments',
        'maxSubSegments' => 'maxSubSegments',
        'tagMetadata' => 'tagMetadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segment' => 'setSegment',
        'workflowLevel' => 'setWorkflowLevel',
        'scoreThreshold' => 'setScoreThreshold',
        'previousSegment' => 'setPreviousSegment',
        'nextSegment' => 'setNextSegment',
        'contextKey' => 'setContextKey',
        'maxSegments' => 'setMaxSegments',
        'maxSubSegments' => 'setMaxSubSegments',
        'tagMetadata' => 'setTagMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segment' => 'getSegment',
        'workflowLevel' => 'getWorkflowLevel',
        'scoreThreshold' => 'getScoreThreshold',
        'previousSegment' => 'getPreviousSegment',
        'nextSegment' => 'getNextSegment',
        'contextKey' => 'getContextKey',
        'maxSegments' => 'getMaxSegments',
        'maxSubSegments' => 'getMaxSubSegments',
        'tagMetadata' => 'getTagMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['workflowLevel'] = isset($data['workflowLevel']) ? $data['workflowLevel'] : null;
        $this->container['scoreThreshold'] = isset($data['scoreThreshold']) ? $data['scoreThreshold'] : null;
        $this->container['previousSegment'] = isset($data['previousSegment']) ? $data['previousSegment'] : null;
        $this->container['nextSegment'] = isset($data['nextSegment']) ? $data['nextSegment'] : null;
        $this->container['contextKey'] = isset($data['contextKey']) ? $data['contextKey'] : null;
        $this->container['maxSegments'] = isset($data['maxSegments']) ? $data['maxSegments'] : null;
        $this->container['maxSubSegments'] = isset($data['maxSubSegments']) ? $data['maxSubSegments'] : null;
        $this->container['tagMetadata'] = isset($data['tagMetadata']) ? $data['tagMetadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['segment'] === null) {
            $invalidProperties[] = "'segment' can't be null";
        }
        if (!is_null($this->container['maxSegments']) && ($this->container['maxSegments'] > 5)) {
            $invalidProperties[] = "invalid value for 'maxSegments', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['maxSegments']) && ($this->container['maxSegments'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxSegments', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['maxSubSegments']) && ($this->container['maxSubSegments'] > 5)) {
            $invalidProperties[] = "invalid value for 'maxSubSegments', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['maxSubSegments']) && ($this->container['maxSubSegments'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxSubSegments', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['segment'] === null) {
            return false;
        }
        if ($this->container['maxSegments'] > 5) {
            return false;
        }
        if ($this->container['maxSegments'] < 0) {
            return false;
        }
        if ($this->container['maxSubSegments'] > 5) {
            return false;
        }
        if ($this->container['maxSubSegments'] < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets segment
     *
     * @return string
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param string $segment segment
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets workflowLevel
     *
     * @return int
     */
    public function getWorkflowLevel()
    {
        return $this->container['workflowLevel'];
    }

    /**
     * Sets workflowLevel
     *
     * @param int $workflowLevel workflowLevel
     *
     * @return $this
     */
    public function setWorkflowLevel($workflowLevel)
    {
        $this->container['workflowLevel'] = $workflowLevel;

        return $this;
    }

    /**
     * Gets scoreThreshold
     *
     * @return double
     */
    public function getScoreThreshold()
    {
        return $this->container['scoreThreshold'];
    }

    /**
     * Sets scoreThreshold
     *
     * @param double $scoreThreshold scoreThreshold
     *
     * @return $this
     */
    public function setScoreThreshold($scoreThreshold)
    {
        $this->container['scoreThreshold'] = $scoreThreshold;

        return $this;
    }

    /**
     * Gets previousSegment
     *
     * @return string
     */
    public function getPreviousSegment()
    {
        return $this->container['previousSegment'];
    }

    /**
     * Sets previousSegment
     *
     * @param string $previousSegment previousSegment
     *
     * @return $this
     */
    public function setPreviousSegment($previousSegment)
    {
        $this->container['previousSegment'] = $previousSegment;

        return $this;
    }

    /**
     * Gets nextSegment
     *
     * @return string
     */
    public function getNextSegment()
    {
        return $this->container['nextSegment'];
    }

    /**
     * Sets nextSegment
     *
     * @param string $nextSegment nextSegment
     *
     * @return $this
     */
    public function setNextSegment($nextSegment)
    {
        $this->container['nextSegment'] = $nextSegment;

        return $this;
    }

    /**
     * Gets contextKey
     *
     * @return string
     */
    public function getContextKey()
    {
        return $this->container['contextKey'];
    }

    /**
     * Sets contextKey
     *
     * @param string $contextKey contextKey
     *
     * @return $this
     */
    public function setContextKey($contextKey)
    {
        $this->container['contextKey'] = $contextKey;

        return $this;
    }

    /**
     * Gets maxSegments
     *
     * @return int
     */
    public function getMaxSegments()
    {
        return $this->container['maxSegments'];
    }

    /**
     * Sets maxSegments
     *
     * @param int $maxSegments maxSegments
     *
     * @return $this
     */
    public function setMaxSegments($maxSegments)
    {

        if (!is_null($maxSegments) && ($maxSegments > 5)) {
            throw new \InvalidArgumentException('invalid value for $maxSegments when calling SearchByJobRequestDto., must be smaller than or equal to 5.');
        }
        if (!is_null($maxSegments) && ($maxSegments < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxSegments when calling SearchByJobRequestDto., must be bigger than or equal to 0.');
        }

        $this->container['maxSegments'] = $maxSegments;

        return $this;
    }

    /**
     * Gets maxSubSegments
     *
     * @return int
     */
    public function getMaxSubSegments()
    {
        return $this->container['maxSubSegments'];
    }

    /**
     * Sets maxSubSegments
     *
     * @param int $maxSubSegments maxSubSegments
     *
     * @return $this
     */
    public function setMaxSubSegments($maxSubSegments)
    {

        if (!is_null($maxSubSegments) && ($maxSubSegments > 5)) {
            throw new \InvalidArgumentException('invalid value for $maxSubSegments when calling SearchByJobRequestDto., must be smaller than or equal to 5.');
        }
        if (!is_null($maxSubSegments) && ($maxSubSegments < 0)) {
            throw new \InvalidArgumentException('invalid value for $maxSubSegments when calling SearchByJobRequestDto., must be bigger than or equal to 0.');
        }

        $this->container['maxSubSegments'] = $maxSubSegments;

        return $this;
    }

    /**
     * Gets tagMetadata
     *
     * @return \Memsource\Model\TagMetadataDto[]
     */
    public function getTagMetadata()
    {
        return $this->container['tagMetadata'];
    }

    /**
     * Sets tagMetadata
     *
     * @param \Memsource\Model\TagMetadataDto[] $tagMetadata tagMetadata
     *
     * @return $this
     */
    public function setTagMetadata($tagMetadata)
    {
        $this->container['tagMetadata'] = $tagMetadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


