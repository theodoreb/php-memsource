<?php
/**
 * CsvSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * CsvSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CsvSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CsvSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'delimiter' => 'string',
        'delimiterType' => 'string',
        'htmlSubFilter' => 'bool',
        'tagRegexp' => 'string',
        'importColumns' => 'string',
        'contextNoteColumns' => 'string',
        'contextKeyColumn' => 'string',
        'maxLenColumn' => 'string',
        'importRows' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'delimiter' => null,
        'delimiterType' => null,
        'htmlSubFilter' => null,
        'tagRegexp' => null,
        'importColumns' => null,
        'contextNoteColumns' => null,
        'contextKeyColumn' => null,
        'maxLenColumn' => null,
        'importRows' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delimiter' => 'delimiter',
        'delimiterType' => 'delimiterType',
        'htmlSubFilter' => 'htmlSubFilter',
        'tagRegexp' => 'tagRegexp',
        'importColumns' => 'importColumns',
        'contextNoteColumns' => 'contextNoteColumns',
        'contextKeyColumn' => 'contextKeyColumn',
        'maxLenColumn' => 'maxLenColumn',
        'importRows' => 'importRows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delimiter' => 'setDelimiter',
        'delimiterType' => 'setDelimiterType',
        'htmlSubFilter' => 'setHtmlSubFilter',
        'tagRegexp' => 'setTagRegexp',
        'importColumns' => 'setImportColumns',
        'contextNoteColumns' => 'setContextNoteColumns',
        'contextKeyColumn' => 'setContextKeyColumn',
        'maxLenColumn' => 'setMaxLenColumn',
        'importRows' => 'setImportRows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delimiter' => 'getDelimiter',
        'delimiterType' => 'getDelimiterType',
        'htmlSubFilter' => 'getHtmlSubFilter',
        'tagRegexp' => 'getTagRegexp',
        'importColumns' => 'getImportColumns',
        'contextNoteColumns' => 'getContextNoteColumns',
        'contextKeyColumn' => 'getContextKeyColumn',
        'maxLenColumn' => 'getMaxLenColumn',
        'importRows' => 'getImportRows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIMITER_TYPE_TAB = 'TAB';
    const DELIMITER_TYPE_COMMA = 'COMMA';
    const DELIMITER_TYPE_SEMICOLON = 'SEMICOLON';
    const DELIMITER_TYPE_OTHER = 'OTHER';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDelimiterTypeAllowableValues()
    {
        return [
            self::DELIMITER_TYPE_TAB,
            self::DELIMITER_TYPE_COMMA,
            self::DELIMITER_TYPE_SEMICOLON,
            self::DELIMITER_TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delimiter'] = isset($data['delimiter']) ? $data['delimiter'] : null;
        $this->container['delimiterType'] = isset($data['delimiterType']) ? $data['delimiterType'] : null;
        $this->container['htmlSubFilter'] = isset($data['htmlSubFilter']) ? $data['htmlSubFilter'] : null;
        $this->container['tagRegexp'] = isset($data['tagRegexp']) ? $data['tagRegexp'] : null;
        $this->container['importColumns'] = isset($data['importColumns']) ? $data['importColumns'] : null;
        $this->container['contextNoteColumns'] = isset($data['contextNoteColumns']) ? $data['contextNoteColumns'] : null;
        $this->container['contextKeyColumn'] = isset($data['contextKeyColumn']) ? $data['contextKeyColumn'] : null;
        $this->container['maxLenColumn'] = isset($data['maxLenColumn']) ? $data['maxLenColumn'] : null;
        $this->container['importRows'] = isset($data['importRows']) ? $data['importRows'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDelimiterTypeAllowableValues();
        if (!in_array($this->container['delimiterType'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delimiterType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getDelimiterTypeAllowableValues();
        if (!in_array($this->container['delimiterType'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets delimiter
     *
     * @return string
     */
    public function getDelimiter()
    {
        return $this->container['delimiter'];
    }

    /**
     * Sets delimiter
     *
     * @param string $delimiter default: ,
     *
     * @return $this
     */
    public function setDelimiter($delimiter)
    {
        $this->container['delimiter'] = $delimiter;

        return $this;
    }

    /**
     * Gets delimiterType
     *
     * @return string
     */
    public function getDelimiterType()
    {
        return $this->container['delimiterType'];
    }

    /**
     * Sets delimiterType
     *
     * @param string $delimiterType default: COMMA
     *
     * @return $this
     */
    public function setDelimiterType($delimiterType)
    {
        $allowedValues = $this->getDelimiterTypeAllowableValues();
        if (!is_null($delimiterType) && !in_array($delimiterType, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delimiterType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delimiterType'] = $delimiterType;

        return $this;
    }

    /**
     * Gets htmlSubFilter
     *
     * @return bool
     */
    public function getHtmlSubFilter()
    {
        return $this->container['htmlSubFilter'];
    }

    /**
     * Sets htmlSubFilter
     *
     * @param bool $htmlSubFilter htmlSubFilter
     *
     * @return $this
     */
    public function setHtmlSubFilter($htmlSubFilter)
    {
        $this->container['htmlSubFilter'] = $htmlSubFilter;

        return $this;
    }

    /**
     * Gets tagRegexp
     *
     * @return string
     */
    public function getTagRegexp()
    {
        return $this->container['tagRegexp'];
    }

    /**
     * Sets tagRegexp
     *
     * @param string $tagRegexp tagRegexp
     *
     * @return $this
     */
    public function setTagRegexp($tagRegexp)
    {
        $this->container['tagRegexp'] = $tagRegexp;

        return $this;
    }

    /**
     * Gets importColumns
     *
     * @return string
     */
    public function getImportColumns()
    {
        return $this->container['importColumns'];
    }

    /**
     * Sets importColumns
     *
     * @param string $importColumns importColumns
     *
     * @return $this
     */
    public function setImportColumns($importColumns)
    {
        $this->container['importColumns'] = $importColumns;

        return $this;
    }

    /**
     * Gets contextNoteColumns
     *
     * @return string
     */
    public function getContextNoteColumns()
    {
        return $this->container['contextNoteColumns'];
    }

    /**
     * Sets contextNoteColumns
     *
     * @param string $contextNoteColumns contextNoteColumns
     *
     * @return $this
     */
    public function setContextNoteColumns($contextNoteColumns)
    {
        $this->container['contextNoteColumns'] = $contextNoteColumns;

        return $this;
    }

    /**
     * Gets contextKeyColumn
     *
     * @return string
     */
    public function getContextKeyColumn()
    {
        return $this->container['contextKeyColumn'];
    }

    /**
     * Sets contextKeyColumn
     *
     * @param string $contextKeyColumn contextKeyColumn
     *
     * @return $this
     */
    public function setContextKeyColumn($contextKeyColumn)
    {
        $this->container['contextKeyColumn'] = $contextKeyColumn;

        return $this;
    }

    /**
     * Gets maxLenColumn
     *
     * @return string
     */
    public function getMaxLenColumn()
    {
        return $this->container['maxLenColumn'];
    }

    /**
     * Sets maxLenColumn
     *
     * @param string $maxLenColumn maxLenColumn
     *
     * @return $this
     */
    public function setMaxLenColumn($maxLenColumn)
    {
        $this->container['maxLenColumn'] = $maxLenColumn;

        return $this;
    }

    /**
     * Gets importRows
     *
     * @return string
     */
    public function getImportRows()
    {
        return $this->container['importRows'];
    }

    /**
     * Sets importRows
     *
     * @param string $importRows importRows
     *
     * @return $this
     */
    public function setImportRows($importRows)
    {
        $this->container['importRows'] = $importRows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


