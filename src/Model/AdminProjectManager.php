<?php
/**
 * AdminProjectManager
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;
use \Memsource\ObjectSerializer;

/**
 * AdminProjectManager Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminProjectManager extends AbstractProjectDto 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Admin, Project Manager';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shared' => 'bool',
        'progress' => '\Memsource\Model\ProgressDto',
        'client' => '\Memsource\Model\ClientReference',
        'costCenter' => '\Memsource\Model\CostCenterReference',
        'businessUnit' => '\Memsource\Model\BusinessUnitReference',
        'dateDue' => '\DateTime',
        'status' => 'string',
        'purchaseOrder' => 'string',
        'isPublishedOnJobBoard' => 'bool',
        'note' => 'string',
        'createdBy' => '\Memsource\Model\UserReference',
        'qualityAssuranceSettings' => '\Memsource\Model\IdReference',
        'workflowSteps' => '\Memsource\Model\ProjectWorkflowStepDto[]',
        'analyseSettings' => '\Memsource\Model\IdReference',
        'accessSettings' => '\Memsource\Model\IdReference',
        'financialSettings' => '\Memsource\Model\IdReference',
        'mtSettingsPerLanguageList' => '\Memsource\Model\MTSettingsPerLanguageReference[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shared' => null,
        'progress' => null,
        'client' => null,
        'costCenter' => null,
        'businessUnit' => null,
        'dateDue' => 'date-time',
        'status' => null,
        'purchaseOrder' => null,
        'isPublishedOnJobBoard' => null,
        'note' => null,
        'createdBy' => null,
        'qualityAssuranceSettings' => null,
        'workflowSteps' => null,
        'analyseSettings' => null,
        'accessSettings' => null,
        'financialSettings' => null,
        'mtSettingsPerLanguageList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shared' => 'shared',
        'progress' => 'progress',
        'client' => 'client',
        'costCenter' => 'costCenter',
        'businessUnit' => 'businessUnit',
        'dateDue' => 'dateDue',
        'status' => 'status',
        'purchaseOrder' => 'purchaseOrder',
        'isPublishedOnJobBoard' => 'isPublishedOnJobBoard',
        'note' => 'note',
        'createdBy' => 'createdBy',
        'qualityAssuranceSettings' => 'qualityAssuranceSettings',
        'workflowSteps' => 'workflowSteps',
        'analyseSettings' => 'analyseSettings',
        'accessSettings' => 'accessSettings',
        'financialSettings' => 'financialSettings',
        'mtSettingsPerLanguageList' => 'mtSettingsPerLanguageList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shared' => 'setShared',
        'progress' => 'setProgress',
        'client' => 'setClient',
        'costCenter' => 'setCostCenter',
        'businessUnit' => 'setBusinessUnit',
        'dateDue' => 'setDateDue',
        'status' => 'setStatus',
        'purchaseOrder' => 'setPurchaseOrder',
        'isPublishedOnJobBoard' => 'setIsPublishedOnJobBoard',
        'note' => 'setNote',
        'createdBy' => 'setCreatedBy',
        'qualityAssuranceSettings' => 'setQualityAssuranceSettings',
        'workflowSteps' => 'setWorkflowSteps',
        'analyseSettings' => 'setAnalyseSettings',
        'accessSettings' => 'setAccessSettings',
        'financialSettings' => 'setFinancialSettings',
        'mtSettingsPerLanguageList' => 'setMtSettingsPerLanguageList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shared' => 'getShared',
        'progress' => 'getProgress',
        'client' => 'getClient',
        'costCenter' => 'getCostCenter',
        'businessUnit' => 'getBusinessUnit',
        'dateDue' => 'getDateDue',
        'status' => 'getStatus',
        'purchaseOrder' => 'getPurchaseOrder',
        'isPublishedOnJobBoard' => 'getIsPublishedOnJobBoard',
        'note' => 'getNote',
        'createdBy' => 'getCreatedBy',
        'qualityAssuranceSettings' => 'getQualityAssuranceSettings',
        'workflowSteps' => 'getWorkflowSteps',
        'analyseSettings' => 'getAnalyseSettings',
        'accessSettings' => 'getAccessSettings',
        'financialSettings' => 'getFinancialSettings',
        'mtSettingsPerLanguageList' => 'getMtSettingsPerLanguageList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS__NEW = 'NEW';
    const STATUS_ASSIGNED = 'ASSIGNED';
    const STATUS_COMPLETED = 'COMPLETED';
    const STATUS_ACCEPTED_BY_VENDOR = 'ACCEPTED_BY_VENDOR';
    const STATUS_DECLINED_BY_VENDOR = 'DECLINED_BY_VENDOR';
    const STATUS_COMPLETED_BY_VENDOR = 'COMPLETED_BY_VENDOR';
    const STATUS_CANCELLED = 'CANCELLED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__NEW,
            self::STATUS_ASSIGNED,
            self::STATUS_COMPLETED,
            self::STATUS_ACCEPTED_BY_VENDOR,
            self::STATUS_DECLINED_BY_VENDOR,
            self::STATUS_COMPLETED_BY_VENDOR,
            self::STATUS_CANCELLED,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['shared'] = isset($data['shared']) ? $data['shared'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['costCenter'] = isset($data['costCenter']) ? $data['costCenter'] : null;
        $this->container['businessUnit'] = isset($data['businessUnit']) ? $data['businessUnit'] : null;
        $this->container['dateDue'] = isset($data['dateDue']) ? $data['dateDue'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['purchaseOrder'] = isset($data['purchaseOrder']) ? $data['purchaseOrder'] : null;
        $this->container['isPublishedOnJobBoard'] = isset($data['isPublishedOnJobBoard']) ? $data['isPublishedOnJobBoard'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['qualityAssuranceSettings'] = isset($data['qualityAssuranceSettings']) ? $data['qualityAssuranceSettings'] : null;
        $this->container['workflowSteps'] = isset($data['workflowSteps']) ? $data['workflowSteps'] : null;
        $this->container['analyseSettings'] = isset($data['analyseSettings']) ? $data['analyseSettings'] : null;
        $this->container['accessSettings'] = isset($data['accessSettings']) ? $data['accessSettings'] : null;
        $this->container['financialSettings'] = isset($data['financialSettings']) ? $data['financialSettings'] : null;
        $this->container['mtSettingsPerLanguageList'] = isset($data['mtSettingsPerLanguageList']) ? $data['mtSettingsPerLanguageList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets shared
     *
     * @return bool
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool $shared shared
     *
     * @return $this
     */
    public function setShared($shared)
    {
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return \Memsource\Model\ProgressDto
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param \Memsource\Model\ProgressDto $progress progress
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Memsource\Model\ClientReference
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Memsource\Model\ClientReference $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets costCenter
     *
     * @return \Memsource\Model\CostCenterReference
     */
    public function getCostCenter()
    {
        return $this->container['costCenter'];
    }

    /**
     * Sets costCenter
     *
     * @param \Memsource\Model\CostCenterReference $costCenter costCenter
     *
     * @return $this
     */
    public function setCostCenter($costCenter)
    {
        $this->container['costCenter'] = $costCenter;

        return $this;
    }

    /**
     * Gets businessUnit
     *
     * @return \Memsource\Model\BusinessUnitReference
     */
    public function getBusinessUnit()
    {
        return $this->container['businessUnit'];
    }

    /**
     * Sets businessUnit
     *
     * @param \Memsource\Model\BusinessUnitReference $businessUnit businessUnit
     *
     * @return $this
     */
    public function setBusinessUnit($businessUnit)
    {
        $this->container['businessUnit'] = $businessUnit;

        return $this;
    }

    /**
     * Gets dateDue
     *
     * @return \DateTime
     */
    public function getDateDue()
    {
        return $this->container['dateDue'];
    }

    /**
     * Sets dateDue
     *
     * @param \DateTime $dateDue dateDue
     *
     * @return $this
     */
    public function setDateDue($dateDue)
    {
        $this->container['dateDue'] = $dateDue;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets purchaseOrder
     *
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchaseOrder'];
    }

    /**
     * Sets purchaseOrder
     *
     * @param string $purchaseOrder purchaseOrder
     *
     * @return $this
     */
    public function setPurchaseOrder($purchaseOrder)
    {
        $this->container['purchaseOrder'] = $purchaseOrder;

        return $this;
    }

    /**
     * Gets isPublishedOnJobBoard
     *
     * @return bool
     */
    public function getIsPublishedOnJobBoard()
    {
        return $this->container['isPublishedOnJobBoard'];
    }

    /**
     * Sets isPublishedOnJobBoard
     *
     * @param bool $isPublishedOnJobBoard isPublishedOnJobBoard
     *
     * @return $this
     */
    public function setIsPublishedOnJobBoard($isPublishedOnJobBoard)
    {
        $this->container['isPublishedOnJobBoard'] = $isPublishedOnJobBoard;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \Memsource\Model\UserReference
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \Memsource\Model\UserReference $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets qualityAssuranceSettings
     *
     * @return \Memsource\Model\IdReference
     */
    public function getQualityAssuranceSettings()
    {
        return $this->container['qualityAssuranceSettings'];
    }

    /**
     * Sets qualityAssuranceSettings
     *
     * @param \Memsource\Model\IdReference $qualityAssuranceSettings qualityAssuranceSettings
     *
     * @return $this
     */
    public function setQualityAssuranceSettings($qualityAssuranceSettings)
    {
        $this->container['qualityAssuranceSettings'] = $qualityAssuranceSettings;

        return $this;
    }

    /**
     * Gets workflowSteps
     *
     * @return \Memsource\Model\ProjectWorkflowStepDto[]
     */
    public function getWorkflowSteps()
    {
        return $this->container['workflowSteps'];
    }

    /**
     * Sets workflowSteps
     *
     * @param \Memsource\Model\ProjectWorkflowStepDto[] $workflowSteps workflowSteps
     *
     * @return $this
     */
    public function setWorkflowSteps($workflowSteps)
    {
        $this->container['workflowSteps'] = $workflowSteps;

        return $this;
    }

    /**
     * Gets analyseSettings
     *
     * @return \Memsource\Model\IdReference
     */
    public function getAnalyseSettings()
    {
        return $this->container['analyseSettings'];
    }

    /**
     * Sets analyseSettings
     *
     * @param \Memsource\Model\IdReference $analyseSettings analyseSettings
     *
     * @return $this
     */
    public function setAnalyseSettings($analyseSettings)
    {
        $this->container['analyseSettings'] = $analyseSettings;

        return $this;
    }

    /**
     * Gets accessSettings
     *
     * @return \Memsource\Model\IdReference
     */
    public function getAccessSettings()
    {
        return $this->container['accessSettings'];
    }

    /**
     * Sets accessSettings
     *
     * @param \Memsource\Model\IdReference $accessSettings accessSettings
     *
     * @return $this
     */
    public function setAccessSettings($accessSettings)
    {
        $this->container['accessSettings'] = $accessSettings;

        return $this;
    }

    /**
     * Gets financialSettings
     *
     * @return \Memsource\Model\IdReference
     */
    public function getFinancialSettings()
    {
        return $this->container['financialSettings'];
    }

    /**
     * Sets financialSettings
     *
     * @param \Memsource\Model\IdReference $financialSettings financialSettings
     *
     * @return $this
     */
    public function setFinancialSettings($financialSettings)
    {
        $this->container['financialSettings'] = $financialSettings;

        return $this;
    }

    /**
     * Gets mtSettingsPerLanguageList
     *
     * @return \Memsource\Model\MTSettingsPerLanguageReference[]
     */
    public function getMtSettingsPerLanguageList()
    {
        return $this->container['mtSettingsPerLanguageList'];
    }

    /**
     * Sets mtSettingsPerLanguageList
     *
     * @param \Memsource\Model\MTSettingsPerLanguageReference[] $mtSettingsPerLanguageList mtSettingsPerLanguageList
     *
     * @return $this
     */
    public function setMtSettingsPerLanguageList($mtSettingsPerLanguageList)
    {
        $this->container['mtSettingsPerLanguageList'] = $mtSettingsPerLanguageList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


