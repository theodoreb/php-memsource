<?php
/**
 * HumanTranslateJobsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * HumanTranslateJobsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HumanTranslateJobsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HumanTranslateJobsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jobs' => '\Memsource\Model\UidReference[]',
        'humanTranslateSettings' => '\Memsource\Model\IdReference',
        'comment' => 'string',
        'glossaryId' => 'string',
        'usePreferredTranslators' => 'bool',
        'level' => 'string',
        'callbackUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jobs' => null,
        'humanTranslateSettings' => null,
        'comment' => null,
        'glossaryId' => null,
        'usePreferredTranslators' => null,
        'level' => null,
        'callbackUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobs' => 'jobs',
        'humanTranslateSettings' => 'humanTranslateSettings',
        'comment' => 'comment',
        'glossaryId' => 'glossaryId',
        'usePreferredTranslators' => 'usePreferredTranslators',
        'level' => 'level',
        'callbackUrl' => 'callbackUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobs' => 'setJobs',
        'humanTranslateSettings' => 'setHumanTranslateSettings',
        'comment' => 'setComment',
        'glossaryId' => 'setGlossaryId',
        'usePreferredTranslators' => 'setUsePreferredTranslators',
        'level' => 'setLevel',
        'callbackUrl' => 'setCallbackUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobs' => 'getJobs',
        'humanTranslateSettings' => 'getHumanTranslateSettings',
        'comment' => 'getComment',
        'glossaryId' => 'getGlossaryId',
        'usePreferredTranslators' => 'getUsePreferredTranslators',
        'level' => 'getLevel',
        'callbackUrl' => 'getCallbackUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LEVEL_STANDARD = 'STANDARD';
    const LEVEL_PRO = 'PRO';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLevelAllowableValues()
    {
        return [
            self::LEVEL_STANDARD,
            self::LEVEL_PRO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jobs'] = isset($data['jobs']) ? $data['jobs'] : null;
        $this->container['humanTranslateSettings'] = isset($data['humanTranslateSettings']) ? $data['humanTranslateSettings'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['glossaryId'] = isset($data['glossaryId']) ? $data['glossaryId'] : null;
        $this->container['usePreferredTranslators'] = isset($data['usePreferredTranslators']) ? $data['usePreferredTranslators'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['callbackUrl'] = isset($data['callbackUrl']) ? $data['callbackUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jobs'] === null) {
            $invalidProperties[] = "'jobs' can't be null";
        }
        if ($this->container['humanTranslateSettings'] === null) {
            $invalidProperties[] = "'humanTranslateSettings' can't be null";
        }
        $allowedValues = $this->getLevelAllowableValues();
        if (!in_array($this->container['level'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['jobs'] === null) {
            return false;
        }
        if ($this->container['humanTranslateSettings'] === null) {
            return false;
        }
        $allowedValues = $this->getLevelAllowableValues();
        if (!in_array($this->container['level'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets jobs
     *
     * @return \Memsource\Model\UidReference[]
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \Memsource\Model\UidReference[] $jobs jobs
     *
     * @return $this
     */
    public function setJobs($jobs)
    {
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets humanTranslateSettings
     *
     * @return \Memsource\Model\IdReference
     */
    public function getHumanTranslateSettings()
    {
        return $this->container['humanTranslateSettings'];
    }

    /**
     * Sets humanTranslateSettings
     *
     * @param \Memsource\Model\IdReference $humanTranslateSettings humanTranslateSettings
     *
     * @return $this
     */
    public function setHumanTranslateSettings($humanTranslateSettings)
    {
        $this->container['humanTranslateSettings'] = $humanTranslateSettings;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets glossaryId
     *
     * @return string
     */
    public function getGlossaryId()
    {
        return $this->container['glossaryId'];
    }

    /**
     * Sets glossaryId
     *
     * @param string $glossaryId glossaryId
     *
     * @return $this
     */
    public function setGlossaryId($glossaryId)
    {
        $this->container['glossaryId'] = $glossaryId;

        return $this;
    }

    /**
     * Gets usePreferredTranslators
     *
     * @return bool
     */
    public function getUsePreferredTranslators()
    {
        return $this->container['usePreferredTranslators'];
    }

    /**
     * Sets usePreferredTranslators
     *
     * @param bool $usePreferredTranslators usePreferredTranslators
     *
     * @return $this
     */
    public function setUsePreferredTranslators($usePreferredTranslators)
    {
        $this->container['usePreferredTranslators'] = $usePreferredTranslators;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($level) && !in_array($level, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string $callbackUrl callbackUrl
     *
     * @return $this
     */
    public function setCallbackUrl($callbackUrl)
    {
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


