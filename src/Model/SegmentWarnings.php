<?php
/**
 * SegmentWarnings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * SegmentWarnings Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SegmentWarnings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SegmentWarnings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segmentId' => 'string',
        'warnings' => '\Memsource\Model\Warning[]',
        'ignoredChecks' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segmentId' => null,
        'warnings' => null,
        'ignoredChecks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segmentId' => 'segmentId',
        'warnings' => 'warnings',
        'ignoredChecks' => 'ignoredChecks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segmentId' => 'setSegmentId',
        'warnings' => 'setWarnings',
        'ignoredChecks' => 'setIgnoredChecks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segmentId' => 'getSegmentId',
        'warnings' => 'getWarnings',
        'ignoredChecks' => 'getIgnoredChecks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IGNORED_CHECKS_EMPTY_TRANSLATION = 'EmptyTranslation';
    const IGNORED_CHECKS_TRAILING_PUNCTUATION = 'TrailingPunctuation';
    const IGNORED_CHECKS_FORMATTING = 'Formatting';
    const IGNORED_CHECKS_JOIN_TAGS = 'JoinTags';
    const IGNORED_CHECKS_MISSING_NUMBERS = 'MissingNumbers';
    const IGNORED_CHECKS_MULTIPLE_SPACES = 'MultipleSpaces';
    const IGNORED_CHECKS_TERMINOLOGY = 'Terminology';
    const IGNORED_CHECKS_NOT_CONFIRMED = 'NotConfirmed';
    const IGNORED_CHECKS_TRANSLATION_LENGTH = 'TranslationLength';
    const IGNORED_CHECKS_TRAILING_SPACE = 'TrailingSpace';
    const IGNORED_CHECKS_UNRESOLVED_COMMENT = 'UnresolvedComment';
    const IGNORED_CHECKS_EMPTY_PAIR_TAGS = 'EmptyPairTags';
    const IGNORED_CHECKS_INCONSISTENT_TRANSLATION_TARGET_SOURCE = 'InconsistentTranslationTargetSource';
    const IGNORED_CHECKS_INCONSISTENT_TRANSLATION_SOURCE_TARGET = 'InconsistentTranslationSourceTarget';
    const IGNORED_CHECKS_FORBIDDEN_STRINGS = 'ForbiddenStrings';
    const IGNORED_CHECKS_SPELL_CHECK = 'SpellCheck';
    const IGNORED_CHECKS_REPEATED_WORDS = 'RepeatedWords';
    const IGNORED_CHECKS_INCONSISTENT_TAG_CONTENT = 'InconsistentTagContent';
    const IGNORED_CHECKS_EMPTY_TAG_CONTENT = 'EmptyTagContent';
    const IGNORED_CHECKS_MALFORMED = 'Malformed';
    const IGNORED_CHECKS_FORBIDDEN_TERMS = 'ForbiddenTerms';
    const IGNORED_CHECKS_NEWER_AT_LOWER_LEVEL = 'NewerAtLowerLevel';
    const IGNORED_CHECKS_LEADING_AND_TRAILING_SPACES = 'LeadingAndTrailingSpaces';
    const IGNORED_CHECKS_TARGET_SOURCE_IDENTICAL = 'TargetSourceIdentical';
    const IGNORED_CHECKS_SOURCE_OR_TARGET_REGEXP = 'SourceOrTargetRegexp';
    const IGNORED_CHECKS_UNMODIFIED_FUZZY_TRANSLATION = 'UnmodifiedFuzzyTranslation';
    const IGNORED_CHECKS_MORAVIA = 'Moravia';
    const IGNORED_CHECKS_EXTRA_NUMBERS = 'ExtraNumbers';
    const IGNORED_CHECKS_UNRESOLVED_CONVERSATION = 'UnresolvedConversation';
    const IGNORED_CHECKS_NESTED_TAGS = 'NestedTags';
    const IGNORED_CHECKS_INCONSISTENT_TRANSLATION = 'InconsistentTranslation';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIgnoredChecksAllowableValues()
    {
        return [
            self::IGNORED_CHECKS_EMPTY_TRANSLATION,
            self::IGNORED_CHECKS_TRAILING_PUNCTUATION,
            self::IGNORED_CHECKS_FORMATTING,
            self::IGNORED_CHECKS_JOIN_TAGS,
            self::IGNORED_CHECKS_MISSING_NUMBERS,
            self::IGNORED_CHECKS_MULTIPLE_SPACES,
            self::IGNORED_CHECKS_TERMINOLOGY,
            self::IGNORED_CHECKS_NOT_CONFIRMED,
            self::IGNORED_CHECKS_TRANSLATION_LENGTH,
            self::IGNORED_CHECKS_TRAILING_SPACE,
            self::IGNORED_CHECKS_UNRESOLVED_COMMENT,
            self::IGNORED_CHECKS_EMPTY_PAIR_TAGS,
            self::IGNORED_CHECKS_INCONSISTENT_TRANSLATION_TARGET_SOURCE,
            self::IGNORED_CHECKS_INCONSISTENT_TRANSLATION_SOURCE_TARGET,
            self::IGNORED_CHECKS_FORBIDDEN_STRINGS,
            self::IGNORED_CHECKS_SPELL_CHECK,
            self::IGNORED_CHECKS_REPEATED_WORDS,
            self::IGNORED_CHECKS_INCONSISTENT_TAG_CONTENT,
            self::IGNORED_CHECKS_EMPTY_TAG_CONTENT,
            self::IGNORED_CHECKS_MALFORMED,
            self::IGNORED_CHECKS_FORBIDDEN_TERMS,
            self::IGNORED_CHECKS_NEWER_AT_LOWER_LEVEL,
            self::IGNORED_CHECKS_LEADING_AND_TRAILING_SPACES,
            self::IGNORED_CHECKS_TARGET_SOURCE_IDENTICAL,
            self::IGNORED_CHECKS_SOURCE_OR_TARGET_REGEXP,
            self::IGNORED_CHECKS_UNMODIFIED_FUZZY_TRANSLATION,
            self::IGNORED_CHECKS_MORAVIA,
            self::IGNORED_CHECKS_EXTRA_NUMBERS,
            self::IGNORED_CHECKS_UNRESOLVED_CONVERSATION,
            self::IGNORED_CHECKS_NESTED_TAGS,
            self::IGNORED_CHECKS_INCONSISTENT_TRANSLATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segmentId'] = isset($data['segmentId']) ? $data['segmentId'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
        $this->container['ignoredChecks'] = isset($data['ignoredChecks']) ? $data['ignoredChecks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets segmentId
     *
     * @return string
     */
    public function getSegmentId()
    {
        return $this->container['segmentId'];
    }

    /**
     * Sets segmentId
     *
     * @param string $segmentId segmentId
     *
     * @return $this
     */
    public function setSegmentId($segmentId)
    {
        $this->container['segmentId'] = $segmentId;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \Memsource\Model\Warning[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \Memsource\Model\Warning[] $warnings warnings
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets ignoredChecks
     *
     * @return string[]
     */
    public function getIgnoredChecks()
    {
        return $this->container['ignoredChecks'];
    }

    /**
     * Sets ignoredChecks
     *
     * @param string[] $ignoredChecks ignoredChecks
     *
     * @return $this
     */
    public function setIgnoredChecks($ignoredChecks)
    {
        $allowedValues = $this->getIgnoredChecksAllowableValues();
        if (!is_null($ignoredChecks) && array_diff($ignoredChecks, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ignoredChecks', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ignoredChecks'] = $ignoredChecks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


