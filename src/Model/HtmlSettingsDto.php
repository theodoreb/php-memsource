<?php
/**
 * HtmlSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * HtmlSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HtmlSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HtmlSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'breakTagCreatesSegment' => 'bool',
        'unknownTagCreatesTag' => 'bool',
        'preserveWhitespace' => 'bool',
        'importComments' => 'bool',
        'excludeElements' => 'string',
        'tagRegexp' => 'string',
        'charEntitiesToTags' => 'string',
        'translateMetaTagRegexp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'breakTagCreatesSegment' => null,
        'unknownTagCreatesTag' => null,
        'preserveWhitespace' => null,
        'importComments' => null,
        'excludeElements' => null,
        'tagRegexp' => null,
        'charEntitiesToTags' => null,
        'translateMetaTagRegexp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'breakTagCreatesSegment' => 'breakTagCreatesSegment',
        'unknownTagCreatesTag' => 'unknownTagCreatesTag',
        'preserveWhitespace' => 'preserveWhitespace',
        'importComments' => 'importComments',
        'excludeElements' => 'excludeElements',
        'tagRegexp' => 'tagRegexp',
        'charEntitiesToTags' => 'charEntitiesToTags',
        'translateMetaTagRegexp' => 'translateMetaTagRegexp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'breakTagCreatesSegment' => 'setBreakTagCreatesSegment',
        'unknownTagCreatesTag' => 'setUnknownTagCreatesTag',
        'preserveWhitespace' => 'setPreserveWhitespace',
        'importComments' => 'setImportComments',
        'excludeElements' => 'setExcludeElements',
        'tagRegexp' => 'setTagRegexp',
        'charEntitiesToTags' => 'setCharEntitiesToTags',
        'translateMetaTagRegexp' => 'setTranslateMetaTagRegexp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'breakTagCreatesSegment' => 'getBreakTagCreatesSegment',
        'unknownTagCreatesTag' => 'getUnknownTagCreatesTag',
        'preserveWhitespace' => 'getPreserveWhitespace',
        'importComments' => 'getImportComments',
        'excludeElements' => 'getExcludeElements',
        'tagRegexp' => 'getTagRegexp',
        'charEntitiesToTags' => 'getCharEntitiesToTags',
        'translateMetaTagRegexp' => 'getTranslateMetaTagRegexp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['breakTagCreatesSegment'] = isset($data['breakTagCreatesSegment']) ? $data['breakTagCreatesSegment'] : null;
        $this->container['unknownTagCreatesTag'] = isset($data['unknownTagCreatesTag']) ? $data['unknownTagCreatesTag'] : null;
        $this->container['preserveWhitespace'] = isset($data['preserveWhitespace']) ? $data['preserveWhitespace'] : null;
        $this->container['importComments'] = isset($data['importComments']) ? $data['importComments'] : null;
        $this->container['excludeElements'] = isset($data['excludeElements']) ? $data['excludeElements'] : null;
        $this->container['tagRegexp'] = isset($data['tagRegexp']) ? $data['tagRegexp'] : null;
        $this->container['charEntitiesToTags'] = isset($data['charEntitiesToTags']) ? $data['charEntitiesToTags'] : null;
        $this->container['translateMetaTagRegexp'] = isset($data['translateMetaTagRegexp']) ? $data['translateMetaTagRegexp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets breakTagCreatesSegment
     *
     * @return bool
     */
    public function getBreakTagCreatesSegment()
    {
        return $this->container['breakTagCreatesSegment'];
    }

    /**
     * Sets breakTagCreatesSegment
     *
     * @param bool $breakTagCreatesSegment default: true
     *
     * @return $this
     */
    public function setBreakTagCreatesSegment($breakTagCreatesSegment)
    {
        $this->container['breakTagCreatesSegment'] = $breakTagCreatesSegment;

        return $this;
    }

    /**
     * Gets unknownTagCreatesTag
     *
     * @return bool
     */
    public function getUnknownTagCreatesTag()
    {
        return $this->container['unknownTagCreatesTag'];
    }

    /**
     * Sets unknownTagCreatesTag
     *
     * @param bool $unknownTagCreatesTag default: true
     *
     * @return $this
     */
    public function setUnknownTagCreatesTag($unknownTagCreatesTag)
    {
        $this->container['unknownTagCreatesTag'] = $unknownTagCreatesTag;

        return $this;
    }

    /**
     * Gets preserveWhitespace
     *
     * @return bool
     */
    public function getPreserveWhitespace()
    {
        return $this->container['preserveWhitespace'];
    }

    /**
     * Sets preserveWhitespace
     *
     * @param bool $preserveWhitespace preserveWhitespace
     *
     * @return $this
     */
    public function setPreserveWhitespace($preserveWhitespace)
    {
        $this->container['preserveWhitespace'] = $preserveWhitespace;

        return $this;
    }

    /**
     * Gets importComments
     *
     * @return bool
     */
    public function getImportComments()
    {
        return $this->container['importComments'];
    }

    /**
     * Sets importComments
     *
     * @param bool $importComments default: true
     *
     * @return $this
     */
    public function setImportComments($importComments)
    {
        $this->container['importComments'] = $importComments;

        return $this;
    }

    /**
     * Gets excludeElements
     *
     * @return string
     */
    public function getExcludeElements()
    {
        return $this->container['excludeElements'];
    }

    /**
     * Sets excludeElements
     *
     * @param string $excludeElements example: \"script,blockquote\"
     *
     * @return $this
     */
    public function setExcludeElements($excludeElements)
    {
        $this->container['excludeElements'] = $excludeElements;

        return $this;
    }

    /**
     * Gets tagRegexp
     *
     * @return string
     */
    public function getTagRegexp()
    {
        return $this->container['tagRegexp'];
    }

    /**
     * Sets tagRegexp
     *
     * @param string $tagRegexp tagRegexp
     *
     * @return $this
     */
    public function setTagRegexp($tagRegexp)
    {
        $this->container['tagRegexp'] = $tagRegexp;

        return $this;
    }

    /**
     * Gets charEntitiesToTags
     *
     * @return string
     */
    public function getCharEntitiesToTags()
    {
        return $this->container['charEntitiesToTags'];
    }

    /**
     * Sets charEntitiesToTags
     *
     * @param string $charEntitiesToTags charEntitiesToTags
     *
     * @return $this
     */
    public function setCharEntitiesToTags($charEntitiesToTags)
    {
        $this->container['charEntitiesToTags'] = $charEntitiesToTags;

        return $this;
    }

    /**
     * Gets translateMetaTagRegexp
     *
     * @return string
     */
    public function getTranslateMetaTagRegexp()
    {
        return $this->container['translateMetaTagRegexp'];
    }

    /**
     * Sets translateMetaTagRegexp
     *
     * @param string $translateMetaTagRegexp translateMetaTagRegexp
     *
     * @return $this
     */
    public function setTranslateMetaTagRegexp($translateMetaTagRegexp)
    {
        $this->container['translateMetaTagRegexp'] = $translateMetaTagRegexp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


