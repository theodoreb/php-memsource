<?php
/**
 * XlfSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * XlfSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XlfSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XlfSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'importNotes' => 'bool',
        'segmentation' => 'bool',
        'skipImportRules' => 'string',
        'importAsConfirmedRules' => 'string',
        'importAsLockedRules' => 'string',
        'exportAttrsWhenConfirmedAndLocked' => 'string',
        'exportAttrsWhenConfirmedAndNotLocked' => 'string',
        'exportAttrsWhenNotConfirmedAndLocked' => 'string',
        'exportAttrsWhenNotConfirmedAndNotLocked' => 'string',
        'saveConfirmedSegments' => 'bool',
        'lineBreakTags' => 'bool',
        'preserveWhitespace' => 'bool',
        'contextType' => 'string',
        'copySourceToTargetIfNotImported' => 'bool',
        'importXPath' => 'string',
        'importAsConfirmedXPath' => 'string',
        'importAsLockedXPath' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'importNotes' => null,
        'segmentation' => null,
        'skipImportRules' => null,
        'importAsConfirmedRules' => null,
        'importAsLockedRules' => null,
        'exportAttrsWhenConfirmedAndLocked' => null,
        'exportAttrsWhenConfirmedAndNotLocked' => null,
        'exportAttrsWhenNotConfirmedAndLocked' => null,
        'exportAttrsWhenNotConfirmedAndNotLocked' => null,
        'saveConfirmedSegments' => null,
        'lineBreakTags' => null,
        'preserveWhitespace' => null,
        'contextType' => null,
        'copySourceToTargetIfNotImported' => null,
        'importXPath' => null,
        'importAsConfirmedXPath' => null,
        'importAsLockedXPath' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'importNotes' => 'importNotes',
        'segmentation' => 'segmentation',
        'skipImportRules' => 'skipImportRules',
        'importAsConfirmedRules' => 'importAsConfirmedRules',
        'importAsLockedRules' => 'importAsLockedRules',
        'exportAttrsWhenConfirmedAndLocked' => 'exportAttrsWhenConfirmedAndLocked',
        'exportAttrsWhenConfirmedAndNotLocked' => 'exportAttrsWhenConfirmedAndNotLocked',
        'exportAttrsWhenNotConfirmedAndLocked' => 'exportAttrsWhenNotConfirmedAndLocked',
        'exportAttrsWhenNotConfirmedAndNotLocked' => 'exportAttrsWhenNotConfirmedAndNotLocked',
        'saveConfirmedSegments' => 'saveConfirmedSegments',
        'lineBreakTags' => 'lineBreakTags',
        'preserveWhitespace' => 'preserveWhitespace',
        'contextType' => 'contextType',
        'copySourceToTargetIfNotImported' => 'copySourceToTargetIfNotImported',
        'importXPath' => 'importXPath',
        'importAsConfirmedXPath' => 'importAsConfirmedXPath',
        'importAsLockedXPath' => 'importAsLockedXPath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'importNotes' => 'setImportNotes',
        'segmentation' => 'setSegmentation',
        'skipImportRules' => 'setSkipImportRules',
        'importAsConfirmedRules' => 'setImportAsConfirmedRules',
        'importAsLockedRules' => 'setImportAsLockedRules',
        'exportAttrsWhenConfirmedAndLocked' => 'setExportAttrsWhenConfirmedAndLocked',
        'exportAttrsWhenConfirmedAndNotLocked' => 'setExportAttrsWhenConfirmedAndNotLocked',
        'exportAttrsWhenNotConfirmedAndLocked' => 'setExportAttrsWhenNotConfirmedAndLocked',
        'exportAttrsWhenNotConfirmedAndNotLocked' => 'setExportAttrsWhenNotConfirmedAndNotLocked',
        'saveConfirmedSegments' => 'setSaveConfirmedSegments',
        'lineBreakTags' => 'setLineBreakTags',
        'preserveWhitespace' => 'setPreserveWhitespace',
        'contextType' => 'setContextType',
        'copySourceToTargetIfNotImported' => 'setCopySourceToTargetIfNotImported',
        'importXPath' => 'setImportXPath',
        'importAsConfirmedXPath' => 'setImportAsConfirmedXPath',
        'importAsLockedXPath' => 'setImportAsLockedXPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'importNotes' => 'getImportNotes',
        'segmentation' => 'getSegmentation',
        'skipImportRules' => 'getSkipImportRules',
        'importAsConfirmedRules' => 'getImportAsConfirmedRules',
        'importAsLockedRules' => 'getImportAsLockedRules',
        'exportAttrsWhenConfirmedAndLocked' => 'getExportAttrsWhenConfirmedAndLocked',
        'exportAttrsWhenConfirmedAndNotLocked' => 'getExportAttrsWhenConfirmedAndNotLocked',
        'exportAttrsWhenNotConfirmedAndLocked' => 'getExportAttrsWhenNotConfirmedAndLocked',
        'exportAttrsWhenNotConfirmedAndNotLocked' => 'getExportAttrsWhenNotConfirmedAndNotLocked',
        'saveConfirmedSegments' => 'getSaveConfirmedSegments',
        'lineBreakTags' => 'getLineBreakTags',
        'preserveWhitespace' => 'getPreserveWhitespace',
        'contextType' => 'getContextType',
        'copySourceToTargetIfNotImported' => 'getCopySourceToTargetIfNotImported',
        'importXPath' => 'getImportXPath',
        'importAsConfirmedXPath' => 'getImportAsConfirmedXPath',
        'importAsLockedXPath' => 'getImportAsLockedXPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['importNotes'] = isset($data['importNotes']) ? $data['importNotes'] : null;
        $this->container['segmentation'] = isset($data['segmentation']) ? $data['segmentation'] : null;
        $this->container['skipImportRules'] = isset($data['skipImportRules']) ? $data['skipImportRules'] : null;
        $this->container['importAsConfirmedRules'] = isset($data['importAsConfirmedRules']) ? $data['importAsConfirmedRules'] : null;
        $this->container['importAsLockedRules'] = isset($data['importAsLockedRules']) ? $data['importAsLockedRules'] : null;
        $this->container['exportAttrsWhenConfirmedAndLocked'] = isset($data['exportAttrsWhenConfirmedAndLocked']) ? $data['exportAttrsWhenConfirmedAndLocked'] : null;
        $this->container['exportAttrsWhenConfirmedAndNotLocked'] = isset($data['exportAttrsWhenConfirmedAndNotLocked']) ? $data['exportAttrsWhenConfirmedAndNotLocked'] : null;
        $this->container['exportAttrsWhenNotConfirmedAndLocked'] = isset($data['exportAttrsWhenNotConfirmedAndLocked']) ? $data['exportAttrsWhenNotConfirmedAndLocked'] : null;
        $this->container['exportAttrsWhenNotConfirmedAndNotLocked'] = isset($data['exportAttrsWhenNotConfirmedAndNotLocked']) ? $data['exportAttrsWhenNotConfirmedAndNotLocked'] : null;
        $this->container['saveConfirmedSegments'] = isset($data['saveConfirmedSegments']) ? $data['saveConfirmedSegments'] : null;
        $this->container['lineBreakTags'] = isset($data['lineBreakTags']) ? $data['lineBreakTags'] : null;
        $this->container['preserveWhitespace'] = isset($data['preserveWhitespace']) ? $data['preserveWhitespace'] : null;
        $this->container['contextType'] = isset($data['contextType']) ? $data['contextType'] : null;
        $this->container['copySourceToTargetIfNotImported'] = isset($data['copySourceToTargetIfNotImported']) ? $data['copySourceToTargetIfNotImported'] : null;
        $this->container['importXPath'] = isset($data['importXPath']) ? $data['importXPath'] : null;
        $this->container['importAsConfirmedXPath'] = isset($data['importAsConfirmedXPath']) ? $data['importAsConfirmedXPath'] : null;
        $this->container['importAsLockedXPath'] = isset($data['importAsLockedXPath']) ? $data['importAsLockedXPath'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets importNotes
     *
     * @return bool
     */
    public function getImportNotes()
    {
        return $this->container['importNotes'];
    }

    /**
     * Sets importNotes
     *
     * @param bool $importNotes default: true
     *
     * @return $this
     */
    public function setImportNotes($importNotes)
    {
        $this->container['importNotes'] = $importNotes;

        return $this;
    }

    /**
     * Gets segmentation
     *
     * @return bool
     */
    public function getSegmentation()
    {
        return $this->container['segmentation'];
    }

    /**
     * Sets segmentation
     *
     * @param bool $segmentation default: true
     *
     * @return $this
     */
    public function setSegmentation($segmentation)
    {
        $this->container['segmentation'] = $segmentation;

        return $this;
    }

    /**
     * Gets skipImportRules
     *
     * @return string
     */
    public function getSkipImportRules()
    {
        return $this->container['skipImportRules'];
    }

    /**
     * Sets skipImportRules
     *
     * @param string $skipImportRules default: translate=no; examples: translate=no;approved=no;state=needs-adaptation
     *
     * @return $this
     */
    public function setSkipImportRules($skipImportRules)
    {
        $this->container['skipImportRules'] = $skipImportRules;

        return $this;
    }

    /**
     * Gets importAsConfirmedRules
     *
     * @return string
     */
    public function getImportAsConfirmedRules()
    {
        return $this->container['importAsConfirmedRules'];
    }

    /**
     * Sets importAsConfirmedRules
     *
     * @param string $importAsConfirmedRules multiple rules must be separated by semicolon
     *
     * @return $this
     */
    public function setImportAsConfirmedRules($importAsConfirmedRules)
    {
        $this->container['importAsConfirmedRules'] = $importAsConfirmedRules;

        return $this;
    }

    /**
     * Gets importAsLockedRules
     *
     * @return string
     */
    public function getImportAsLockedRules()
    {
        return $this->container['importAsLockedRules'];
    }

    /**
     * Sets importAsLockedRules
     *
     * @param string $importAsLockedRules importAsLockedRules
     *
     * @return $this
     */
    public function setImportAsLockedRules($importAsLockedRules)
    {
        $this->container['importAsLockedRules'] = $importAsLockedRules;

        return $this;
    }

    /**
     * Gets exportAttrsWhenConfirmedAndLocked
     *
     * @return string
     */
    public function getExportAttrsWhenConfirmedAndLocked()
    {
        return $this->container['exportAttrsWhenConfirmedAndLocked'];
    }

    /**
     * Sets exportAttrsWhenConfirmedAndLocked
     *
     * @param string $exportAttrsWhenConfirmedAndLocked exportAttrsWhenConfirmedAndLocked
     *
     * @return $this
     */
    public function setExportAttrsWhenConfirmedAndLocked($exportAttrsWhenConfirmedAndLocked)
    {
        $this->container['exportAttrsWhenConfirmedAndLocked'] = $exportAttrsWhenConfirmedAndLocked;

        return $this;
    }

    /**
     * Gets exportAttrsWhenConfirmedAndNotLocked
     *
     * @return string
     */
    public function getExportAttrsWhenConfirmedAndNotLocked()
    {
        return $this->container['exportAttrsWhenConfirmedAndNotLocked'];
    }

    /**
     * Sets exportAttrsWhenConfirmedAndNotLocked
     *
     * @param string $exportAttrsWhenConfirmedAndNotLocked exportAttrsWhenConfirmedAndNotLocked
     *
     * @return $this
     */
    public function setExportAttrsWhenConfirmedAndNotLocked($exportAttrsWhenConfirmedAndNotLocked)
    {
        $this->container['exportAttrsWhenConfirmedAndNotLocked'] = $exportAttrsWhenConfirmedAndNotLocked;

        return $this;
    }

    /**
     * Gets exportAttrsWhenNotConfirmedAndLocked
     *
     * @return string
     */
    public function getExportAttrsWhenNotConfirmedAndLocked()
    {
        return $this->container['exportAttrsWhenNotConfirmedAndLocked'];
    }

    /**
     * Sets exportAttrsWhenNotConfirmedAndLocked
     *
     * @param string $exportAttrsWhenNotConfirmedAndLocked exportAttrsWhenNotConfirmedAndLocked
     *
     * @return $this
     */
    public function setExportAttrsWhenNotConfirmedAndLocked($exportAttrsWhenNotConfirmedAndLocked)
    {
        $this->container['exportAttrsWhenNotConfirmedAndLocked'] = $exportAttrsWhenNotConfirmedAndLocked;

        return $this;
    }

    /**
     * Gets exportAttrsWhenNotConfirmedAndNotLocked
     *
     * @return string
     */
    public function getExportAttrsWhenNotConfirmedAndNotLocked()
    {
        return $this->container['exportAttrsWhenNotConfirmedAndNotLocked'];
    }

    /**
     * Sets exportAttrsWhenNotConfirmedAndNotLocked
     *
     * @param string $exportAttrsWhenNotConfirmedAndNotLocked exportAttrsWhenNotConfirmedAndNotLocked
     *
     * @return $this
     */
    public function setExportAttrsWhenNotConfirmedAndNotLocked($exportAttrsWhenNotConfirmedAndNotLocked)
    {
        $this->container['exportAttrsWhenNotConfirmedAndNotLocked'] = $exportAttrsWhenNotConfirmedAndNotLocked;

        return $this;
    }

    /**
     * Gets saveConfirmedSegments
     *
     * @return bool
     */
    public function getSaveConfirmedSegments()
    {
        return $this->container['saveConfirmedSegments'];
    }

    /**
     * Sets saveConfirmedSegments
     *
     * @param bool $saveConfirmedSegments default: true
     *
     * @return $this
     */
    public function setSaveConfirmedSegments($saveConfirmedSegments)
    {
        $this->container['saveConfirmedSegments'] = $saveConfirmedSegments;

        return $this;
    }

    /**
     * Gets lineBreakTags
     *
     * @return bool
     */
    public function getLineBreakTags()
    {
        return $this->container['lineBreakTags'];
    }

    /**
     * Sets lineBreakTags
     *
     * @param bool $lineBreakTags lineBreakTags
     *
     * @return $this
     */
    public function setLineBreakTags($lineBreakTags)
    {
        $this->container['lineBreakTags'] = $lineBreakTags;

        return $this;
    }

    /**
     * Gets preserveWhitespace
     *
     * @return bool
     */
    public function getPreserveWhitespace()
    {
        return $this->container['preserveWhitespace'];
    }

    /**
     * Sets preserveWhitespace
     *
     * @param bool $preserveWhitespace default: true
     *
     * @return $this
     */
    public function setPreserveWhitespace($preserveWhitespace)
    {
        $this->container['preserveWhitespace'] = $preserveWhitespace;

        return $this;
    }

    /**
     * Gets contextType
     *
     * @return string
     */
    public function getContextType()
    {
        return $this->container['contextType'];
    }

    /**
     * Sets contextType
     *
     * @param string $contextType contextType
     *
     * @return $this
     */
    public function setContextType($contextType)
    {
        $this->container['contextType'] = $contextType;

        return $this;
    }

    /**
     * Gets copySourceToTargetIfNotImported
     *
     * @return bool
     */
    public function getCopySourceToTargetIfNotImported()
    {
        return $this->container['copySourceToTargetIfNotImported'];
    }

    /**
     * Sets copySourceToTargetIfNotImported
     *
     * @param bool $copySourceToTargetIfNotImported default: true
     *
     * @return $this
     */
    public function setCopySourceToTargetIfNotImported($copySourceToTargetIfNotImported)
    {
        $this->container['copySourceToTargetIfNotImported'] = $copySourceToTargetIfNotImported;

        return $this;
    }

    /**
     * Gets importXPath
     *
     * @return string
     */
    public function getImportXPath()
    {
        return $this->container['importXPath'];
    }

    /**
     * Sets importXPath
     *
     * @param string $importXPath importXPath
     *
     * @return $this
     */
    public function setImportXPath($importXPath)
    {
        $this->container['importXPath'] = $importXPath;

        return $this;
    }

    /**
     * Gets importAsConfirmedXPath
     *
     * @return string
     */
    public function getImportAsConfirmedXPath()
    {
        return $this->container['importAsConfirmedXPath'];
    }

    /**
     * Sets importAsConfirmedXPath
     *
     * @param string $importAsConfirmedXPath importAsConfirmedXPath
     *
     * @return $this
     */
    public function setImportAsConfirmedXPath($importAsConfirmedXPath)
    {
        $this->container['importAsConfirmedXPath'] = $importAsConfirmedXPath;

        return $this;
    }

    /**
     * Gets importAsLockedXPath
     *
     * @return string
     */
    public function getImportAsLockedXPath()
    {
        return $this->container['importAsLockedXPath'];
    }

    /**
     * Sets importAsLockedXPath
     *
     * @param string $importAsLockedXPath importAsLockedXPath
     *
     * @return $this
     */
    public function setImportAsLockedXPath($importAsLockedXPath)
    {
        $this->container['importAsLockedXPath'] = $importAsLockedXPath;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


