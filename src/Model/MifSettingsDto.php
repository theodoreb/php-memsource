<?php
/**
 * MifSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * MifSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MifSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MifSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'extractBodyPages' => 'bool',
        'extractReferencePages' => 'bool',
        'extractMasterPages' => 'bool',
        'extractHiddenPages' => 'bool',
        'extractVariables' => 'bool',
        'extractIndexMarkers' => 'bool',
        'extractLinks' => 'bool',
        'extractXRefDef' => 'bool',
        'extractPgfNumFormat' => 'bool',
        'extractCustomReferencePages' => 'bool',
        'extractDefaultReferencePages' => 'bool',
        'extractUsedVariables' => 'bool',
        'extractHiddenCondText' => 'bool',
        'extractUsedXRefDef' => 'bool',
        'extractUsedPgfNumFormat' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'extractBodyPages' => null,
        'extractReferencePages' => null,
        'extractMasterPages' => null,
        'extractHiddenPages' => null,
        'extractVariables' => null,
        'extractIndexMarkers' => null,
        'extractLinks' => null,
        'extractXRefDef' => null,
        'extractPgfNumFormat' => null,
        'extractCustomReferencePages' => null,
        'extractDefaultReferencePages' => null,
        'extractUsedVariables' => null,
        'extractHiddenCondText' => null,
        'extractUsedXRefDef' => null,
        'extractUsedPgfNumFormat' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extractBodyPages' => 'extractBodyPages',
        'extractReferencePages' => 'extractReferencePages',
        'extractMasterPages' => 'extractMasterPages',
        'extractHiddenPages' => 'extractHiddenPages',
        'extractVariables' => 'extractVariables',
        'extractIndexMarkers' => 'extractIndexMarkers',
        'extractLinks' => 'extractLinks',
        'extractXRefDef' => 'extractXRefDef',
        'extractPgfNumFormat' => 'extractPgfNumFormat',
        'extractCustomReferencePages' => 'extractCustomReferencePages',
        'extractDefaultReferencePages' => 'extractDefaultReferencePages',
        'extractUsedVariables' => 'extractUsedVariables',
        'extractHiddenCondText' => 'extractHiddenCondText',
        'extractUsedXRefDef' => 'extractUsedXRefDef',
        'extractUsedPgfNumFormat' => 'extractUsedPgfNumFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extractBodyPages' => 'setExtractBodyPages',
        'extractReferencePages' => 'setExtractReferencePages',
        'extractMasterPages' => 'setExtractMasterPages',
        'extractHiddenPages' => 'setExtractHiddenPages',
        'extractVariables' => 'setExtractVariables',
        'extractIndexMarkers' => 'setExtractIndexMarkers',
        'extractLinks' => 'setExtractLinks',
        'extractXRefDef' => 'setExtractXRefDef',
        'extractPgfNumFormat' => 'setExtractPgfNumFormat',
        'extractCustomReferencePages' => 'setExtractCustomReferencePages',
        'extractDefaultReferencePages' => 'setExtractDefaultReferencePages',
        'extractUsedVariables' => 'setExtractUsedVariables',
        'extractHiddenCondText' => 'setExtractHiddenCondText',
        'extractUsedXRefDef' => 'setExtractUsedXRefDef',
        'extractUsedPgfNumFormat' => 'setExtractUsedPgfNumFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extractBodyPages' => 'getExtractBodyPages',
        'extractReferencePages' => 'getExtractReferencePages',
        'extractMasterPages' => 'getExtractMasterPages',
        'extractHiddenPages' => 'getExtractHiddenPages',
        'extractVariables' => 'getExtractVariables',
        'extractIndexMarkers' => 'getExtractIndexMarkers',
        'extractLinks' => 'getExtractLinks',
        'extractXRefDef' => 'getExtractXRefDef',
        'extractPgfNumFormat' => 'getExtractPgfNumFormat',
        'extractCustomReferencePages' => 'getExtractCustomReferencePages',
        'extractDefaultReferencePages' => 'getExtractDefaultReferencePages',
        'extractUsedVariables' => 'getExtractUsedVariables',
        'extractHiddenCondText' => 'getExtractHiddenCondText',
        'extractUsedXRefDef' => 'getExtractUsedXRefDef',
        'extractUsedPgfNumFormat' => 'getExtractUsedPgfNumFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extractBodyPages'] = isset($data['extractBodyPages']) ? $data['extractBodyPages'] : null;
        $this->container['extractReferencePages'] = isset($data['extractReferencePages']) ? $data['extractReferencePages'] : null;
        $this->container['extractMasterPages'] = isset($data['extractMasterPages']) ? $data['extractMasterPages'] : null;
        $this->container['extractHiddenPages'] = isset($data['extractHiddenPages']) ? $data['extractHiddenPages'] : null;
        $this->container['extractVariables'] = isset($data['extractVariables']) ? $data['extractVariables'] : null;
        $this->container['extractIndexMarkers'] = isset($data['extractIndexMarkers']) ? $data['extractIndexMarkers'] : null;
        $this->container['extractLinks'] = isset($data['extractLinks']) ? $data['extractLinks'] : null;
        $this->container['extractXRefDef'] = isset($data['extractXRefDef']) ? $data['extractXRefDef'] : null;
        $this->container['extractPgfNumFormat'] = isset($data['extractPgfNumFormat']) ? $data['extractPgfNumFormat'] : null;
        $this->container['extractCustomReferencePages'] = isset($data['extractCustomReferencePages']) ? $data['extractCustomReferencePages'] : null;
        $this->container['extractDefaultReferencePages'] = isset($data['extractDefaultReferencePages']) ? $data['extractDefaultReferencePages'] : null;
        $this->container['extractUsedVariables'] = isset($data['extractUsedVariables']) ? $data['extractUsedVariables'] : null;
        $this->container['extractHiddenCondText'] = isset($data['extractHiddenCondText']) ? $data['extractHiddenCondText'] : null;
        $this->container['extractUsedXRefDef'] = isset($data['extractUsedXRefDef']) ? $data['extractUsedXRefDef'] : null;
        $this->container['extractUsedPgfNumFormat'] = isset($data['extractUsedPgfNumFormat']) ? $data['extractUsedPgfNumFormat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets extractBodyPages
     *
     * @return bool
     */
    public function getExtractBodyPages()
    {
        return $this->container['extractBodyPages'];
    }

    /**
     * Sets extractBodyPages
     *
     * @param bool $extractBodyPages default: true
     *
     * @return $this
     */
    public function setExtractBodyPages($extractBodyPages)
    {
        $this->container['extractBodyPages'] = $extractBodyPages;

        return $this;
    }

    /**
     * Gets extractReferencePages
     *
     * @return bool
     */
    public function getExtractReferencePages()
    {
        return $this->container['extractReferencePages'];
    }

    /**
     * Sets extractReferencePages
     *
     * @param bool $extractReferencePages extractReferencePages
     *
     * @return $this
     */
    public function setExtractReferencePages($extractReferencePages)
    {
        $this->container['extractReferencePages'] = $extractReferencePages;

        return $this;
    }

    /**
     * Gets extractMasterPages
     *
     * @return bool
     */
    public function getExtractMasterPages()
    {
        return $this->container['extractMasterPages'];
    }

    /**
     * Sets extractMasterPages
     *
     * @param bool $extractMasterPages default: true
     *
     * @return $this
     */
    public function setExtractMasterPages($extractMasterPages)
    {
        $this->container['extractMasterPages'] = $extractMasterPages;

        return $this;
    }

    /**
     * Gets extractHiddenPages
     *
     * @return bool
     */
    public function getExtractHiddenPages()
    {
        return $this->container['extractHiddenPages'];
    }

    /**
     * Sets extractHiddenPages
     *
     * @param bool $extractHiddenPages extractHiddenPages
     *
     * @return $this
     */
    public function setExtractHiddenPages($extractHiddenPages)
    {
        $this->container['extractHiddenPages'] = $extractHiddenPages;

        return $this;
    }

    /**
     * Gets extractVariables
     *
     * @return bool
     */
    public function getExtractVariables()
    {
        return $this->container['extractVariables'];
    }

    /**
     * Sets extractVariables
     *
     * @param bool $extractVariables extractVariables
     *
     * @return $this
     */
    public function setExtractVariables($extractVariables)
    {
        $this->container['extractVariables'] = $extractVariables;

        return $this;
    }

    /**
     * Gets extractIndexMarkers
     *
     * @return bool
     */
    public function getExtractIndexMarkers()
    {
        return $this->container['extractIndexMarkers'];
    }

    /**
     * Sets extractIndexMarkers
     *
     * @param bool $extractIndexMarkers default: true
     *
     * @return $this
     */
    public function setExtractIndexMarkers($extractIndexMarkers)
    {
        $this->container['extractIndexMarkers'] = $extractIndexMarkers;

        return $this;
    }

    /**
     * Gets extractLinks
     *
     * @return bool
     */
    public function getExtractLinks()
    {
        return $this->container['extractLinks'];
    }

    /**
     * Sets extractLinks
     *
     * @param bool $extractLinks extractLinks
     *
     * @return $this
     */
    public function setExtractLinks($extractLinks)
    {
        $this->container['extractLinks'] = $extractLinks;

        return $this;
    }

    /**
     * Gets extractXRefDef
     *
     * @return bool
     */
    public function getExtractXRefDef()
    {
        return $this->container['extractXRefDef'];
    }

    /**
     * Sets extractXRefDef
     *
     * @param bool $extractXRefDef extractXRefDef
     *
     * @return $this
     */
    public function setExtractXRefDef($extractXRefDef)
    {
        $this->container['extractXRefDef'] = $extractXRefDef;

        return $this;
    }

    /**
     * Gets extractPgfNumFormat
     *
     * @return bool
     */
    public function getExtractPgfNumFormat()
    {
        return $this->container['extractPgfNumFormat'];
    }

    /**
     * Sets extractPgfNumFormat
     *
     * @param bool $extractPgfNumFormat default: true
     *
     * @return $this
     */
    public function setExtractPgfNumFormat($extractPgfNumFormat)
    {
        $this->container['extractPgfNumFormat'] = $extractPgfNumFormat;

        return $this;
    }

    /**
     * Gets extractCustomReferencePages
     *
     * @return bool
     */
    public function getExtractCustomReferencePages()
    {
        return $this->container['extractCustomReferencePages'];
    }

    /**
     * Sets extractCustomReferencePages
     *
     * @param bool $extractCustomReferencePages default: true
     *
     * @return $this
     */
    public function setExtractCustomReferencePages($extractCustomReferencePages)
    {
        $this->container['extractCustomReferencePages'] = $extractCustomReferencePages;

        return $this;
    }

    /**
     * Gets extractDefaultReferencePages
     *
     * @return bool
     */
    public function getExtractDefaultReferencePages()
    {
        return $this->container['extractDefaultReferencePages'];
    }

    /**
     * Sets extractDefaultReferencePages
     *
     * @param bool $extractDefaultReferencePages extractDefaultReferencePages
     *
     * @return $this
     */
    public function setExtractDefaultReferencePages($extractDefaultReferencePages)
    {
        $this->container['extractDefaultReferencePages'] = $extractDefaultReferencePages;

        return $this;
    }

    /**
     * Gets extractUsedVariables
     *
     * @return bool
     */
    public function getExtractUsedVariables()
    {
        return $this->container['extractUsedVariables'];
    }

    /**
     * Sets extractUsedVariables
     *
     * @param bool $extractUsedVariables default: true
     *
     * @return $this
     */
    public function setExtractUsedVariables($extractUsedVariables)
    {
        $this->container['extractUsedVariables'] = $extractUsedVariables;

        return $this;
    }

    /**
     * Gets extractHiddenCondText
     *
     * @return bool
     */
    public function getExtractHiddenCondText()
    {
        return $this->container['extractHiddenCondText'];
    }

    /**
     * Sets extractHiddenCondText
     *
     * @param bool $extractHiddenCondText extractHiddenCondText
     *
     * @return $this
     */
    public function setExtractHiddenCondText($extractHiddenCondText)
    {
        $this->container['extractHiddenCondText'] = $extractHiddenCondText;

        return $this;
    }

    /**
     * Gets extractUsedXRefDef
     *
     * @return bool
     */
    public function getExtractUsedXRefDef()
    {
        return $this->container['extractUsedXRefDef'];
    }

    /**
     * Sets extractUsedXRefDef
     *
     * @param bool $extractUsedXRefDef default: true
     *
     * @return $this
     */
    public function setExtractUsedXRefDef($extractUsedXRefDef)
    {
        $this->container['extractUsedXRefDef'] = $extractUsedXRefDef;

        return $this;
    }

    /**
     * Gets extractUsedPgfNumFormat
     *
     * @return bool
     */
    public function getExtractUsedPgfNumFormat()
    {
        return $this->container['extractUsedPgfNumFormat'];
    }

    /**
     * Sets extractUsedPgfNumFormat
     *
     * @param bool $extractUsedPgfNumFormat default: true
     *
     * @return $this
     */
    public function setExtractUsedPgfNumFormat($extractUsedPgfNumFormat)
    {
        $this->container['extractUsedPgfNumFormat'] = $extractUsedPgfNumFormat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


