<?php
/**
 * SearchInTextResponseDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * SearchInTextResponseDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchInTextResponseDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchInTextResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'termBase' => '\Memsource\Model\TermBaseDto',
        'conceptId' => 'string',
        'sourceTerm' => '\Memsource\Model\TermDto',
        'translationTerms' => '\Memsource\Model\TermDto[]',
        'subTerm' => 'bool',
        'matches' => '\Memsource\Model\Match[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'termBase' => null,
        'conceptId' => null,
        'sourceTerm' => null,
        'translationTerms' => null,
        'subTerm' => null,
        'matches' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'termBase' => 'termBase',
        'conceptId' => 'conceptId',
        'sourceTerm' => 'sourceTerm',
        'translationTerms' => 'translationTerms',
        'subTerm' => 'subTerm',
        'matches' => 'matches'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'termBase' => 'setTermBase',
        'conceptId' => 'setConceptId',
        'sourceTerm' => 'setSourceTerm',
        'translationTerms' => 'setTranslationTerms',
        'subTerm' => 'setSubTerm',
        'matches' => 'setMatches'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'termBase' => 'getTermBase',
        'conceptId' => 'getConceptId',
        'sourceTerm' => 'getSourceTerm',
        'translationTerms' => 'getTranslationTerms',
        'subTerm' => 'getSubTerm',
        'matches' => 'getMatches'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['termBase'] = isset($data['termBase']) ? $data['termBase'] : null;
        $this->container['conceptId'] = isset($data['conceptId']) ? $data['conceptId'] : null;
        $this->container['sourceTerm'] = isset($data['sourceTerm']) ? $data['sourceTerm'] : null;
        $this->container['translationTerms'] = isset($data['translationTerms']) ? $data['translationTerms'] : null;
        $this->container['subTerm'] = isset($data['subTerm']) ? $data['subTerm'] : null;
        $this->container['matches'] = isset($data['matches']) ? $data['matches'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets termBase
     *
     * @return \Memsource\Model\TermBaseDto
     */
    public function getTermBase()
    {
        return $this->container['termBase'];
    }

    /**
     * Sets termBase
     *
     * @param \Memsource\Model\TermBaseDto $termBase termBase
     *
     * @return $this
     */
    public function setTermBase($termBase)
    {
        $this->container['termBase'] = $termBase;

        return $this;
    }

    /**
     * Gets conceptId
     *
     * @return string
     */
    public function getConceptId()
    {
        return $this->container['conceptId'];
    }

    /**
     * Sets conceptId
     *
     * @param string $conceptId conceptId
     *
     * @return $this
     */
    public function setConceptId($conceptId)
    {
        $this->container['conceptId'] = $conceptId;

        return $this;
    }

    /**
     * Gets sourceTerm
     *
     * @return \Memsource\Model\TermDto
     */
    public function getSourceTerm()
    {
        return $this->container['sourceTerm'];
    }

    /**
     * Sets sourceTerm
     *
     * @param \Memsource\Model\TermDto $sourceTerm sourceTerm
     *
     * @return $this
     */
    public function setSourceTerm($sourceTerm)
    {
        $this->container['sourceTerm'] = $sourceTerm;

        return $this;
    }

    /**
     * Gets translationTerms
     *
     * @return \Memsource\Model\TermDto[]
     */
    public function getTranslationTerms()
    {
        return $this->container['translationTerms'];
    }

    /**
     * Sets translationTerms
     *
     * @param \Memsource\Model\TermDto[] $translationTerms translationTerms
     *
     * @return $this
     */
    public function setTranslationTerms($translationTerms)
    {
        $this->container['translationTerms'] = $translationTerms;

        return $this;
    }

    /**
     * Gets subTerm
     *
     * @return bool
     */
    public function getSubTerm()
    {
        return $this->container['subTerm'];
    }

    /**
     * Sets subTerm
     *
     * @param bool $subTerm subTerm
     *
     * @return $this
     */
    public function setSubTerm($subTerm)
    {
        $this->container['subTerm'] = $subTerm;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return \Memsource\Model\Match[]
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param \Memsource\Model\Match[] $matches matches
     *
     * @return $this
     */
    public function setMatches($matches)
    {
        $this->container['matches'] = $matches;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


