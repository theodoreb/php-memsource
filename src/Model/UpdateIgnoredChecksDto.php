<?php
/**
 * UpdateIgnoredChecksDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * UpdateIgnoredChecksDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateIgnoredChecksDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateIgnoredChecksDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segment' => '\Memsource\Model\SegmentReference',
        'warningTypes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segment' => null,
        'warningTypes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segment' => 'segment',
        'warningTypes' => 'warningTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segment' => 'setSegment',
        'warningTypes' => 'setWarningTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segment' => 'getSegment',
        'warningTypes' => 'getWarningTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WARNING_TYPES_EMPTY_TRANSLATION = 'EmptyTranslation';
    const WARNING_TYPES_TRAILING_PUNCTUATION = 'TrailingPunctuation';
    const WARNING_TYPES_FORMATTING = 'Formatting';
    const WARNING_TYPES_JOIN_TAGS = 'JoinTags';
    const WARNING_TYPES_MISSING_NUMBERS = 'MissingNumbers';
    const WARNING_TYPES_MULTIPLE_SPACES = 'MultipleSpaces';
    const WARNING_TYPES_TERMINOLOGY = 'Terminology';
    const WARNING_TYPES_NOT_CONFIRMED = 'NotConfirmed';
    const WARNING_TYPES_TRANSLATION_LENGTH = 'TranslationLength';
    const WARNING_TYPES_TRAILING_SPACE = 'TrailingSpace';
    const WARNING_TYPES_UNRESOLVED_COMMENT = 'UnresolvedComment';
    const WARNING_TYPES_EMPTY_PAIR_TAGS = 'EmptyPairTags';
    const WARNING_TYPES_INCONSISTENT_TRANSLATION_TARGET_SOURCE = 'InconsistentTranslationTargetSource';
    const WARNING_TYPES_INCONSISTENT_TRANSLATION_SOURCE_TARGET = 'InconsistentTranslationSourceTarget';
    const WARNING_TYPES_FORBIDDEN_STRINGS = 'ForbiddenStrings';
    const WARNING_TYPES_SPELL_CHECK = 'SpellCheck';
    const WARNING_TYPES_REPEATED_WORDS = 'RepeatedWords';
    const WARNING_TYPES_INCONSISTENT_TAG_CONTENT = 'InconsistentTagContent';
    const WARNING_TYPES_EMPTY_TAG_CONTENT = 'EmptyTagContent';
    const WARNING_TYPES_MALFORMED = 'Malformed';
    const WARNING_TYPES_FORBIDDEN_TERMS = 'ForbiddenTerms';
    const WARNING_TYPES_NEWER_AT_LOWER_LEVEL = 'NewerAtLowerLevel';
    const WARNING_TYPES_LEADING_AND_TRAILING_SPACES = 'LeadingAndTrailingSpaces';
    const WARNING_TYPES_TARGET_SOURCE_IDENTICAL = 'TargetSourceIdentical';
    const WARNING_TYPES_SOURCE_OR_TARGET_REGEXP = 'SourceOrTargetRegexp';
    const WARNING_TYPES_UNMODIFIED_FUZZY_TRANSLATION = 'UnmodifiedFuzzyTranslation';
    const WARNING_TYPES_MORAVIA = 'Moravia';
    const WARNING_TYPES_EXTRA_NUMBERS = 'ExtraNumbers';
    const WARNING_TYPES_UNRESOLVED_CONVERSATION = 'UnresolvedConversation';
    const WARNING_TYPES_NESTED_TAGS = 'NestedTags';
    const WARNING_TYPES_INCONSISTENT_TRANSLATION = 'InconsistentTranslation';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarningTypesAllowableValues()
    {
        return [
            self::WARNING_TYPES_EMPTY_TRANSLATION,
            self::WARNING_TYPES_TRAILING_PUNCTUATION,
            self::WARNING_TYPES_FORMATTING,
            self::WARNING_TYPES_JOIN_TAGS,
            self::WARNING_TYPES_MISSING_NUMBERS,
            self::WARNING_TYPES_MULTIPLE_SPACES,
            self::WARNING_TYPES_TERMINOLOGY,
            self::WARNING_TYPES_NOT_CONFIRMED,
            self::WARNING_TYPES_TRANSLATION_LENGTH,
            self::WARNING_TYPES_TRAILING_SPACE,
            self::WARNING_TYPES_UNRESOLVED_COMMENT,
            self::WARNING_TYPES_EMPTY_PAIR_TAGS,
            self::WARNING_TYPES_INCONSISTENT_TRANSLATION_TARGET_SOURCE,
            self::WARNING_TYPES_INCONSISTENT_TRANSLATION_SOURCE_TARGET,
            self::WARNING_TYPES_FORBIDDEN_STRINGS,
            self::WARNING_TYPES_SPELL_CHECK,
            self::WARNING_TYPES_REPEATED_WORDS,
            self::WARNING_TYPES_INCONSISTENT_TAG_CONTENT,
            self::WARNING_TYPES_EMPTY_TAG_CONTENT,
            self::WARNING_TYPES_MALFORMED,
            self::WARNING_TYPES_FORBIDDEN_TERMS,
            self::WARNING_TYPES_NEWER_AT_LOWER_LEVEL,
            self::WARNING_TYPES_LEADING_AND_TRAILING_SPACES,
            self::WARNING_TYPES_TARGET_SOURCE_IDENTICAL,
            self::WARNING_TYPES_SOURCE_OR_TARGET_REGEXP,
            self::WARNING_TYPES_UNMODIFIED_FUZZY_TRANSLATION,
            self::WARNING_TYPES_MORAVIA,
            self::WARNING_TYPES_EXTRA_NUMBERS,
            self::WARNING_TYPES_UNRESOLVED_CONVERSATION,
            self::WARNING_TYPES_NESTED_TAGS,
            self::WARNING_TYPES_INCONSISTENT_TRANSLATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['warningTypes'] = isset($data['warningTypes']) ? $data['warningTypes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['segment'] === null) {
            $invalidProperties[] = "'segment' can't be null";
        }
        if ($this->container['warningTypes'] === null) {
            $invalidProperties[] = "'warningTypes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['segment'] === null) {
            return false;
        }
        if ($this->container['warningTypes'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets segment
     *
     * @return \Memsource\Model\SegmentReference
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \Memsource\Model\SegmentReference $segment segment
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets warningTypes
     *
     * @return string[]
     */
    public function getWarningTypes()
    {
        return $this->container['warningTypes'];
    }

    /**
     * Sets warningTypes
     *
     * @param string[] $warningTypes warningTypes
     *
     * @return $this
     */
    public function setWarningTypes($warningTypes)
    {
        $allowedValues = $this->getWarningTypesAllowableValues();
        if (array_diff($warningTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'warningTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warningTypes'] = $warningTypes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


