<?php
/**
 * EditProjectSecuritySettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * EditProjectSecuritySettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EditProjectSecuritySettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EditProjectSecuritySettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'translationMemoryDownloadEnabled' => 'bool',
        'webEditorEnabledForLinguists' => 'bool',
        'showUserDataToLinguists' => 'bool',
        'emailNotifications' => 'bool',
        'strictWorkflowFinish' => 'bool',
        'useVendors' => 'bool',
        'linguistsMayEditLockedSegments' => 'bool',
        'linguistsMaySetAutoPropagation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'translationMemoryDownloadEnabled' => null,
        'webEditorEnabledForLinguists' => null,
        'showUserDataToLinguists' => null,
        'emailNotifications' => null,
        'strictWorkflowFinish' => null,
        'useVendors' => null,
        'linguistsMayEditLockedSegments' => null,
        'linguistsMaySetAutoPropagation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'translationMemoryDownloadEnabled' => 'translationMemoryDownloadEnabled',
        'webEditorEnabledForLinguists' => 'webEditorEnabledForLinguists',
        'showUserDataToLinguists' => 'showUserDataToLinguists',
        'emailNotifications' => 'emailNotifications',
        'strictWorkflowFinish' => 'strictWorkflowFinish',
        'useVendors' => 'useVendors',
        'linguistsMayEditLockedSegments' => 'linguistsMayEditLockedSegments',
        'linguistsMaySetAutoPropagation' => 'linguistsMaySetAutoPropagation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'translationMemoryDownloadEnabled' => 'setTranslationMemoryDownloadEnabled',
        'webEditorEnabledForLinguists' => 'setWebEditorEnabledForLinguists',
        'showUserDataToLinguists' => 'setShowUserDataToLinguists',
        'emailNotifications' => 'setEmailNotifications',
        'strictWorkflowFinish' => 'setStrictWorkflowFinish',
        'useVendors' => 'setUseVendors',
        'linguistsMayEditLockedSegments' => 'setLinguistsMayEditLockedSegments',
        'linguistsMaySetAutoPropagation' => 'setLinguistsMaySetAutoPropagation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'translationMemoryDownloadEnabled' => 'getTranslationMemoryDownloadEnabled',
        'webEditorEnabledForLinguists' => 'getWebEditorEnabledForLinguists',
        'showUserDataToLinguists' => 'getShowUserDataToLinguists',
        'emailNotifications' => 'getEmailNotifications',
        'strictWorkflowFinish' => 'getStrictWorkflowFinish',
        'useVendors' => 'getUseVendors',
        'linguistsMayEditLockedSegments' => 'getLinguistsMayEditLockedSegments',
        'linguistsMaySetAutoPropagation' => 'getLinguistsMaySetAutoPropagation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['translationMemoryDownloadEnabled'] = isset($data['translationMemoryDownloadEnabled']) ? $data['translationMemoryDownloadEnabled'] : null;
        $this->container['webEditorEnabledForLinguists'] = isset($data['webEditorEnabledForLinguists']) ? $data['webEditorEnabledForLinguists'] : null;
        $this->container['showUserDataToLinguists'] = isset($data['showUserDataToLinguists']) ? $data['showUserDataToLinguists'] : null;
        $this->container['emailNotifications'] = isset($data['emailNotifications']) ? $data['emailNotifications'] : null;
        $this->container['strictWorkflowFinish'] = isset($data['strictWorkflowFinish']) ? $data['strictWorkflowFinish'] : null;
        $this->container['useVendors'] = isset($data['useVendors']) ? $data['useVendors'] : null;
        $this->container['linguistsMayEditLockedSegments'] = isset($data['linguistsMayEditLockedSegments']) ? $data['linguistsMayEditLockedSegments'] : null;
        $this->container['linguistsMaySetAutoPropagation'] = isset($data['linguistsMaySetAutoPropagation']) ? $data['linguistsMaySetAutoPropagation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets translationMemoryDownloadEnabled
     *
     * @return bool
     */
    public function getTranslationMemoryDownloadEnabled()
    {
        return $this->container['translationMemoryDownloadEnabled'];
    }

    /**
     * Sets translationMemoryDownloadEnabled
     *
     * @param bool $translationMemoryDownloadEnabled default value: false
     *
     * @return $this
     */
    public function setTranslationMemoryDownloadEnabled($translationMemoryDownloadEnabled)
    {
        $this->container['translationMemoryDownloadEnabled'] = $translationMemoryDownloadEnabled;

        return $this;
    }

    /**
     * Gets webEditorEnabledForLinguists
     *
     * @return bool
     */
    public function getWebEditorEnabledForLinguists()
    {
        return $this->container['webEditorEnabledForLinguists'];
    }

    /**
     * Sets webEditorEnabledForLinguists
     *
     * @param bool $webEditorEnabledForLinguists default value: false
     *
     * @return $this
     */
    public function setWebEditorEnabledForLinguists($webEditorEnabledForLinguists)
    {
        $this->container['webEditorEnabledForLinguists'] = $webEditorEnabledForLinguists;

        return $this;
    }

    /**
     * Gets showUserDataToLinguists
     *
     * @return bool
     */
    public function getShowUserDataToLinguists()
    {
        return $this->container['showUserDataToLinguists'];
    }

    /**
     * Sets showUserDataToLinguists
     *
     * @param bool $showUserDataToLinguists default value: false
     *
     * @return $this
     */
    public function setShowUserDataToLinguists($showUserDataToLinguists)
    {
        $this->container['showUserDataToLinguists'] = $showUserDataToLinguists;

        return $this;
    }

    /**
     * Gets emailNotifications
     *
     * @return bool
     */
    public function getEmailNotifications()
    {
        return $this->container['emailNotifications'];
    }

    /**
     * Sets emailNotifications
     *
     * @param bool $emailNotifications default value: false
     *
     * @return $this
     */
    public function setEmailNotifications($emailNotifications)
    {
        $this->container['emailNotifications'] = $emailNotifications;

        return $this;
    }

    /**
     * Gets strictWorkflowFinish
     *
     * @return bool
     */
    public function getStrictWorkflowFinish()
    {
        return $this->container['strictWorkflowFinish'];
    }

    /**
     * Sets strictWorkflowFinish
     *
     * @param bool $strictWorkflowFinish default value: false
     *
     * @return $this
     */
    public function setStrictWorkflowFinish($strictWorkflowFinish)
    {
        $this->container['strictWorkflowFinish'] = $strictWorkflowFinish;

        return $this;
    }

    /**
     * Gets useVendors
     *
     * @return bool
     */
    public function getUseVendors()
    {
        return $this->container['useVendors'];
    }

    /**
     * Sets useVendors
     *
     * @param bool $useVendors default value: false
     *
     * @return $this
     */
    public function setUseVendors($useVendors)
    {
        $this->container['useVendors'] = $useVendors;

        return $this;
    }

    /**
     * Gets linguistsMayEditLockedSegments
     *
     * @return bool
     */
    public function getLinguistsMayEditLockedSegments()
    {
        return $this->container['linguistsMayEditLockedSegments'];
    }

    /**
     * Sets linguistsMayEditLockedSegments
     *
     * @param bool $linguistsMayEditLockedSegments default value: false
     *
     * @return $this
     */
    public function setLinguistsMayEditLockedSegments($linguistsMayEditLockedSegments)
    {
        $this->container['linguistsMayEditLockedSegments'] = $linguistsMayEditLockedSegments;

        return $this;
    }

    /**
     * Gets linguistsMaySetAutoPropagation
     *
     * @return bool
     */
    public function getLinguistsMaySetAutoPropagation()
    {
        return $this->container['linguistsMaySetAutoPropagation'];
    }

    /**
     * Sets linguistsMaySetAutoPropagation
     *
     * @param bool $linguistsMaySetAutoPropagation default value: true
     *
     * @return $this
     */
    public function setLinguistsMaySetAutoPropagation($linguistsMaySetAutoPropagation)
    {
        $this->container['linguistsMaySetAutoPropagation'] = $linguistsMaySetAutoPropagation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


