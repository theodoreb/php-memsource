<?php
/**
 * CreateAnalyseAsyncDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * CreateAnalyseAsyncDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateAnalyseAsyncDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateAnalyseAsyncDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jobs' => '\Memsource\Model\UidReference[]',
        'type' => 'string',
        'includeFuzzyRepetitions' => 'bool',
        'includeConfirmedSegments' => 'bool',
        'includeNumbers' => 'bool',
        'includeLockedSegments' => 'bool',
        'countSourceUnits' => 'bool',
        'includeTransMemory' => 'bool',
        'includeNonTranslatables' => 'bool',
        'name' => 'string',
        'linguist' => '\Memsource\Model\IdReference',
        'netRateScheme' => '\Memsource\Model\IdReference',
        'compareWorkflowLevel' => 'int',
        'useProjectAnalysisSettings' => 'bool',
        'callbackUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jobs' => null,
        'type' => null,
        'includeFuzzyRepetitions' => null,
        'includeConfirmedSegments' => null,
        'includeNumbers' => null,
        'includeLockedSegments' => null,
        'countSourceUnits' => null,
        'includeTransMemory' => null,
        'includeNonTranslatables' => null,
        'name' => null,
        'linguist' => null,
        'netRateScheme' => null,
        'compareWorkflowLevel' => 'int32',
        'useProjectAnalysisSettings' => null,
        'callbackUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobs' => 'jobs',
        'type' => 'type',
        'includeFuzzyRepetitions' => 'includeFuzzyRepetitions',
        'includeConfirmedSegments' => 'includeConfirmedSegments',
        'includeNumbers' => 'includeNumbers',
        'includeLockedSegments' => 'includeLockedSegments',
        'countSourceUnits' => 'countSourceUnits',
        'includeTransMemory' => 'includeTransMemory',
        'includeNonTranslatables' => 'includeNonTranslatables',
        'name' => 'name',
        'linguist' => 'linguist',
        'netRateScheme' => 'netRateScheme',
        'compareWorkflowLevel' => 'compareWorkflowLevel',
        'useProjectAnalysisSettings' => 'useProjectAnalysisSettings',
        'callbackUrl' => 'callbackUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobs' => 'setJobs',
        'type' => 'setType',
        'includeFuzzyRepetitions' => 'setIncludeFuzzyRepetitions',
        'includeConfirmedSegments' => 'setIncludeConfirmedSegments',
        'includeNumbers' => 'setIncludeNumbers',
        'includeLockedSegments' => 'setIncludeLockedSegments',
        'countSourceUnits' => 'setCountSourceUnits',
        'includeTransMemory' => 'setIncludeTransMemory',
        'includeNonTranslatables' => 'setIncludeNonTranslatables',
        'name' => 'setName',
        'linguist' => 'setLinguist',
        'netRateScheme' => 'setNetRateScheme',
        'compareWorkflowLevel' => 'setCompareWorkflowLevel',
        'useProjectAnalysisSettings' => 'setUseProjectAnalysisSettings',
        'callbackUrl' => 'setCallbackUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobs' => 'getJobs',
        'type' => 'getType',
        'includeFuzzyRepetitions' => 'getIncludeFuzzyRepetitions',
        'includeConfirmedSegments' => 'getIncludeConfirmedSegments',
        'includeNumbers' => 'getIncludeNumbers',
        'includeLockedSegments' => 'getIncludeLockedSegments',
        'countSourceUnits' => 'getCountSourceUnits',
        'includeTransMemory' => 'getIncludeTransMemory',
        'includeNonTranslatables' => 'getIncludeNonTranslatables',
        'name' => 'getName',
        'linguist' => 'getLinguist',
        'netRateScheme' => 'getNetRateScheme',
        'compareWorkflowLevel' => 'getCompareWorkflowLevel',
        'useProjectAnalysisSettings' => 'getUseProjectAnalysisSettings',
        'callbackUrl' => 'getCallbackUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PRE_ANALYSE = 'PreAnalyse';
    const TYPE_POST_ANALYSE = 'PostAnalyse';
    const TYPE_COMPARE = 'Compare';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRE_ANALYSE,
            self::TYPE_POST_ANALYSE,
            self::TYPE_COMPARE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jobs'] = isset($data['jobs']) ? $data['jobs'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['includeFuzzyRepetitions'] = isset($data['includeFuzzyRepetitions']) ? $data['includeFuzzyRepetitions'] : null;
        $this->container['includeConfirmedSegments'] = isset($data['includeConfirmedSegments']) ? $data['includeConfirmedSegments'] : null;
        $this->container['includeNumbers'] = isset($data['includeNumbers']) ? $data['includeNumbers'] : null;
        $this->container['includeLockedSegments'] = isset($data['includeLockedSegments']) ? $data['includeLockedSegments'] : null;
        $this->container['countSourceUnits'] = isset($data['countSourceUnits']) ? $data['countSourceUnits'] : null;
        $this->container['includeTransMemory'] = isset($data['includeTransMemory']) ? $data['includeTransMemory'] : null;
        $this->container['includeNonTranslatables'] = isset($data['includeNonTranslatables']) ? $data['includeNonTranslatables'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['linguist'] = isset($data['linguist']) ? $data['linguist'] : null;
        $this->container['netRateScheme'] = isset($data['netRateScheme']) ? $data['netRateScheme'] : null;
        $this->container['compareWorkflowLevel'] = isset($data['compareWorkflowLevel']) ? $data['compareWorkflowLevel'] : null;
        $this->container['useProjectAnalysisSettings'] = isset($data['useProjectAnalysisSettings']) ? $data['useProjectAnalysisSettings'] : null;
        $this->container['callbackUrl'] = isset($data['callbackUrl']) ? $data['callbackUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jobs'] === null) {
            $invalidProperties[] = "'jobs' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['compareWorkflowLevel']) && ($this->container['compareWorkflowLevel'] > 15)) {
            $invalidProperties[] = "invalid value for 'compareWorkflowLevel', must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['compareWorkflowLevel']) && ($this->container['compareWorkflowLevel'] < 1)) {
            $invalidProperties[] = "invalid value for 'compareWorkflowLevel', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['jobs'] === null) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        if (strlen($this->container['name']) > 255) {
            return false;
        }
        if (strlen($this->container['name']) < 0) {
            return false;
        }
        if ($this->container['compareWorkflowLevel'] > 15) {
            return false;
        }
        if ($this->container['compareWorkflowLevel'] < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets jobs
     *
     * @return \Memsource\Model\UidReference[]
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \Memsource\Model\UidReference[] $jobs jobs
     *
     * @return $this
     */
    public function setJobs($jobs)
    {
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type default: PreAnalyse
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets includeFuzzyRepetitions
     *
     * @return bool
     */
    public function getIncludeFuzzyRepetitions()
    {
        return $this->container['includeFuzzyRepetitions'];
    }

    /**
     * Sets includeFuzzyRepetitions
     *
     * @param bool $includeFuzzyRepetitions default: true
     *
     * @return $this
     */
    public function setIncludeFuzzyRepetitions($includeFuzzyRepetitions)
    {
        $this->container['includeFuzzyRepetitions'] = $includeFuzzyRepetitions;

        return $this;
    }

    /**
     * Gets includeConfirmedSegments
     *
     * @return bool
     */
    public function getIncludeConfirmedSegments()
    {
        return $this->container['includeConfirmedSegments'];
    }

    /**
     * Sets includeConfirmedSegments
     *
     * @param bool $includeConfirmedSegments default: true
     *
     * @return $this
     */
    public function setIncludeConfirmedSegments($includeConfirmedSegments)
    {
        $this->container['includeConfirmedSegments'] = $includeConfirmedSegments;

        return $this;
    }

    /**
     * Gets includeNumbers
     *
     * @return bool
     */
    public function getIncludeNumbers()
    {
        return $this->container['includeNumbers'];
    }

    /**
     * Sets includeNumbers
     *
     * @param bool $includeNumbers default: true
     *
     * @return $this
     */
    public function setIncludeNumbers($includeNumbers)
    {
        $this->container['includeNumbers'] = $includeNumbers;

        return $this;
    }

    /**
     * Gets includeLockedSegments
     *
     * @return bool
     */
    public function getIncludeLockedSegments()
    {
        return $this->container['includeLockedSegments'];
    }

    /**
     * Sets includeLockedSegments
     *
     * @param bool $includeLockedSegments default: true
     *
     * @return $this
     */
    public function setIncludeLockedSegments($includeLockedSegments)
    {
        $this->container['includeLockedSegments'] = $includeLockedSegments;

        return $this;
    }

    /**
     * Gets countSourceUnits
     *
     * @return bool
     */
    public function getCountSourceUnits()
    {
        return $this->container['countSourceUnits'];
    }

    /**
     * Sets countSourceUnits
     *
     * @param bool $countSourceUnits default: true
     *
     * @return $this
     */
    public function setCountSourceUnits($countSourceUnits)
    {
        $this->container['countSourceUnits'] = $countSourceUnits;

        return $this;
    }

    /**
     * Gets includeTransMemory
     *
     * @return bool
     */
    public function getIncludeTransMemory()
    {
        return $this->container['includeTransMemory'];
    }

    /**
     * Sets includeTransMemory
     *
     * @param bool $includeTransMemory default: true
     *
     * @return $this
     */
    public function setIncludeTransMemory($includeTransMemory)
    {
        $this->container['includeTransMemory'] = $includeTransMemory;

        return $this;
    }

    /**
     * Gets includeNonTranslatables
     *
     * @return bool
     */
    public function getIncludeNonTranslatables()
    {
        return $this->container['includeNonTranslatables'];
    }

    /**
     * Sets includeNonTranslatables
     *
     * @param bool $includeNonTranslatables default: false. Works only for type=PreAnalyse.
     *
     * @return $this
     */
    public function setIncludeNonTranslatables($includeNonTranslatables)
    {
        $this->container['includeNonTranslatables'] = $includeNonTranslatables;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateAnalyseAsyncDto., must be smaller than or equal to 255.');
        }
        if (!is_null($name) && (strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateAnalyseAsyncDto., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets linguist
     *
     * @return \Memsource\Model\IdReference
     */
    public function getLinguist()
    {
        return $this->container['linguist'];
    }

    /**
     * Sets linguist
     *
     * @param \Memsource\Model\IdReference $linguist linguist
     *
     * @return $this
     */
    public function setLinguist($linguist)
    {
        $this->container['linguist'] = $linguist;

        return $this;
    }

    /**
     * Gets netRateScheme
     *
     * @return \Memsource\Model\IdReference
     */
    public function getNetRateScheme()
    {
        return $this->container['netRateScheme'];
    }

    /**
     * Sets netRateScheme
     *
     * @param \Memsource\Model\IdReference $netRateScheme netRateScheme
     *
     * @return $this
     */
    public function setNetRateScheme($netRateScheme)
    {
        $this->container['netRateScheme'] = $netRateScheme;

        return $this;
    }

    /**
     * Gets compareWorkflowLevel
     *
     * @return int
     */
    public function getCompareWorkflowLevel()
    {
        return $this->container['compareWorkflowLevel'];
    }

    /**
     * Sets compareWorkflowLevel
     *
     * @param int $compareWorkflowLevel Required for type=Compare
     *
     * @return $this
     */
    public function setCompareWorkflowLevel($compareWorkflowLevel)
    {

        if (!is_null($compareWorkflowLevel) && ($compareWorkflowLevel > 15)) {
            throw new \InvalidArgumentException('invalid value for $compareWorkflowLevel when calling CreateAnalyseAsyncDto., must be smaller than or equal to 15.');
        }
        if (!is_null($compareWorkflowLevel) && ($compareWorkflowLevel < 1)) {
            throw new \InvalidArgumentException('invalid value for $compareWorkflowLevel when calling CreateAnalyseAsyncDto., must be bigger than or equal to 1.');
        }

        $this->container['compareWorkflowLevel'] = $compareWorkflowLevel;

        return $this;
    }

    /**
     * Gets useProjectAnalysisSettings
     *
     * @return bool
     */
    public function getUseProjectAnalysisSettings()
    {
        return $this->container['useProjectAnalysisSettings'];
    }

    /**
     * Sets useProjectAnalysisSettings
     *
     * @param bool $useProjectAnalysisSettings default: false. Use default project settings. Will be overwritten with setting sent in the API call.
     *
     * @return $this
     */
    public function setUseProjectAnalysisSettings($useProjectAnalysisSettings)
    {
        $this->container['useProjectAnalysisSettings'] = $useProjectAnalysisSettings;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string $callbackUrl callbackUrl
     *
     * @return $this
     */
    public function setCallbackUrl($callbackUrl)
    {
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


