<?php
/**
 * SearchTMResponseDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * SearchTMResponseDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchTMResponseDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchTMResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segmentId' => 'string',
        'source' => '\Memsource\Model\SearchTMSegmentDto',
        'translations' => '\Memsource\Model\SearchTMSegmentDto[]',
        'transMemory' => '\Memsource\Model\SearchTMTransMemoryDto',
        'grossScore' => 'double',
        'score' => 'double',
        'subSegment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segmentId' => null,
        'source' => null,
        'translations' => null,
        'transMemory' => null,
        'grossScore' => 'double',
        'score' => 'double',
        'subSegment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segmentId' => 'segmentId',
        'source' => 'source',
        'translations' => 'translations',
        'transMemory' => 'transMemory',
        'grossScore' => 'grossScore',
        'score' => 'score',
        'subSegment' => 'subSegment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segmentId' => 'setSegmentId',
        'source' => 'setSource',
        'translations' => 'setTranslations',
        'transMemory' => 'setTransMemory',
        'grossScore' => 'setGrossScore',
        'score' => 'setScore',
        'subSegment' => 'setSubSegment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segmentId' => 'getSegmentId',
        'source' => 'getSource',
        'translations' => 'getTranslations',
        'transMemory' => 'getTransMemory',
        'grossScore' => 'getGrossScore',
        'score' => 'getScore',
        'subSegment' => 'getSubSegment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segmentId'] = isset($data['segmentId']) ? $data['segmentId'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['transMemory'] = isset($data['transMemory']) ? $data['transMemory'] : null;
        $this->container['grossScore'] = isset($data['grossScore']) ? $data['grossScore'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['subSegment'] = isset($data['subSegment']) ? $data['subSegment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets segmentId
     *
     * @return string
     */
    public function getSegmentId()
    {
        return $this->container['segmentId'];
    }

    /**
     * Sets segmentId
     *
     * @param string $segmentId segmentId
     *
     * @return $this
     */
    public function setSegmentId($segmentId)
    {
        $this->container['segmentId'] = $segmentId;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Memsource\Model\SearchTMSegmentDto
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Memsource\Model\SearchTMSegmentDto $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \Memsource\Model\SearchTMSegmentDto[]
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \Memsource\Model\SearchTMSegmentDto[] $translations translations
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets transMemory
     *
     * @return \Memsource\Model\SearchTMTransMemoryDto
     */
    public function getTransMemory()
    {
        return $this->container['transMemory'];
    }

    /**
     * Sets transMemory
     *
     * @param \Memsource\Model\SearchTMTransMemoryDto $transMemory transMemory
     *
     * @return $this
     */
    public function setTransMemory($transMemory)
    {
        $this->container['transMemory'] = $transMemory;

        return $this;
    }

    /**
     * Gets grossScore
     *
     * @return double
     */
    public function getGrossScore()
    {
        return $this->container['grossScore'];
    }

    /**
     * Sets grossScore
     *
     * @param double $grossScore grossScore
     *
     * @return $this
     */
    public function setGrossScore($grossScore)
    {
        $this->container['grossScore'] = $grossScore;

        return $this;
    }

    /**
     * Gets score
     *
     * @return double
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param double $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets subSegment
     *
     * @return bool
     */
    public function getSubSegment()
    {
        return $this->container['subSegment'];
    }

    /**
     * Sets subSegment
     *
     * @param bool $subSegment subSegment
     *
     * @return $this
     */
    public function setSubSegment($subSegment)
    {
        $this->container['subSegment'] = $subSegment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


