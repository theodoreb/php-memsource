<?php
/**
 * XmlSettingsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * XmlSettingsDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XmlSettingsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XmlSettingsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rulesFormat' => 'string',
        'includeElementsPlain' => 'string',
        'excludeElementsPlain' => 'string',
        'includeAttributesPlain' => 'string',
        'excludeAttributesPlain' => 'string',
        'inlineElementsNonTranslatablePlain' => 'string',
        'inlineElementsPlain' => 'string',
        'inlineElementsAutoPlain' => 'bool',
        'htmlSubfilterElementsPlain' => 'string',
        'entities' => 'bool',
        'lockElementsPlain' => 'string',
        'lockAttributesPlain' => 'string',
        'includeXPath' => 'string',
        'inlineElementsXpath' => 'string',
        'inlineElementsNonTranslatableXPath' => 'string',
        'inlineElementsAutoXPath' => 'bool',
        'htmlSubfilterElementsXpath' => 'string',
        'lockXPath' => 'string',
        'segmentation' => 'bool',
        'tagRegexp' => 'string',
        'contextNoteXpath' => 'string',
        'maxLenXPath' => 'string',
        'preserveWhitespaceXPath' => 'string',
        'preserveCharEntities' => 'string',
        'contextKeyXPath' => 'string',
        'xslUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rulesFormat' => null,
        'includeElementsPlain' => null,
        'excludeElementsPlain' => null,
        'includeAttributesPlain' => null,
        'excludeAttributesPlain' => null,
        'inlineElementsNonTranslatablePlain' => null,
        'inlineElementsPlain' => null,
        'inlineElementsAutoPlain' => null,
        'htmlSubfilterElementsPlain' => null,
        'entities' => null,
        'lockElementsPlain' => null,
        'lockAttributesPlain' => null,
        'includeXPath' => null,
        'inlineElementsXpath' => null,
        'inlineElementsNonTranslatableXPath' => null,
        'inlineElementsAutoXPath' => null,
        'htmlSubfilterElementsXpath' => null,
        'lockXPath' => null,
        'segmentation' => null,
        'tagRegexp' => null,
        'contextNoteXpath' => null,
        'maxLenXPath' => null,
        'preserveWhitespaceXPath' => null,
        'preserveCharEntities' => null,
        'contextKeyXPath' => null,
        'xslUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rulesFormat' => 'rulesFormat',
        'includeElementsPlain' => 'includeElementsPlain',
        'excludeElementsPlain' => 'excludeElementsPlain',
        'includeAttributesPlain' => 'includeAttributesPlain',
        'excludeAttributesPlain' => 'excludeAttributesPlain',
        'inlineElementsNonTranslatablePlain' => 'inlineElementsNonTranslatablePlain',
        'inlineElementsPlain' => 'inlineElementsPlain',
        'inlineElementsAutoPlain' => 'inlineElementsAutoPlain',
        'htmlSubfilterElementsPlain' => 'htmlSubfilterElementsPlain',
        'entities' => 'entities',
        'lockElementsPlain' => 'lockElementsPlain',
        'lockAttributesPlain' => 'lockAttributesPlain',
        'includeXPath' => 'includeXPath',
        'inlineElementsXpath' => 'inlineElementsXpath',
        'inlineElementsNonTranslatableXPath' => 'inlineElementsNonTranslatableXPath',
        'inlineElementsAutoXPath' => 'inlineElementsAutoXPath',
        'htmlSubfilterElementsXpath' => 'htmlSubfilterElementsXpath',
        'lockXPath' => 'lockXPath',
        'segmentation' => 'segmentation',
        'tagRegexp' => 'tagRegexp',
        'contextNoteXpath' => 'contextNoteXpath',
        'maxLenXPath' => 'maxLenXPath',
        'preserveWhitespaceXPath' => 'preserveWhitespaceXPath',
        'preserveCharEntities' => 'preserveCharEntities',
        'contextKeyXPath' => 'contextKeyXPath',
        'xslUrl' => 'xslUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rulesFormat' => 'setRulesFormat',
        'includeElementsPlain' => 'setIncludeElementsPlain',
        'excludeElementsPlain' => 'setExcludeElementsPlain',
        'includeAttributesPlain' => 'setIncludeAttributesPlain',
        'excludeAttributesPlain' => 'setExcludeAttributesPlain',
        'inlineElementsNonTranslatablePlain' => 'setInlineElementsNonTranslatablePlain',
        'inlineElementsPlain' => 'setInlineElementsPlain',
        'inlineElementsAutoPlain' => 'setInlineElementsAutoPlain',
        'htmlSubfilterElementsPlain' => 'setHtmlSubfilterElementsPlain',
        'entities' => 'setEntities',
        'lockElementsPlain' => 'setLockElementsPlain',
        'lockAttributesPlain' => 'setLockAttributesPlain',
        'includeXPath' => 'setIncludeXPath',
        'inlineElementsXpath' => 'setInlineElementsXpath',
        'inlineElementsNonTranslatableXPath' => 'setInlineElementsNonTranslatableXPath',
        'inlineElementsAutoXPath' => 'setInlineElementsAutoXPath',
        'htmlSubfilterElementsXpath' => 'setHtmlSubfilterElementsXpath',
        'lockXPath' => 'setLockXPath',
        'segmentation' => 'setSegmentation',
        'tagRegexp' => 'setTagRegexp',
        'contextNoteXpath' => 'setContextNoteXpath',
        'maxLenXPath' => 'setMaxLenXPath',
        'preserveWhitespaceXPath' => 'setPreserveWhitespaceXPath',
        'preserveCharEntities' => 'setPreserveCharEntities',
        'contextKeyXPath' => 'setContextKeyXPath',
        'xslUrl' => 'setXslUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rulesFormat' => 'getRulesFormat',
        'includeElementsPlain' => 'getIncludeElementsPlain',
        'excludeElementsPlain' => 'getExcludeElementsPlain',
        'includeAttributesPlain' => 'getIncludeAttributesPlain',
        'excludeAttributesPlain' => 'getExcludeAttributesPlain',
        'inlineElementsNonTranslatablePlain' => 'getInlineElementsNonTranslatablePlain',
        'inlineElementsPlain' => 'getInlineElementsPlain',
        'inlineElementsAutoPlain' => 'getInlineElementsAutoPlain',
        'htmlSubfilterElementsPlain' => 'getHtmlSubfilterElementsPlain',
        'entities' => 'getEntities',
        'lockElementsPlain' => 'getLockElementsPlain',
        'lockAttributesPlain' => 'getLockAttributesPlain',
        'includeXPath' => 'getIncludeXPath',
        'inlineElementsXpath' => 'getInlineElementsXpath',
        'inlineElementsNonTranslatableXPath' => 'getInlineElementsNonTranslatableXPath',
        'inlineElementsAutoXPath' => 'getInlineElementsAutoXPath',
        'htmlSubfilterElementsXpath' => 'getHtmlSubfilterElementsXpath',
        'lockXPath' => 'getLockXPath',
        'segmentation' => 'getSegmentation',
        'tagRegexp' => 'getTagRegexp',
        'contextNoteXpath' => 'getContextNoteXpath',
        'maxLenXPath' => 'getMaxLenXPath',
        'preserveWhitespaceXPath' => 'getPreserveWhitespaceXPath',
        'preserveCharEntities' => 'getPreserveCharEntities',
        'contextKeyXPath' => 'getContextKeyXPath',
        'xslUrl' => 'getXslUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RULES_FORMAT_PLAIN = 'PLAIN';
    const RULES_FORMAT_XPATH = 'XPATH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRulesFormatAllowableValues()
    {
        return [
            self::RULES_FORMAT_PLAIN,
            self::RULES_FORMAT_XPATH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rulesFormat'] = isset($data['rulesFormat']) ? $data['rulesFormat'] : null;
        $this->container['includeElementsPlain'] = isset($data['includeElementsPlain']) ? $data['includeElementsPlain'] : null;
        $this->container['excludeElementsPlain'] = isset($data['excludeElementsPlain']) ? $data['excludeElementsPlain'] : null;
        $this->container['includeAttributesPlain'] = isset($data['includeAttributesPlain']) ? $data['includeAttributesPlain'] : null;
        $this->container['excludeAttributesPlain'] = isset($data['excludeAttributesPlain']) ? $data['excludeAttributesPlain'] : null;
        $this->container['inlineElementsNonTranslatablePlain'] = isset($data['inlineElementsNonTranslatablePlain']) ? $data['inlineElementsNonTranslatablePlain'] : null;
        $this->container['inlineElementsPlain'] = isset($data['inlineElementsPlain']) ? $data['inlineElementsPlain'] : null;
        $this->container['inlineElementsAutoPlain'] = isset($data['inlineElementsAutoPlain']) ? $data['inlineElementsAutoPlain'] : null;
        $this->container['htmlSubfilterElementsPlain'] = isset($data['htmlSubfilterElementsPlain']) ? $data['htmlSubfilterElementsPlain'] : null;
        $this->container['entities'] = isset($data['entities']) ? $data['entities'] : null;
        $this->container['lockElementsPlain'] = isset($data['lockElementsPlain']) ? $data['lockElementsPlain'] : null;
        $this->container['lockAttributesPlain'] = isset($data['lockAttributesPlain']) ? $data['lockAttributesPlain'] : null;
        $this->container['includeXPath'] = isset($data['includeXPath']) ? $data['includeXPath'] : null;
        $this->container['inlineElementsXpath'] = isset($data['inlineElementsXpath']) ? $data['inlineElementsXpath'] : null;
        $this->container['inlineElementsNonTranslatableXPath'] = isset($data['inlineElementsNonTranslatableXPath']) ? $data['inlineElementsNonTranslatableXPath'] : null;
        $this->container['inlineElementsAutoXPath'] = isset($data['inlineElementsAutoXPath']) ? $data['inlineElementsAutoXPath'] : null;
        $this->container['htmlSubfilterElementsXpath'] = isset($data['htmlSubfilterElementsXpath']) ? $data['htmlSubfilterElementsXpath'] : null;
        $this->container['lockXPath'] = isset($data['lockXPath']) ? $data['lockXPath'] : null;
        $this->container['segmentation'] = isset($data['segmentation']) ? $data['segmentation'] : null;
        $this->container['tagRegexp'] = isset($data['tagRegexp']) ? $data['tagRegexp'] : null;
        $this->container['contextNoteXpath'] = isset($data['contextNoteXpath']) ? $data['contextNoteXpath'] : null;
        $this->container['maxLenXPath'] = isset($data['maxLenXPath']) ? $data['maxLenXPath'] : null;
        $this->container['preserveWhitespaceXPath'] = isset($data['preserveWhitespaceXPath']) ? $data['preserveWhitespaceXPath'] : null;
        $this->container['preserveCharEntities'] = isset($data['preserveCharEntities']) ? $data['preserveCharEntities'] : null;
        $this->container['contextKeyXPath'] = isset($data['contextKeyXPath']) ? $data['contextKeyXPath'] : null;
        $this->container['xslUrl'] = isset($data['xslUrl']) ? $data['xslUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRulesFormatAllowableValues();
        if (!in_array($this->container['rulesFormat'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rulesFormat', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getRulesFormatAllowableValues();
        if (!in_array($this->container['rulesFormat'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets rulesFormat
     *
     * @return string
     */
    public function getRulesFormat()
    {
        return $this->container['rulesFormat'];
    }

    /**
     * Sets rulesFormat
     *
     * @param string $rulesFormat default: PLAIN
     *
     * @return $this
     */
    public function setRulesFormat($rulesFormat)
    {
        $allowedValues = $this->getRulesFormatAllowableValues();
        if (!is_null($rulesFormat) && !in_array($rulesFormat, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rulesFormat', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rulesFormat'] = $rulesFormat;

        return $this;
    }

    /**
     * Gets includeElementsPlain
     *
     * @return string
     */
    public function getIncludeElementsPlain()
    {
        return $this->container['includeElementsPlain'];
    }

    /**
     * Sets includeElementsPlain
     *
     * @param string $includeElementsPlain default: *, example: \"para,heading\"
     *
     * @return $this
     */
    public function setIncludeElementsPlain($includeElementsPlain)
    {
        $this->container['includeElementsPlain'] = $includeElementsPlain;

        return $this;
    }

    /**
     * Gets excludeElementsPlain
     *
     * @return string
     */
    public function getExcludeElementsPlain()
    {
        return $this->container['excludeElementsPlain'];
    }

    /**
     * Sets excludeElementsPlain
     *
     * @param string $excludeElementsPlain example: \"script,par\"
     *
     * @return $this
     */
    public function setExcludeElementsPlain($excludeElementsPlain)
    {
        $this->container['excludeElementsPlain'] = $excludeElementsPlain;

        return $this;
    }

    /**
     * Gets includeAttributesPlain
     *
     * @return string
     */
    public function getIncludeAttributesPlain()
    {
        return $this->container['includeAttributesPlain'];
    }

    /**
     * Sets includeAttributesPlain
     *
     * @param string $includeAttributesPlain example: \"title\"
     *
     * @return $this
     */
    public function setIncludeAttributesPlain($includeAttributesPlain)
    {
        $this->container['includeAttributesPlain'] = $includeAttributesPlain;

        return $this;
    }

    /**
     * Gets excludeAttributesPlain
     *
     * @return string
     */
    public function getExcludeAttributesPlain()
    {
        return $this->container['excludeAttributesPlain'];
    }

    /**
     * Sets excludeAttributesPlain
     *
     * @param string $excludeAttributesPlain example: \"lang,href\"
     *
     * @return $this
     */
    public function setExcludeAttributesPlain($excludeAttributesPlain)
    {
        $this->container['excludeAttributesPlain'] = $excludeAttributesPlain;

        return $this;
    }

    /**
     * Gets inlineElementsNonTranslatablePlain
     *
     * @return string
     */
    public function getInlineElementsNonTranslatablePlain()
    {
        return $this->container['inlineElementsNonTranslatablePlain'];
    }

    /**
     * Sets inlineElementsNonTranslatablePlain
     *
     * @param string $inlineElementsNonTranslatablePlain example: \"tt,b\"
     *
     * @return $this
     */
    public function setInlineElementsNonTranslatablePlain($inlineElementsNonTranslatablePlain)
    {
        $this->container['inlineElementsNonTranslatablePlain'] = $inlineElementsNonTranslatablePlain;

        return $this;
    }

    /**
     * Gets inlineElementsPlain
     *
     * @return string
     */
    public function getInlineElementsPlain()
    {
        return $this->container['inlineElementsPlain'];
    }

    /**
     * Sets inlineElementsPlain
     *
     * @param string $inlineElementsPlain inlineElementsPlain
     *
     * @return $this
     */
    public function setInlineElementsPlain($inlineElementsPlain)
    {
        $this->container['inlineElementsPlain'] = $inlineElementsPlain;

        return $this;
    }

    /**
     * Gets inlineElementsAutoPlain
     *
     * @return bool
     */
    public function getInlineElementsAutoPlain()
    {
        return $this->container['inlineElementsAutoPlain'];
    }

    /**
     * Sets inlineElementsAutoPlain
     *
     * @param bool $inlineElementsAutoPlain inlineElementsAutoPlain
     *
     * @return $this
     */
    public function setInlineElementsAutoPlain($inlineElementsAutoPlain)
    {
        $this->container['inlineElementsAutoPlain'] = $inlineElementsAutoPlain;

        return $this;
    }

    /**
     * Gets htmlSubfilterElementsPlain
     *
     * @return string
     */
    public function getHtmlSubfilterElementsPlain()
    {
        return $this->container['htmlSubfilterElementsPlain'];
    }

    /**
     * Sets htmlSubfilterElementsPlain
     *
     * @param string $htmlSubfilterElementsPlain example: \"tt,b\"
     *
     * @return $this
     */
    public function setHtmlSubfilterElementsPlain($htmlSubfilterElementsPlain)
    {
        $this->container['htmlSubfilterElementsPlain'] = $htmlSubfilterElementsPlain;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return bool
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param bool $entities entities
     *
     * @return $this
     */
    public function setEntities($entities)
    {
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets lockElementsPlain
     *
     * @return string
     */
    public function getLockElementsPlain()
    {
        return $this->container['lockElementsPlain'];
    }

    /**
     * Sets lockElementsPlain
     *
     * @param string $lockElementsPlain lockElementsPlain
     *
     * @return $this
     */
    public function setLockElementsPlain($lockElementsPlain)
    {
        $this->container['lockElementsPlain'] = $lockElementsPlain;

        return $this;
    }

    /**
     * Gets lockAttributesPlain
     *
     * @return string
     */
    public function getLockAttributesPlain()
    {
        return $this->container['lockAttributesPlain'];
    }

    /**
     * Sets lockAttributesPlain
     *
     * @param string $lockAttributesPlain lockAttributesPlain
     *
     * @return $this
     */
    public function setLockAttributesPlain($lockAttributesPlain)
    {
        $this->container['lockAttributesPlain'] = $lockAttributesPlain;

        return $this;
    }

    /**
     * Gets includeXPath
     *
     * @return string
     */
    public function getIncludeXPath()
    {
        return $this->container['includeXPath'];
    }

    /**
     * Sets includeXPath
     *
     * @param string $includeXPath includeXPath
     *
     * @return $this
     */
    public function setIncludeXPath($includeXPath)
    {
        $this->container['includeXPath'] = $includeXPath;

        return $this;
    }

    /**
     * Gets inlineElementsXpath
     *
     * @return string
     */
    public function getInlineElementsXpath()
    {
        return $this->container['inlineElementsXpath'];
    }

    /**
     * Sets inlineElementsXpath
     *
     * @param string $inlineElementsXpath inlineElementsXpath
     *
     * @return $this
     */
    public function setInlineElementsXpath($inlineElementsXpath)
    {
        $this->container['inlineElementsXpath'] = $inlineElementsXpath;

        return $this;
    }

    /**
     * Gets inlineElementsNonTranslatableXPath
     *
     * @return string
     */
    public function getInlineElementsNonTranslatableXPath()
    {
        return $this->container['inlineElementsNonTranslatableXPath'];
    }

    /**
     * Sets inlineElementsNonTranslatableXPath
     *
     * @param string $inlineElementsNonTranslatableXPath inlineElementsNonTranslatableXPath
     *
     * @return $this
     */
    public function setInlineElementsNonTranslatableXPath($inlineElementsNonTranslatableXPath)
    {
        $this->container['inlineElementsNonTranslatableXPath'] = $inlineElementsNonTranslatableXPath;

        return $this;
    }

    /**
     * Gets inlineElementsAutoXPath
     *
     * @return bool
     */
    public function getInlineElementsAutoXPath()
    {
        return $this->container['inlineElementsAutoXPath'];
    }

    /**
     * Sets inlineElementsAutoXPath
     *
     * @param bool $inlineElementsAutoXPath inlineElementsAutoXPath
     *
     * @return $this
     */
    public function setInlineElementsAutoXPath($inlineElementsAutoXPath)
    {
        $this->container['inlineElementsAutoXPath'] = $inlineElementsAutoXPath;

        return $this;
    }

    /**
     * Gets htmlSubfilterElementsXpath
     *
     * @return string
     */
    public function getHtmlSubfilterElementsXpath()
    {
        return $this->container['htmlSubfilterElementsXpath'];
    }

    /**
     * Sets htmlSubfilterElementsXpath
     *
     * @param string $htmlSubfilterElementsXpath htmlSubfilterElementsXpath
     *
     * @return $this
     */
    public function setHtmlSubfilterElementsXpath($htmlSubfilterElementsXpath)
    {
        $this->container['htmlSubfilterElementsXpath'] = $htmlSubfilterElementsXpath;

        return $this;
    }

    /**
     * Gets lockXPath
     *
     * @return string
     */
    public function getLockXPath()
    {
        return $this->container['lockXPath'];
    }

    /**
     * Sets lockXPath
     *
     * @param string $lockXPath lockXPath
     *
     * @return $this
     */
    public function setLockXPath($lockXPath)
    {
        $this->container['lockXPath'] = $lockXPath;

        return $this;
    }

    /**
     * Gets segmentation
     *
     * @return bool
     */
    public function getSegmentation()
    {
        return $this->container['segmentation'];
    }

    /**
     * Sets segmentation
     *
     * @param bool $segmentation default: true
     *
     * @return $this
     */
    public function setSegmentation($segmentation)
    {
        $this->container['segmentation'] = $segmentation;

        return $this;
    }

    /**
     * Gets tagRegexp
     *
     * @return string
     */
    public function getTagRegexp()
    {
        return $this->container['tagRegexp'];
    }

    /**
     * Sets tagRegexp
     *
     * @param string $tagRegexp tagRegexp
     *
     * @return $this
     */
    public function setTagRegexp($tagRegexp)
    {
        $this->container['tagRegexp'] = $tagRegexp;

        return $this;
    }

    /**
     * Gets contextNoteXpath
     *
     * @return string
     */
    public function getContextNoteXpath()
    {
        return $this->container['contextNoteXpath'];
    }

    /**
     * Sets contextNoteXpath
     *
     * @param string $contextNoteXpath contextNoteXpath
     *
     * @return $this
     */
    public function setContextNoteXpath($contextNoteXpath)
    {
        $this->container['contextNoteXpath'] = $contextNoteXpath;

        return $this;
    }

    /**
     * Gets maxLenXPath
     *
     * @return string
     */
    public function getMaxLenXPath()
    {
        return $this->container['maxLenXPath'];
    }

    /**
     * Sets maxLenXPath
     *
     * @param string $maxLenXPath maxLenXPath
     *
     * @return $this
     */
    public function setMaxLenXPath($maxLenXPath)
    {
        $this->container['maxLenXPath'] = $maxLenXPath;

        return $this;
    }

    /**
     * Gets preserveWhitespaceXPath
     *
     * @return string
     */
    public function getPreserveWhitespaceXPath()
    {
        return $this->container['preserveWhitespaceXPath'];
    }

    /**
     * Sets preserveWhitespaceXPath
     *
     * @param string $preserveWhitespaceXPath preserveWhitespaceXPath
     *
     * @return $this
     */
    public function setPreserveWhitespaceXPath($preserveWhitespaceXPath)
    {
        $this->container['preserveWhitespaceXPath'] = $preserveWhitespaceXPath;

        return $this;
    }

    /**
     * Gets preserveCharEntities
     *
     * @return string
     */
    public function getPreserveCharEntities()
    {
        return $this->container['preserveCharEntities'];
    }

    /**
     * Sets preserveCharEntities
     *
     * @param string $preserveCharEntities preserveCharEntities
     *
     * @return $this
     */
    public function setPreserveCharEntities($preserveCharEntities)
    {
        $this->container['preserveCharEntities'] = $preserveCharEntities;

        return $this;
    }

    /**
     * Gets contextKeyXPath
     *
     * @return string
     */
    public function getContextKeyXPath()
    {
        return $this->container['contextKeyXPath'];
    }

    /**
     * Sets contextKeyXPath
     *
     * @param string $contextKeyXPath contextKeyXPath
     *
     * @return $this
     */
    public function setContextKeyXPath($contextKeyXPath)
    {
        $this->container['contextKeyXPath'] = $contextKeyXPath;

        return $this;
    }

    /**
     * Gets xslUrl
     *
     * @return string
     */
    public function getXslUrl()
    {
        return $this->container['xslUrl'];
    }

    /**
     * Sets xslUrl
     *
     * @param string $xslUrl xslUrl
     *
     * @return $this
     */
    public function setXslUrl($xslUrl)
    {
        $this->container['xslUrl'] = $xslUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


