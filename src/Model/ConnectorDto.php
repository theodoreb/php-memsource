<?php
/**
 * ConnectorDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Memsource REST API
 *
 * Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).
 *
 * OpenAPI spec version: All
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Memsource\Model;

use \ArrayAccess;
use \Memsource\ObjectSerializer;

/**
 * ConnectorDto Class Doc Comment
 *
 * @category Class
 * @package  Memsource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectorDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConnectorDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'organization' => '\Memsource\Model\NameDto',
        'createdBy' => '\Memsource\Model\NameDto',
        'createdAt' => '\DateTime',
        'localToken' => 'string',
        'automatedProjectSettings' => '\Memsource\Model\AutomatedProjectSettingsDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'organization' => null,
        'createdBy' => null,
        'createdAt' => 'date-time',
        'localToken' => null,
        'automatedProjectSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'organization' => 'organization',
        'createdBy' => 'createdBy',
        'createdAt' => 'createdAt',
        'localToken' => 'localToken',
        'automatedProjectSettings' => 'automatedProjectSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'organization' => 'setOrganization',
        'createdBy' => 'setCreatedBy',
        'createdAt' => 'setCreatedAt',
        'localToken' => 'setLocalToken',
        'automatedProjectSettings' => 'setAutomatedProjectSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'organization' => 'getOrganization',
        'createdBy' => 'getCreatedBy',
        'createdAt' => 'getCreatedAt',
        'localToken' => 'getLocalToken',
        'automatedProjectSettings' => 'getAutomatedProjectSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_DROPBOX = 'DROPBOX';
    const TYPE_GOOGLE = 'GOOGLE';
    const TYPE_FTP = 'FTP';
    const TYPE_WORDPRESS = 'WORDPRESS';
    const TYPE_GITHUB = 'GITHUB';
    const TYPE_SFTP = 'SFTP';
    const TYPE_DRUPAL = 'DRUPAL';
    const TYPE_BOX = 'BOX';
    const TYPE_GIT = 'GIT';
    const TYPE_ZENDESK = 'ZENDESK';
    const TYPE_ONEDRIVE = 'ONEDRIVE';
    const TYPE_GITLAB = 'GITLAB';
    const TYPE_MARKETO = 'MARKETO';
    const TYPE_HUBSPOT = 'HUBSPOT';
    const TYPE_HELPSCOUT = 'HELPSCOUT';
    const TYPE_SALESFORCE = 'SALESFORCE';
    const TYPE_BITBUCKET = 'BITBUCKET';
    const TYPE_BITBUCKETSERVER = 'BITBUCKETSERVER';
    const TYPE_SHAREPOINT = 'SHAREPOINT';
    const TYPE_AZURE = 'AZURE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DROPBOX,
            self::TYPE_GOOGLE,
            self::TYPE_FTP,
            self::TYPE_WORDPRESS,
            self::TYPE_GITHUB,
            self::TYPE_SFTP,
            self::TYPE_DRUPAL,
            self::TYPE_BOX,
            self::TYPE_GIT,
            self::TYPE_ZENDESK,
            self::TYPE_ONEDRIVE,
            self::TYPE_GITLAB,
            self::TYPE_MARKETO,
            self::TYPE_HUBSPOT,
            self::TYPE_HELPSCOUT,
            self::TYPE_SALESFORCE,
            self::TYPE_BITBUCKET,
            self::TYPE_BITBUCKETSERVER,
            self::TYPE_SHAREPOINT,
            self::TYPE_AZURE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['localToken'] = isset($data['localToken']) ? $data['localToken'] : null;
        $this->container['automatedProjectSettings'] = isset($data['automatedProjectSettings']) ? $data['automatedProjectSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Memsource\Model\NameDto
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Memsource\Model\NameDto $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \Memsource\Model\NameDto
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \Memsource\Model\NameDto $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets localToken
     *
     * @return string
     */
    public function getLocalToken()
    {
        return $this->container['localToken'];
    }

    /**
     * Sets localToken
     *
     * @param string $localToken localToken
     *
     * @return $this
     */
    public function setLocalToken($localToken)
    {
        $this->container['localToken'] = $localToken;

        return $this;
    }

    /**
     * Gets automatedProjectSettings
     *
     * @return \Memsource\Model\AutomatedProjectSettingsDto[]
     */
    public function getAutomatedProjectSettings()
    {
        return $this->container['automatedProjectSettings'];
    }

    /**
     * Sets automatedProjectSettings
     *
     * @param \Memsource\Model\AutomatedProjectSettingsDto[] $automatedProjectSettings automatedProjectSettings
     *
     * @return $this
     */
    public function setAutomatedProjectSettings($automatedProjectSettings)
    {
        $this->container['automatedProjectSettings'] = $automatedProjectSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


